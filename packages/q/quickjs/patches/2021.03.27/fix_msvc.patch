From 04e7d5e0088d26993a96de27d5807686c1e3faeb Mon Sep 17 00:00:00 2001
From: yszhou <987912102@qq.com>
Date: Fri, 24 Jun 2022 18:22:16 +0800
Subject: [PATCH] fix_2021.03.27_msvc

---
 cutils.c           |   27 +-
 cutils.h           |  107 +-
 libunicode-table.h | 4285 ++++++++++++++++++++++----------------------
 quickjs-atom.h     |    9 +
 quickjs-libc.c     |   50 +-
 quickjs-opcode.h   |    5 +
 quickjs-version.h  |    1 +
 quickjs.c          | 2163 +++++++++++++++-------
 quickjs.h          |  230 ++-
 9 files changed, 3960 insertions(+), 2917 deletions(-)
 create mode 100644 quickjs-version.h

diff --git a/cutils.c b/cutils.c
index a02fb76..a78e36f 100644
--- a/cutils.c
+++ b/cutils.c
@@ -29,6 +29,30 @@
 
 #include "cutils.h"
 
+#ifdef _MSC_VER
+
+ // From: https://stackoverflow.com/a/26085827
+int gettimeofday(struct timeval * tp, struct timezone * tzp)
+{
+  static const uint64_t EPOCH = ((uint64_t)116444736000000000ULL);
+
+  SYSTEMTIME  system_time;
+  FILETIME    file_time;
+  uint64_t    time;
+
+  GetSystemTime(&system_time);
+  SystemTimeToFileTime(&system_time, &file_time);
+  time = ((uint64_t)file_time.dwLowDateTime);
+  time += ((uint64_t)file_time.dwHighDateTime) << 32;
+
+  tp->tv_sec = (long)((time - EPOCH) / 10000000L);
+  tp->tv_usec = (long)(system_time.wMilliseconds * 1000);
+
+  return 0;
+}
+#endif
+
+
 void pstrcpy(char *buf, int buf_size, const char *str)
 {
     int c;
@@ -166,8 +190,7 @@ int dbuf_putstr(DynBuf *s, const char *str)
     return dbuf_put(s, (const uint8_t *)str, strlen(str));
 }
 
-int __attribute__((format(printf, 2, 3))) dbuf_printf(DynBuf *s,
-                                                      const char *fmt, ...)
+int printf_like(2, 3) dbuf_printf(DynBuf *s, const char *fmt, ...)
 {
     va_list ap;
     char buf[128];
diff --git a/cutils.h b/cutils.h
index 31f7cd8..51f0be8 100644
--- a/cutils.h
+++ b/cutils.h
@@ -27,15 +27,40 @@
 
 #include <stdlib.h>
 #include <inttypes.h>
+#include <string.h>
+
+#ifdef _MSC_VER
+  #include <windows.h>
+  #include <intrin.h>
+  #ifndef alloca
+    #define alloca(s) _alloca(s)
+  #endif
+#else 
+  #include <sys/time.h>
+#endif
 
 /* set if CPU is big endian */
 #undef WORDS_BIGENDIAN
 
-#define likely(x)       __builtin_expect(!!(x), 1)
-#define unlikely(x)     __builtin_expect(!!(x), 0)
-#define force_inline inline __attribute__((always_inline))
-#define no_inline __attribute__((noinline))
-#define __maybe_unused __attribute__((unused))
+#ifndef __has_attribute
+  #define likely(x)    (x)
+  #define unlikely(x)  (x)
+  #define force_inline __forceinline
+  #define no_inline __declspec(noinline)
+  #define __maybe_unused
+  #define __attribute__(x)
+  #define __attribute(x)
+  typedef intptr_t ssize_t;
+  #define printf_like(A, B) /*__attribute__((format(printf, (A), (B))))*/
+#else
+  #define likely(x)       __builtin_expect(!!(x), 1)
+  #define unlikely(x)     __builtin_expect(!!(x), 0)
+  #define force_inline inline __attribute__((always_inline))
+  #define no_inline __attribute__((noinline))
+  #define __maybe_unused __attribute__((unused))
+  //#define printf_like(A, B) __attribute__((format(printf, (A), (B))))
+  #define printf_like(A, B) 
+#endif
 
 #define xglue(x, y) x ## y
 #define glue(x, y) xglue(x, y)
@@ -114,27 +139,91 @@ static inline int64_t min_int64(int64_t a, int64_t b)
 /* WARNING: undefined if a = 0 */
 static inline int clz32(unsigned int a)
 {
+#ifdef _MSC_VER
+    unsigned long idx;
+    _BitScanReverse(&idx, a);
+    return 31 ^ idx;
+#else
     return __builtin_clz(a);
+#endif
 }
 
 /* WARNING: undefined if a = 0 */
 static inline int clz64(uint64_t a)
 {
-    return __builtin_clzll(a);
+#ifdef _MSC_VER
+  unsigned long where;
+  // BitScanReverse scans from MSB to LSB for first set bit.
+  // Returns 0 if no set bit is found.
+#if INTPTR_MAX >= INT64_MAX // 64-bit
+  if (_BitScanReverse64(&where, a))
+    return (int)(63 - where);
+#else
+  // Scan the high 32 bits.
+  if (_BitScanReverse(&where, (uint32_t)(a >> 32)))
+    return (int)(63 - (where + 32)); // Create a bit offset from the MSB.
+  // Scan the low 32 bits.
+  if (_BitScanReverse(&where, (uint32_t)(a)))
+    return (int)(63 - where);
+#endif
+  return 64; // Undefined Behavior.
+#else
+  return __builtin_clzll(a);
+#endif
 }
 
 /* WARNING: undefined if a = 0 */
 static inline int ctz32(unsigned int a)
 {
+#ifdef _MSC_VER
+    unsigned long idx;
+    _BitScanForward(&idx, a);
+    return 31 ^ idx;
+#else
     return __builtin_ctz(a);
+#endif
 }
 
 /* WARNING: undefined if a = 0 */
 static inline int ctz64(uint64_t a)
 {
-    return __builtin_ctzll(a);
+#ifdef _MSC_VER
+  unsigned long where;
+  // Search from LSB to MSB for first set bit.
+  // Returns zero if no set bit is found.
+#if INTPTR_MAX >= INT64_MAX // 64-bit
+  if (_BitScanForward64(&where, a))
+    return (int)(where);
+#else
+  // Win32 doesn't have _BitScanForward64 so emulate it with two 32 bit calls.
+  // Scan the Low Word.
+  if (_BitScanForward(&where, (uint32_t)(a)))
+    return (int)(where);
+  // Scan the High Word.
+  if (_BitScanForward(&where, (uint32_t)(a >> 32)))
+    return (int)(where + 32); // Create a bit offset from the LSB.
+#endif
+  return 64;
+#else
+  return __builtin_ctzll(a);
+#endif
 }
 
+#ifdef _MSC_VER
+#pragma pack(push, 1)
+struct packed_u64 {
+    uint64_t v;
+};
+
+struct packed_u32 {
+    uint32_t v;
+};
+
+struct packed_u16 {
+    uint16_t v;
+};
+#pragma pack(pop)
+#else
 struct __attribute__((packed)) packed_u64 {
     uint64_t v;
 };
@@ -146,6 +235,7 @@ struct __attribute__((packed)) packed_u32 {
 struct __attribute__((packed)) packed_u16 {
     uint16_t v;
 };
+#endif
 
 static inline uint64_t get_u64(const uint8_t *tab)
 {
@@ -262,8 +352,7 @@ static inline int dbuf_put_u64(DynBuf *s, uint64_t val)
 {
     return dbuf_put(s, (uint8_t *)&val, 8);
 }
-int __attribute__((format(printf, 2, 3))) dbuf_printf(DynBuf *s,
-                                                      const char *fmt, ...);
+int printf_like(2, 3) dbuf_printf(DynBuf *s, const char *fmt, ...);
 void dbuf_free(DynBuf *s);
 static inline BOOL dbuf_error(DynBuf *s) {
     return s->error;
diff --git a/libunicode-table.h b/libunicode-table.h
index 1727525..0ef2113 100644
--- a/libunicode-table.h
+++ b/libunicode-table.h
@@ -3,7 +3,7 @@
 
 #include <stdint.h>
 
-static const uint32_t case_conv_table1[370] = {
+static const uint32_t case_conv_table1[361] = {
     0x00209a30, 0x00309a00, 0x005a8173, 0x00601730,
     0x006c0730, 0x006f81b3, 0x00701700, 0x007c0700,
     0x007f8100, 0x00803040, 0x009801c3, 0x00988190,
@@ -74,8 +74,8 @@ static const uint32_t case_conv_table1[370] = {
     0x0ffb01b2, 0x0ffb81d9, 0x0ffc0230, 0x0ffd0230,
     0x0ffe0162, 0x109301a0, 0x109501a0, 0x109581a0,
     0x10990131, 0x10a70101, 0x10b01031, 0x10b81001,
-    0x10c18240, 0x125b1a31, 0x12681a01, 0x16003031,
-    0x16183001, 0x16300240, 0x16310130, 0x16318130,
+    0x10c18240, 0x125b1a31, 0x12681a01, 0x16002f31,
+    0x16182f01, 0x16300240, 0x16310130, 0x16318130,
     0x16320130, 0x16328100, 0x16330100, 0x16338640,
     0x16368130, 0x16370130, 0x16378130, 0x16380130,
     0x16390240, 0x163a8240, 0x163f0230, 0x16406440,
@@ -85,21 +85,19 @@ static const uint32_t case_conv_table1[370] = {
     0x53c58240, 0x53c68130, 0x53c80440, 0x53ca0101,
     0x53cb1440, 0x53d50130, 0x53d58130, 0x53d60130,
     0x53d68130, 0x53d70130, 0x53d80130, 0x53d88130,
-    0x53d90130, 0x53d98131, 0x53da1040, 0x53e20131,
-    0x53e28130, 0x53e30130, 0x53e38440, 0x53e80240,
-    0x53eb0440, 0x53fa8240, 0x55a98101, 0x55b85020,
-    0x7d8001b2, 0x7d8081b2, 0x7d8101b2, 0x7d8181da,
-    0x7d8201da, 0x7d8281b3, 0x7d8301b3, 0x7d8981bb,
-    0x7d8a01bb, 0x7d8a81bb, 0x7d8b01bc, 0x7d8b81bb,
-    0x7f909a31, 0x7fa09a01, 0x82002831, 0x82142801,
-    0x82582431, 0x826c2401, 0x82b80b31, 0x82be0f31,
-    0x82c60731, 0x82ca0231, 0x82cb8b01, 0x82d18f01,
-    0x82d98701, 0x82dd8201, 0x86403331, 0x86603301,
-    0x8c502031, 0x8c602001, 0xb7202031, 0xb7302001,
-    0xf4802231, 0xf4912201,
+    0x53d90130, 0x53d98131, 0x53da0c40, 0x53e10240,
+    0x53e20131, 0x53e28130, 0x53e30130, 0x53e38440,
+    0x53fa8240, 0x55a98101, 0x55b85020, 0x7d8001b2,
+    0x7d8081b2, 0x7d8101b2, 0x7d8181da, 0x7d8201da,
+    0x7d8281b3, 0x7d8301b3, 0x7d8981bb, 0x7d8a01bb,
+    0x7d8a81bb, 0x7d8b01bc, 0x7d8b81bb, 0x7f909a31,
+    0x7fa09a01, 0x82002831, 0x82142801, 0x82582431,
+    0x826c2401, 0x86403331, 0x86603301, 0x8c502031,
+    0x8c602001, 0xb7202031, 0xb7302001, 0xf4802231,
+    0xf4912201,
 };
 
-static const uint8_t case_conv_table2[370] = {
+static const uint8_t case_conv_table2[361] = {
     0x01, 0x00, 0x9c, 0x06, 0x07, 0x4d, 0x03, 0x04,
     0x10, 0x00, 0x8f, 0x0b, 0x00, 0x00, 0x11, 0x00,
     0x08, 0x00, 0x53, 0x4a, 0x51, 0x00, 0x52, 0x00,
@@ -112,7 +110,7 @@ static const uint8_t case_conv_table2[370] = {
     0x2a, 0x00, 0x13, 0x6b, 0x6d, 0x00, 0x26, 0x24,
     0x27, 0x14, 0x16, 0x18, 0x1b, 0x1c, 0x3e, 0x1e,
     0x3f, 0x1f, 0x39, 0x3d, 0x22, 0x21, 0x41, 0x1e,
-    0x40, 0x25, 0x25, 0x26, 0x28, 0x20, 0x2a, 0x48,
+    0x40, 0x25, 0x25, 0x26, 0x28, 0x20, 0x2a, 0x49,
     0x2c, 0x43, 0x2e, 0x4b, 0x30, 0x4c, 0x32, 0x44,
     0x42, 0x99, 0x00, 0x00, 0x95, 0x8f, 0x7d, 0x7e,
     0x83, 0x84, 0x12, 0x80, 0x82, 0x76, 0x77, 0x12,
@@ -121,9 +119,9 @@ static const uint8_t case_conv_table2[370] = {
     0x33, 0x95, 0x00, 0x8e, 0x00, 0x74, 0x99, 0x98,
     0x97, 0x96, 0x00, 0x00, 0x9e, 0x00, 0x9c, 0x00,
     0xa1, 0xa0, 0x15, 0x2e, 0x2f, 0x30, 0xb4, 0xb5,
-    0x4f, 0xaa, 0xa9, 0x12, 0x14, 0x1e, 0x21, 0x22,
+    0x4e, 0xaa, 0xa9, 0x12, 0x14, 0x1e, 0x21, 0x22,
     0x22, 0x2a, 0x34, 0x35, 0xa6, 0xa7, 0x36, 0x1f,
-    0x49, 0x00, 0x00, 0x97, 0x01, 0x5a, 0xda, 0x1d,
+    0x4a, 0x00, 0x00, 0x97, 0x01, 0x5a, 0xda, 0x1d,
     0x36, 0x05, 0x00, 0xc4, 0xc3, 0xc6, 0xc5, 0xc8,
     0xc7, 0xca, 0xc9, 0xcc, 0xcb, 0xc4, 0xd5, 0x45,
     0xd6, 0x42, 0xd7, 0x46, 0xd8, 0xce, 0xd0, 0xd2,
@@ -139,14 +137,13 @@ static const uint8_t case_conv_table2[370] = {
     0x65, 0x44, 0x47, 0x00, 0x4f, 0x62, 0x4e, 0x50,
     0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0xa3, 0xa4,
     0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x00,
-    0x00, 0x5a, 0x00, 0x47, 0x00, 0x5b, 0x56, 0x58,
-    0x60, 0x5e, 0x70, 0x69, 0x6f, 0x4e, 0x00, 0x3b,
-    0x67, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x45, 0xa8,
-    0x8a, 0x8b, 0x8c, 0xab, 0xac, 0x58, 0x58, 0xaf,
-    0x94, 0xb0, 0x6f, 0xb2, 0x5d, 0x5c, 0x5f, 0x5e,
-    0x61, 0x60, 0x66, 0x67, 0x68, 0x69, 0x62, 0x63,
-    0x64, 0x65, 0x6b, 0x6a, 0x6d, 0x6c, 0x6f, 0x6e,
-    0x71, 0x70,
+    0x00, 0x5a, 0x00, 0x48, 0x00, 0x5b, 0x56, 0x58,
+    0x60, 0x5e, 0x70, 0x69, 0x6f, 0x4d, 0x00, 0x00,
+    0x3b, 0x67, 0xb8, 0x00, 0x00, 0x45, 0xa8, 0x8a,
+    0x8b, 0x8c, 0xab, 0xac, 0x58, 0x58, 0xaf, 0x94,
+    0xb0, 0x6f, 0xb2, 0x5c, 0x5b, 0x5e, 0x5d, 0x60,
+    0x5f, 0x62, 0x61, 0x64, 0x63, 0x66, 0x65, 0x68,
+    0x67,
 };
 
 static const uint16_t case_conv_ext[58] = {
@@ -160,7 +157,7 @@ static const uint16_t case_conv_ext[58] = {
     0x006b, 0x00e5,
 };
 
-static const uint8_t unicode_prop_Cased1_table[188] = {
+static const uint8_t unicode_prop_Cased1_table[172] = {
     0x40, 0xa9, 0x80, 0x8e, 0x80, 0xfc, 0x80, 0xd3,
     0x80, 0x8c, 0x80, 0x8d, 0x81, 0x8d, 0x02, 0x80,
     0xe1, 0x80, 0x91, 0x85, 0x9a, 0x01, 0x00, 0x01,
@@ -174,26 +171,24 @@ static const uint8_t unicode_prop_Cased1_table[188] = {
     0x10, 0x11, 0x02, 0x01, 0x18, 0x0b, 0x24, 0x4b,
     0x26, 0x01, 0x01, 0x86, 0xe5, 0x80, 0x60, 0x79,
     0xb6, 0x81, 0x40, 0x91, 0x81, 0xbd, 0x88, 0x94,
-    0x05, 0x80, 0x98, 0x80, 0xa2, 0x00, 0x80, 0xa1,
-    0x82, 0x43, 0x34, 0xa2, 0x06, 0x80, 0x8c, 0x60,
-    0x5c, 0x16, 0x01, 0x10, 0xa9, 0x80, 0x88, 0x60,
-    0xcc, 0x44, 0xd4, 0x80, 0xc6, 0x01, 0x08, 0x09,
-    0x0b, 0x80, 0x8b, 0x00, 0x06, 0x80, 0xc0, 0x03,
-    0x0f, 0x06, 0x80, 0x9b, 0x03, 0x04, 0x00, 0x16,
-    0x80, 0x41, 0x53, 0x81, 0x98, 0x80, 0x98, 0x80,
-    0x9e, 0x80, 0x98, 0x80, 0x9e, 0x80, 0x98, 0x80,
-    0x9e, 0x80, 0x98, 0x80, 0x9e, 0x80, 0x98, 0x07,
-    0x47, 0x33, 0x89, 0x80, 0x93, 0x52, 0x10, 0x99,
+    0x05, 0x80, 0x98, 0x80, 0xc7, 0x82, 0x43, 0x34,
+    0xa2, 0x06, 0x80, 0x8c, 0x61, 0x28, 0x96, 0xd4,
+    0x80, 0xc6, 0x01, 0x08, 0x09, 0x0b, 0x80, 0x8b,
+    0x00, 0x06, 0x80, 0xc0, 0x03, 0x0f, 0x06, 0x80,
+    0x9b, 0x03, 0x04, 0x00, 0x16, 0x80, 0x41, 0x53,
+    0x81, 0x98, 0x80, 0x98, 0x80, 0x9e, 0x80, 0x98,
+    0x80, 0x9e, 0x80, 0x98, 0x80, 0x9e, 0x80, 0x98,
+    0x80, 0x9e, 0x80, 0x98, 0x07, 0x59, 0x63, 0x99,
     0x85, 0x99, 0x85, 0x99,
 };
 
 static const uint8_t unicode_prop_Cased1_index[18] = {
     0xb9, 0x02, 0xe0, 0xa0, 0x1e, 0x40, 0x9e, 0xa6,
-    0x40, 0x55, 0xd4, 0x61, 0xfb, 0xd6, 0x21, 0x8a,
+    0x40, 0xba, 0xd4, 0x01, 0x89, 0xd7, 0x01, 0x8a,
     0xf1, 0x01,
 };
 
-static const uint8_t unicode_prop_Case_Ignorable_table[720] = {
+static const uint8_t unicode_prop_Case_Ignorable_table[692] = {
     0xa6, 0x05, 0x80, 0x8a, 0x80, 0xa2, 0x00, 0x80,
     0xc6, 0x03, 0x00, 0x03, 0x01, 0x81, 0x41, 0xf6,
     0x40, 0xbf, 0x19, 0x18, 0x88, 0x08, 0x80, 0x40,
@@ -202,63 +197,61 @@ static const uint8_t unicode_prop_Case_Ignorable_table[720] = {
     0x89, 0x8a, 0x00, 0xa2, 0x80, 0x89, 0x94, 0x8f,
     0x80, 0xe4, 0x38, 0x89, 0x03, 0xa0, 0x00, 0x80,
     0x9d, 0x9a, 0xda, 0x8a, 0xb9, 0x8a, 0x18, 0x08,
-    0x97, 0x97, 0xaa, 0x82, 0xab, 0x06, 0x0d, 0x87,
-    0xa8, 0xb9, 0xb6, 0x00, 0x03, 0x3b, 0x02, 0x86,
-    0x89, 0x81, 0x8c, 0x80, 0x8e, 0x80, 0xb9, 0x03,
-    0x1f, 0x80, 0x93, 0x81, 0x99, 0x01, 0x81, 0xb8,
-    0x03, 0x0b, 0x09, 0x12, 0x80, 0x9d, 0x0a, 0x80,
-    0x8a, 0x81, 0xb8, 0x03, 0x20, 0x0b, 0x80, 0x93,
-    0x81, 0x95, 0x28, 0x80, 0xb9, 0x01, 0x00, 0x1f,
-    0x06, 0x81, 0x8a, 0x81, 0x9d, 0x80, 0xbc, 0x80,
-    0x8b, 0x80, 0xb1, 0x02, 0x80, 0xb6, 0x00, 0x14,
-    0x10, 0x1e, 0x81, 0x8a, 0x81, 0x9c, 0x80, 0xb9,
-    0x01, 0x05, 0x04, 0x81, 0x93, 0x81, 0x9b, 0x81,
-    0xb8, 0x0b, 0x1f, 0x80, 0x93, 0x81, 0x9c, 0x80,
-    0xc7, 0x06, 0x10, 0x80, 0xd9, 0x01, 0x86, 0x8a,
-    0x88, 0xe1, 0x01, 0x88, 0x88, 0x00, 0x85, 0xc9,
-    0x81, 0x9a, 0x00, 0x00, 0x80, 0xb6, 0x8d, 0x04,
-    0x01, 0x84, 0x8a, 0x80, 0xa3, 0x88, 0x80, 0xe5,
-    0x18, 0x28, 0x09, 0x81, 0x98, 0x0b, 0x82, 0x8f,
-    0x83, 0x8c, 0x01, 0x0d, 0x80, 0x8e, 0x80, 0xdd,
-    0x80, 0x42, 0x5f, 0x82, 0x43, 0xb1, 0x82, 0x9c,
-    0x81, 0x9d, 0x81, 0x9d, 0x81, 0xbf, 0x08, 0x37,
-    0x01, 0x8a, 0x10, 0x20, 0xac, 0x84, 0xb2, 0x80,
-    0xc0, 0x81, 0xa1, 0x80, 0xf5, 0x13, 0x81, 0x88,
-    0x05, 0x82, 0x40, 0xda, 0x09, 0x80, 0xb9, 0x00,
-    0x30, 0x00, 0x01, 0x3d, 0x89, 0x08, 0xa6, 0x07,
-    0x9e, 0xb0, 0x83, 0xaf, 0x00, 0x20, 0x04, 0x80,
-    0xa7, 0x88, 0x8b, 0x81, 0x9f, 0x19, 0x08, 0x82,
-    0xb7, 0x00, 0x0a, 0x00, 0x82, 0xb9, 0x39, 0x81,
-    0xbf, 0x85, 0xd1, 0x10, 0x8c, 0x06, 0x18, 0x28,
-    0x11, 0xb1, 0xbe, 0x8c, 0x80, 0xa1, 0xe4, 0x41,
-    0xbc, 0x00, 0x82, 0x8a, 0x82, 0x8c, 0x82, 0x8c,
-    0x82, 0x8c, 0x81, 0x8b, 0x27, 0x81, 0x89, 0x01,
-    0x01, 0x84, 0xb0, 0x20, 0x89, 0x00, 0x8c, 0x80,
-    0x8f, 0x8c, 0xb2, 0xa0, 0x4b, 0x8a, 0x81, 0xf0,
-    0x82, 0xfc, 0x80, 0x8e, 0x80, 0xdf, 0x9f, 0xae,
-    0x80, 0x41, 0xd4, 0x80, 0xa3, 0x1a, 0x24, 0x80,
-    0xdc, 0x85, 0xdc, 0x82, 0x60, 0x6f, 0x15, 0x80,
-    0x44, 0xe1, 0x85, 0x41, 0x0d, 0x80, 0xe1, 0x18,
-    0x89, 0x00, 0x9b, 0x83, 0xcf, 0x81, 0x8d, 0xa1,
-    0xcd, 0x80, 0x96, 0x82, 0xe6, 0x12, 0x0f, 0x02,
-    0x03, 0x80, 0x98, 0x0c, 0x80, 0x40, 0x96, 0x81,
-    0x99, 0x91, 0x8c, 0x80, 0xa5, 0x87, 0x98, 0x8a,
-    0xad, 0x82, 0xaf, 0x01, 0x19, 0x81, 0x90, 0x80,
-    0x94, 0x81, 0xc1, 0x29, 0x09, 0x81, 0x8b, 0x07,
-    0x80, 0xa2, 0x80, 0x8a, 0x80, 0xb2, 0x00, 0x11,
-    0x0c, 0x08, 0x80, 0x9a, 0x80, 0x8d, 0x0c, 0x08,
-    0x80, 0xe3, 0x84, 0x88, 0x82, 0xf8, 0x01, 0x03,
-    0x80, 0x60, 0x4f, 0x2f, 0x80, 0x40, 0x92, 0x90,
-    0x42, 0x3c, 0x8f, 0x10, 0x8b, 0x8f, 0xa1, 0x01,
-    0x80, 0x40, 0xa8, 0x06, 0x05, 0x80, 0x8a, 0x80,
-    0xa2, 0x00, 0x80, 0xae, 0x80, 0xac, 0x81, 0xc2,
-    0x80, 0x94, 0x82, 0x42, 0x00, 0x80, 0x40, 0xe1,
-    0x80, 0x40, 0x94, 0x84, 0x44, 0x04, 0x28, 0xa9,
-    0x80, 0x88, 0x42, 0x45, 0x10, 0x0c, 0x83, 0xa7,
-    0x13, 0x80, 0x40, 0xa4, 0x81, 0x42, 0x3c, 0x83,
-    0x41, 0x82, 0x81, 0x40, 0x98, 0x8a, 0xb0, 0x83,
-    0xfa, 0x80, 0xb5, 0x8e, 0xa8, 0x01, 0x81, 0x89,
-    0x82, 0xb0, 0x19, 0x09, 0x03, 0x80, 0x89, 0x80,
+    0x97, 0x97, 0xaa, 0x82, 0xf6, 0xaf, 0xb6, 0x00,
+    0x03, 0x3b, 0x02, 0x86, 0x89, 0x81, 0x8c, 0x80,
+    0x8e, 0x80, 0xb9, 0x03, 0x1f, 0x80, 0x93, 0x81,
+    0x99, 0x01, 0x81, 0xb8, 0x03, 0x0b, 0x09, 0x12,
+    0x80, 0x9d, 0x0a, 0x80, 0x8a, 0x81, 0xb8, 0x03,
+    0x20, 0x0b, 0x80, 0x93, 0x81, 0x95, 0x28, 0x80,
+    0xb9, 0x01, 0x00, 0x1f, 0x06, 0x81, 0x8a, 0x81,
+    0x9d, 0x80, 0xbc, 0x80, 0x8b, 0x80, 0xb1, 0x02,
+    0x80, 0xb8, 0x14, 0x10, 0x1e, 0x81, 0x8a, 0x81,
+    0x9c, 0x80, 0xb9, 0x01, 0x05, 0x04, 0x81, 0x93,
+    0x81, 0x9b, 0x81, 0xb8, 0x0b, 0x1f, 0x80, 0x93,
+    0x81, 0x9c, 0x80, 0xc7, 0x06, 0x10, 0x80, 0xd9,
+    0x01, 0x86, 0x8a, 0x88, 0xe1, 0x01, 0x88, 0x88,
+    0x00, 0x85, 0xc9, 0x81, 0x9a, 0x00, 0x00, 0x80,
+    0xb6, 0x8d, 0x04, 0x01, 0x84, 0x8a, 0x80, 0xa3,
+    0x88, 0x80, 0xe5, 0x18, 0x28, 0x09, 0x81, 0x98,
+    0x0b, 0x82, 0x8f, 0x83, 0x8c, 0x01, 0x0d, 0x80,
+    0x8e, 0x80, 0xdd, 0x80, 0x42, 0x5f, 0x82, 0x43,
+    0xb1, 0x82, 0x9c, 0x82, 0x9c, 0x81, 0x9d, 0x81,
+    0xbf, 0x08, 0x37, 0x01, 0x8a, 0x10, 0x20, 0xac,
+    0x83, 0xb3, 0x80, 0xc0, 0x81, 0xa1, 0x80, 0xf5,
+    0x13, 0x81, 0x88, 0x05, 0x82, 0x40, 0xda, 0x09,
+    0x80, 0xb9, 0x00, 0x30, 0x00, 0x01, 0x3d, 0x89,
+    0x08, 0xa6, 0x07, 0x90, 0xbe, 0x83, 0xaf, 0x00,
+    0x20, 0x04, 0x80, 0xa7, 0x88, 0x8b, 0x81, 0x9f,
+    0x19, 0x08, 0x82, 0xb7, 0x00, 0x0a, 0x00, 0x82,
+    0xb9, 0x39, 0x81, 0xbf, 0x85, 0xd1, 0x10, 0x8c,
+    0x06, 0x18, 0x28, 0x11, 0xb1, 0xbe, 0x8c, 0x80,
+    0xa1, 0xde, 0x04, 0x41, 0xbc, 0x00, 0x82, 0x8a,
+    0x82, 0x8c, 0x82, 0x8c, 0x82, 0x8c, 0x81, 0x8b,
+    0x27, 0x81, 0x89, 0x01, 0x01, 0x84, 0xb0, 0x20,
+    0x89, 0x00, 0x8c, 0x80, 0x8f, 0x8c, 0xb2, 0xa0,
+    0x4b, 0x8a, 0x81, 0xf0, 0x82, 0xfc, 0x80, 0x8e,
+    0x80, 0xdf, 0x9f, 0xae, 0x80, 0x41, 0xd4, 0x80,
+    0xa3, 0x1a, 0x24, 0x80, 0xdc, 0x85, 0xdc, 0x82,
+    0x60, 0x6f, 0x15, 0x80, 0x44, 0xe1, 0x85, 0x41,
+    0x0d, 0x80, 0xe1, 0x18, 0x89, 0x00, 0x9b, 0x83,
+    0xcf, 0x81, 0x8d, 0xa1, 0xcd, 0x80, 0x96, 0x82,
+    0xec, 0x0f, 0x02, 0x03, 0x80, 0x98, 0x0c, 0x80,
+    0x40, 0x96, 0x81, 0x99, 0x91, 0x8c, 0x80, 0xa5,
+    0x87, 0x98, 0x8a, 0xad, 0x82, 0xaf, 0x01, 0x19,
+    0x81, 0x90, 0x80, 0x94, 0x81, 0xc1, 0x29, 0x09,
+    0x81, 0x8b, 0x07, 0x80, 0xa2, 0x80, 0x8a, 0x80,
+    0xb2, 0x00, 0x11, 0x0c, 0x08, 0x80, 0x9a, 0x80,
+    0x8d, 0x0c, 0x08, 0x80, 0xe3, 0x84, 0x88, 0x82,
+    0xf8, 0x01, 0x03, 0x80, 0x60, 0x4f, 0x2f, 0x80,
+    0x40, 0x92, 0x8f, 0x42, 0x3d, 0x8f, 0x10, 0x8b,
+    0x8f, 0xa1, 0x01, 0x80, 0x40, 0xa8, 0x06, 0x05,
+    0x80, 0x8a, 0x80, 0xa2, 0x00, 0x80, 0xae, 0x80,
+    0xac, 0x81, 0xc2, 0x80, 0x94, 0x82, 0x42, 0x00,
+    0x80, 0x40, 0xe1, 0x80, 0x40, 0x94, 0x84, 0x46,
+    0x85, 0x10, 0x0c, 0x83, 0xa7, 0x13, 0x80, 0x40,
+    0xa4, 0x81, 0x42, 0x3c, 0x83, 0x41, 0x82, 0x81,
+    0x40, 0x98, 0x8a, 0x40, 0xaf, 0x80, 0xb5, 0x8e,
+    0xb7, 0x82, 0xb0, 0x19, 0x09, 0x80, 0x8e, 0x80,
     0xb1, 0x82, 0xa3, 0x20, 0x87, 0xbd, 0x80, 0x8b,
     0x81, 0xb3, 0x88, 0x89, 0x19, 0x80, 0xde, 0x11,
     0x00, 0x0d, 0x80, 0x40, 0x9f, 0x02, 0x87, 0x94,
@@ -275,30 +268,29 @@ static const uint8_t unicode_prop_Case_Ignorable_table[720] = {
     0x80, 0xc7, 0x0a, 0x00, 0x80, 0x41, 0x5a, 0x81,
     0x55, 0x3a, 0x88, 0x60, 0x36, 0xb6, 0x84, 0xba,
     0x86, 0x88, 0x83, 0x44, 0x0a, 0x80, 0xbe, 0x90,
-    0xbf, 0x08, 0x81, 0x60, 0x40, 0x0a, 0x18, 0x30,
-    0x81, 0x4c, 0x9d, 0x08, 0x83, 0x52, 0x5b, 0xad,
-    0x81, 0x96, 0x42, 0x1f, 0x82, 0x88, 0x8f, 0x0e,
-    0x9d, 0x83, 0x40, 0x93, 0x82, 0x47, 0xba, 0xb6,
-    0x83, 0xb1, 0x38, 0x8d, 0x80, 0x95, 0x20, 0x8e,
-    0x45, 0x4f, 0x30, 0x90, 0x0e, 0x01, 0x04, 0x41,
-    0x04, 0x8d, 0x41, 0x6f, 0x80, 0xbc, 0x83, 0x45,
-    0xdf, 0x86, 0xec, 0x87, 0x4a, 0xae, 0x84, 0x6c,
-    0x0c, 0x00, 0x80, 0x9d, 0xdf, 0xff, 0x40, 0xef,
+    0xbf, 0x08, 0x81, 0x60, 0x4c, 0xb7, 0x08, 0x83,
+    0x54, 0xc2, 0x82, 0x88, 0x8f, 0x0e, 0x9d, 0x83,
+    0x40, 0x93, 0x82, 0x47, 0xba, 0xb6, 0x83, 0xb1,
+    0x38, 0x8d, 0x80, 0x95, 0x20, 0x8e, 0x45, 0x4f,
+    0x30, 0x90, 0x0e, 0x01, 0x04, 0x41, 0x04, 0x8d,
+    0x41, 0xad, 0x83, 0x45, 0xdf, 0x86, 0xec, 0x87,
+    0x4a, 0xae, 0x84, 0x6c, 0x0c, 0x00, 0x80, 0x9d,
+    0xdf, 0xff, 0x40, 0xef,
 };
 
-static const uint8_t unicode_prop_Case_Ignorable_index[69] = {
+static const uint8_t unicode_prop_Case_Ignorable_index[66] = {
     0xbe, 0x05, 0x00, 0xfe, 0x07, 0x00, 0x52, 0x0a,
-    0xa0, 0xc1, 0x0b, 0x00, 0x82, 0x0d, 0x00, 0x3f,
-    0x10, 0x80, 0xd4, 0x17, 0x40, 0xcf, 0x1a, 0x20,
-    0xf5, 0x1c, 0x00, 0x80, 0x20, 0x00, 0x16, 0xa0,
-    0x00, 0xc6, 0xa8, 0x00, 0xc2, 0xaa, 0x60, 0x56,
-    0xfe, 0x20, 0xb1, 0x07, 0x01, 0x82, 0x10, 0x21,
-    0x02, 0x13, 0x21, 0xb8, 0x16, 0x61, 0x97, 0x1a,
-    0x01, 0x37, 0x6b, 0x21, 0x8c, 0xd1, 0x01, 0xd7,
-    0xe8, 0x41, 0xf0, 0x01, 0x0e,
+    0x20, 0x05, 0x0c, 0x20, 0x3b, 0x0e, 0x40, 0x61,
+    0x10, 0x40, 0x0f, 0x18, 0x20, 0x43, 0x1b, 0x60,
+    0x79, 0x1d, 0x00, 0xf1, 0x20, 0x00, 0x0d, 0xa6,
+    0x40, 0x2e, 0xa9, 0x20, 0xde, 0xaa, 0x00, 0x0f,
+    0xff, 0x20, 0xe7, 0x0a, 0x41, 0x82, 0x11, 0x21,
+    0xc4, 0x14, 0x61, 0x44, 0x19, 0x01, 0x48, 0x1d,
+    0x21, 0xa4, 0xbc, 0x01, 0x3e, 0xe1, 0x01, 0xf0,
+    0x01, 0x0e,
 };
 
-static const uint8_t unicode_prop_ID_Start_table[1079] = {
+static const uint8_t unicode_prop_ID_Start_table[1045] = {
     0xc0, 0x99, 0x85, 0x99, 0xae, 0x80, 0x89, 0x03,
     0x04, 0x96, 0x80, 0x9e, 0x80, 0x41, 0xc9, 0x83,
     0x8b, 0x8d, 0x26, 0x00, 0x80, 0x40, 0x80, 0x20,
@@ -309,112 +301,109 @@ static const uint8_t unicode_prop_ID_Start_table[1079] = {
     0x89, 0x11, 0x80, 0x8f, 0x00, 0x9d, 0x9c, 0xd8,
     0x8a, 0x80, 0x97, 0xa0, 0x88, 0x0b, 0x04, 0x95,
     0x18, 0x88, 0x02, 0x80, 0x96, 0x98, 0x86, 0x8a,
-    0x84, 0x97, 0x05, 0x90, 0xa9, 0xb9, 0xb5, 0x10,
-    0x91, 0x06, 0x89, 0x8e, 0x8f, 0x1f, 0x09, 0x81,
-    0x95, 0x06, 0x00, 0x13, 0x10, 0x8f, 0x80, 0x8c,
-    0x08, 0x82, 0x8d, 0x81, 0x89, 0x07, 0x2b, 0x09,
-    0x95, 0x06, 0x01, 0x01, 0x01, 0x9e, 0x18, 0x80,
-    0x92, 0x82, 0x8f, 0x88, 0x02, 0x80, 0x95, 0x06,
-    0x01, 0x04, 0x10, 0x91, 0x80, 0x8e, 0x81, 0x96,
-    0x80, 0x8a, 0x39, 0x09, 0x95, 0x06, 0x01, 0x04,
-    0x10, 0x9d, 0x08, 0x82, 0x8e, 0x80, 0x90, 0x00,
-    0x2a, 0x10, 0x1a, 0x08, 0x00, 0x0a, 0x0a, 0x12,
-    0x8b, 0x95, 0x80, 0xb3, 0x38, 0x10, 0x96, 0x80,
-    0x8f, 0x10, 0x99, 0x11, 0x01, 0x81, 0x9d, 0x03,
-    0x38, 0x10, 0x96, 0x80, 0x89, 0x04, 0x10, 0x9e,
-    0x08, 0x81, 0x8e, 0x81, 0x90, 0x88, 0x02, 0x80,
-    0xa8, 0x08, 0x8f, 0x04, 0x17, 0x82, 0x97, 0x2c,
-    0x91, 0x82, 0x97, 0x80, 0x88, 0x00, 0x0e, 0xb9,
-    0xaf, 0x01, 0x8b, 0x86, 0xb9, 0x08, 0x00, 0x20,
-    0x97, 0x00, 0x80, 0x89, 0x01, 0x88, 0x01, 0x20,
-    0x80, 0x94, 0x83, 0x9f, 0x80, 0xbe, 0x38, 0xa3,
-    0x9a, 0x84, 0xf2, 0xaa, 0x93, 0x80, 0x8f, 0x2b,
-    0x1a, 0x02, 0x0e, 0x13, 0x8c, 0x8b, 0x80, 0x90,
-    0xa5, 0x00, 0x20, 0x81, 0xaa, 0x80, 0x41, 0x4c,
-    0x03, 0x0e, 0x00, 0x03, 0x81, 0xa8, 0x03, 0x81,
-    0xa0, 0x03, 0x0e, 0x00, 0x03, 0x81, 0x8e, 0x80,
-    0xb8, 0x03, 0x81, 0xc2, 0xa4, 0x8f, 0x8f, 0xd5,
-    0x0d, 0x82, 0x42, 0x6b, 0x81, 0x90, 0x80, 0x99,
-    0x84, 0xca, 0x82, 0x8a, 0x86, 0x91, 0x8c, 0x92,
-    0x8d, 0x91, 0x8d, 0x8c, 0x02, 0x8e, 0xb3, 0xa2,
-    0x03, 0x80, 0xc2, 0xd8, 0x86, 0xa8, 0x00, 0x84,
-    0xc5, 0x89, 0x9e, 0xb0, 0x9d, 0x0c, 0x8a, 0xab,
-    0x83, 0x99, 0xb5, 0x96, 0x88, 0xb4, 0xd1, 0x80,
-    0xdc, 0xae, 0x90, 0x87, 0xb5, 0x9d, 0x8c, 0x81,
-    0x89, 0xab, 0x99, 0xa3, 0xa8, 0x82, 0x89, 0xa3,
-    0x81, 0x88, 0x86, 0xaa, 0x0a, 0xa8, 0x18, 0x28,
-    0x0a, 0x04, 0x40, 0xbf, 0xbf, 0x41, 0x15, 0x0d,
-    0x81, 0xa5, 0x0d, 0x0f, 0x00, 0x00, 0x00, 0x80,
-    0x9e, 0x81, 0xb4, 0x06, 0x00, 0x12, 0x06, 0x13,
-    0x0d, 0x83, 0x8c, 0x22, 0x06, 0xf3, 0x80, 0x8c,
-    0x80, 0x8f, 0x8c, 0xe4, 0x03, 0x01, 0x89, 0x00,
-    0x0d, 0x28, 0x00, 0x00, 0x80, 0x8f, 0x0b, 0x24,
-    0x18, 0x90, 0xa8, 0x4a, 0x76, 0x40, 0xe4, 0x2b,
-    0x11, 0x8b, 0xa5, 0x00, 0x20, 0x81, 0xb7, 0x30,
-    0x8f, 0x96, 0x88, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x86, 0x42, 0x25, 0x82, 0x98, 0x88,
-    0x34, 0x0c, 0x83, 0xd5, 0x1c, 0x80, 0xd9, 0x03,
-    0x84, 0xaa, 0x80, 0xdd, 0x90, 0x9f, 0xaf, 0x8f,
-    0x41, 0xff, 0x59, 0xbf, 0xbf, 0x60, 0x56, 0x8c,
-    0xc2, 0xad, 0x81, 0x41, 0x0c, 0x82, 0x8f, 0x89,
-    0x81, 0x93, 0xae, 0x8f, 0x9e, 0x81, 0xcf, 0xa6,
-    0x88, 0x81, 0xe6, 0x81, 0xbf, 0x21, 0x00, 0x04,
-    0x97, 0x8f, 0x02, 0x03, 0x80, 0x96, 0x9c, 0xb3,
-    0x8d, 0xb1, 0xbd, 0x2a, 0x00, 0x81, 0x8a, 0x9b,
-    0x89, 0x96, 0x98, 0x9c, 0x86, 0xae, 0x9b, 0x80,
-    0x8f, 0x20, 0x89, 0x89, 0x20, 0xa8, 0x96, 0x10,
-    0x87, 0x93, 0x96, 0x10, 0x82, 0xb1, 0x00, 0x11,
-    0x0c, 0x08, 0x00, 0x97, 0x11, 0x8a, 0x32, 0x8b,
-    0x29, 0x29, 0x85, 0x88, 0x30, 0x30, 0xaa, 0x80,
-    0x8d, 0x85, 0xf2, 0x9c, 0x60, 0x2b, 0xa3, 0x8b,
-    0x96, 0x83, 0xb0, 0x60, 0x21, 0x03, 0x41, 0x6d,
-    0x81, 0xe9, 0xa5, 0x86, 0x8b, 0x24, 0x00, 0x89,
-    0x80, 0x8c, 0x04, 0x00, 0x01, 0x01, 0x80, 0xeb,
-    0xa0, 0x41, 0x6a, 0x91, 0xbf, 0x81, 0xb5, 0xa7,
-    0x8b, 0xf3, 0x20, 0x40, 0x86, 0xa3, 0x99, 0x85,
-    0x99, 0x8a, 0xd8, 0x15, 0x0d, 0x0d, 0x0a, 0xa2,
-    0x8b, 0x80, 0x99, 0x80, 0x92, 0x01, 0x80, 0x8e,
-    0x81, 0x8d, 0xa1, 0xfa, 0xc4, 0xb4, 0x41, 0x0a,
-    0x9c, 0x82, 0xb0, 0xae, 0x9f, 0x8c, 0x9d, 0x84,
-    0xa5, 0x89, 0x9d, 0x81, 0xa3, 0x1f, 0x04, 0xa9,
-    0x40, 0x9d, 0x91, 0xa3, 0x83, 0xa3, 0x83, 0xa7,
-    0x87, 0xb3, 0x8b, 0x8a, 0x80, 0x8e, 0x06, 0x01,
-    0x80, 0x8a, 0x80, 0x8e, 0x06, 0x01, 0xc2, 0x41,
-    0x36, 0x88, 0x95, 0x89, 0x87, 0x97, 0x28, 0xa9,
-    0x80, 0x88, 0xc4, 0x29, 0x00, 0xab, 0x01, 0x10,
-    0x81, 0x96, 0x89, 0x96, 0x88, 0x9e, 0xc0, 0x92,
-    0x01, 0x89, 0x95, 0x89, 0x99, 0xc5, 0xb7, 0x29,
-    0xbf, 0x80, 0x8e, 0x18, 0x10, 0x9c, 0xa9, 0x9c,
-    0x82, 0x9c, 0xa2, 0x38, 0x9b, 0x9a, 0xb5, 0x89,
-    0x95, 0x89, 0x92, 0x8c, 0x91, 0xed, 0xc8, 0xb6,
-    0xb2, 0x8c, 0xb2, 0x8c, 0xa3, 0x41, 0x5b, 0xa9,
-    0x29, 0xcd, 0x9c, 0x89, 0x07, 0x95, 0xa9, 0x91,
-    0xad, 0x94, 0x9a, 0x96, 0x8b, 0xb4, 0xb8, 0x09,
-    0x80, 0x8c, 0xac, 0x9f, 0x98, 0x99, 0xa3, 0x9c,
-    0x01, 0x07, 0xa2, 0x10, 0x8b, 0xaf, 0x8d, 0x83,
-    0x94, 0x00, 0x80, 0xa2, 0x91, 0x80, 0x98, 0xd3,
-    0x30, 0x00, 0x18, 0x8e, 0x80, 0x89, 0x86, 0xae,
-    0xa5, 0x39, 0x09, 0x95, 0x06, 0x01, 0x04, 0x10,
-    0x91, 0x80, 0x8b, 0x84, 0x40, 0x9d, 0xb4, 0x91,
-    0x83, 0x93, 0x82, 0x9d, 0xaf, 0x93, 0x08, 0x80,
-    0x40, 0xb7, 0xae, 0xa8, 0x83, 0xa3, 0xaf, 0x93,
-    0x80, 0xba, 0xaa, 0x8c, 0x80, 0xc6, 0x9a, 0xa4,
-    0x86, 0x40, 0xb8, 0xab, 0xf3, 0xbf, 0x9e, 0x39,
-    0x01, 0x38, 0x08, 0x97, 0x8e, 0x00, 0x80, 0xdd,
-    0x39, 0xa6, 0x8f, 0x00, 0x80, 0x9b, 0x80, 0x89,
-    0xa7, 0x30, 0x94, 0x80, 0x8a, 0xad, 0x92, 0x80,
-    0x91, 0xc8, 0x41, 0x06, 0x88, 0x80, 0xa4, 0x90,
-    0x80, 0xb0, 0x9d, 0xef, 0x30, 0x08, 0xa5, 0x94,
-    0x80, 0x98, 0x28, 0x08, 0x9f, 0x8d, 0x80, 0x41,
-    0x46, 0x92, 0x40, 0xbc, 0x80, 0xce, 0x43, 0x99,
-    0xe5, 0xee, 0x90, 0x40, 0xc3, 0x4a, 0x4b, 0xe0,
-    0x8e, 0x44, 0x2e, 0x4f, 0xd0, 0x42, 0x46, 0x60,
-    0x21, 0xb8, 0x42, 0x38, 0x86, 0x9e, 0x90, 0xce,
-    0x90, 0x9d, 0x91, 0xaf, 0x8f, 0x83, 0x9e, 0x94,
-    0x84, 0x92, 0x42, 0xaf, 0xbf, 0xff, 0xca, 0x20,
-    0xc1, 0x8c, 0xbf, 0x08, 0x80, 0x9b, 0x57, 0xf7,
-    0x87, 0x44, 0xd5, 0xa9, 0x88, 0x60, 0x22, 0xe6,
-    0x18, 0x30, 0x08, 0x41, 0x22, 0xac, 0x82, 0x90,
+    0xb4, 0x94, 0x80, 0x91, 0xbb, 0xb5, 0x10, 0x91,
+    0x06, 0x89, 0x8e, 0x8f, 0x1f, 0x09, 0x81, 0x95,
+    0x06, 0x00, 0x13, 0x10, 0x8f, 0x80, 0x8c, 0x08,
+    0x82, 0x8d, 0x81, 0x89, 0x07, 0x2b, 0x09, 0x95,
+    0x06, 0x01, 0x01, 0x01, 0x9e, 0x18, 0x80, 0x92,
+    0x82, 0x8f, 0x88, 0x02, 0x80, 0x95, 0x06, 0x01,
+    0x04, 0x10, 0x91, 0x80, 0x8e, 0x81, 0x96, 0x80,
+    0x8a, 0x39, 0x09, 0x95, 0x06, 0x01, 0x04, 0x10,
+    0x9d, 0x08, 0x82, 0x8e, 0x80, 0x90, 0x00, 0x2a,
+    0x10, 0x1a, 0x08, 0x00, 0x0a, 0x0a, 0x12, 0x8b,
+    0x95, 0x80, 0xb3, 0x38, 0x10, 0x96, 0x80, 0x8f,
+    0x10, 0x99, 0x14, 0x81, 0x9d, 0x03, 0x38, 0x10,
+    0x96, 0x80, 0x89, 0x04, 0x10, 0x9f, 0x00, 0x81,
+    0x8e, 0x81, 0x90, 0x88, 0x02, 0x80, 0xa8, 0x08,
+    0x8f, 0x04, 0x17, 0x82, 0x97, 0x2c, 0x91, 0x82,
+    0x97, 0x80, 0x88, 0x00, 0x0e, 0xb9, 0xaf, 0x01,
+    0x8b, 0x86, 0xb9, 0x08, 0x00, 0x20, 0x97, 0x00,
+    0x80, 0x89, 0x01, 0x88, 0x01, 0x20, 0x80, 0x94,
+    0x83, 0x9f, 0x80, 0xbe, 0x38, 0xa3, 0x9a, 0x84,
+    0xf2, 0xaa, 0x93, 0x80, 0x8f, 0x2b, 0x1a, 0x02,
+    0x0e, 0x13, 0x8c, 0x8b, 0x80, 0x90, 0xa5, 0x00,
+    0x20, 0x81, 0xaa, 0x80, 0x41, 0x4c, 0x03, 0x0e,
+    0x00, 0x03, 0x81, 0xa8, 0x03, 0x81, 0xa0, 0x03,
+    0x0e, 0x00, 0x03, 0x81, 0x8e, 0x80, 0xb8, 0x03,
+    0x81, 0xc2, 0xa4, 0x8f, 0x8f, 0xd5, 0x0d, 0x82,
+    0x42, 0x6b, 0x81, 0x90, 0x80, 0x99, 0x84, 0xca,
+    0x82, 0x8a, 0x86, 0x8c, 0x03, 0x8d, 0x91, 0x8d,
+    0x91, 0x8d, 0x8c, 0x02, 0x8e, 0xb3, 0xa2, 0x03,
+    0x80, 0xc2, 0xd8, 0x86, 0xa8, 0x00, 0x84, 0xc5,
+    0x89, 0x9e, 0xb0, 0x9d, 0x0c, 0x8a, 0xab, 0x83,
+    0x99, 0xb5, 0x96, 0x88, 0xb4, 0xd1, 0x80, 0xdc,
+    0xae, 0x90, 0x86, 0xb6, 0x9d, 0x8c, 0x81, 0x89,
+    0xab, 0x99, 0xa3, 0xa8, 0x82, 0x89, 0xa3, 0x81,
+    0x88, 0x86, 0xaa, 0x0a, 0xa8, 0x18, 0x28, 0x0a,
+    0x04, 0x40, 0xbf, 0xbf, 0x41, 0x15, 0x0d, 0x81,
+    0xa5, 0x0d, 0x0f, 0x00, 0x00, 0x00, 0x80, 0x9e,
+    0x81, 0xb4, 0x06, 0x00, 0x12, 0x06, 0x13, 0x0d,
+    0x83, 0x8c, 0x22, 0x06, 0xf3, 0x80, 0x8c, 0x80,
+    0x8f, 0x8c, 0xe4, 0x03, 0x01, 0x89, 0x00, 0x0d,
+    0x28, 0x00, 0x00, 0x80, 0x8f, 0x0b, 0x24, 0x18,
+    0x90, 0xa8, 0x4a, 0x76, 0xae, 0x80, 0xae, 0x80,
+    0x40, 0x84, 0x2b, 0x11, 0x8b, 0xa5, 0x00, 0x20,
+    0x81, 0xb7, 0x30, 0x8f, 0x96, 0x88, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x86, 0x42, 0x25,
+    0x82, 0x98, 0x88, 0x34, 0x0c, 0x83, 0xd5, 0x1c,
+    0x80, 0xd9, 0x03, 0x84, 0xaa, 0x80, 0xdd, 0x90,
+    0x9f, 0xaf, 0x8f, 0x41, 0xff, 0x59, 0xbf, 0xbf,
+    0x60, 0x51, 0xfc, 0x82, 0x44, 0x8c, 0xc2, 0xad,
+    0x81, 0x41, 0x0c, 0x82, 0x8f, 0x89, 0x81, 0x93,
+    0xae, 0x8f, 0x9e, 0x81, 0xcf, 0xa6, 0x88, 0x81,
+    0xe6, 0x81, 0xb4, 0x81, 0x88, 0xa9, 0x8c, 0x02,
+    0x03, 0x80, 0x96, 0x9c, 0xb3, 0x8d, 0xb1, 0xbd,
+    0x2a, 0x00, 0x81, 0x8a, 0x9b, 0x89, 0x96, 0x98,
+    0x9c, 0x86, 0xae, 0x9b, 0x80, 0x8f, 0x20, 0x89,
+    0x89, 0x20, 0xa8, 0x96, 0x10, 0x87, 0x93, 0x96,
+    0x10, 0x82, 0xb1, 0x00, 0x11, 0x0c, 0x08, 0x00,
+    0x97, 0x11, 0x8a, 0x32, 0x8b, 0x29, 0x29, 0x85,
+    0x88, 0x30, 0x30, 0xaa, 0x80, 0x8d, 0x85, 0xf2,
+    0x9c, 0x60, 0x2b, 0xa3, 0x8b, 0x96, 0x83, 0xb0,
+    0x60, 0x21, 0x03, 0x41, 0x6d, 0x81, 0xe9, 0xa5,
+    0x86, 0x8b, 0x24, 0x00, 0x89, 0x80, 0x8c, 0x04,
+    0x00, 0x01, 0x01, 0x80, 0xeb, 0xa0, 0x41, 0x6a,
+    0x91, 0xbf, 0x81, 0xb5, 0xa7, 0x8b, 0xf3, 0x20,
+    0x40, 0x86, 0xa3, 0x99, 0x85, 0x99, 0x8a, 0xd8,
+    0x15, 0x0d, 0x0d, 0x0a, 0xa2, 0x8b, 0x80, 0x99,
+    0x80, 0x92, 0x01, 0x80, 0x8e, 0x81, 0x8d, 0xa1,
+    0xfa, 0xc4, 0xb4, 0x41, 0x0a, 0x9c, 0x82, 0xb0,
+    0xae, 0x9f, 0x8c, 0x9d, 0x84, 0xa5, 0x89, 0x9d,
+    0x81, 0xa3, 0x1f, 0x04, 0xa9, 0x40, 0x9d, 0x91,
+    0xa3, 0x83, 0xa3, 0x83, 0xa7, 0x87, 0xb3, 0x40,
+    0x9b, 0x41, 0x36, 0x88, 0x95, 0x89, 0x87, 0x40,
+    0x97, 0x29, 0x00, 0xab, 0x01, 0x10, 0x81, 0x96,
+    0x89, 0x96, 0x88, 0x9e, 0xc0, 0x92, 0x01, 0x89,
+    0x95, 0x89, 0x99, 0xc5, 0xb7, 0x29, 0xbf, 0x80,
+    0x8e, 0x18, 0x10, 0x9c, 0xa9, 0x9c, 0x82, 0x9c,
+    0xa2, 0x38, 0x9b, 0x9a, 0xb5, 0x89, 0x95, 0x89,
+    0x92, 0x8c, 0x91, 0xed, 0xc8, 0xb6, 0xb2, 0x8c,
+    0xb2, 0x8c, 0xa3, 0x41, 0x5b, 0xa9, 0x29, 0xcd,
+    0x9c, 0x89, 0x07, 0x95, 0xe9, 0x94, 0x9a, 0x96,
+    0x8b, 0xb4, 0xca, 0xac, 0x9f, 0x98, 0x99, 0xa3,
+    0x9c, 0x01, 0x07, 0xa2, 0x10, 0x8b, 0xaf, 0x8d,
+    0x83, 0x94, 0x00, 0x80, 0xa2, 0x91, 0x80, 0x98,
+    0xd3, 0x30, 0x00, 0x18, 0x8e, 0x80, 0x89, 0x86,
+    0xae, 0xa5, 0x39, 0x09, 0x95, 0x06, 0x01, 0x04,
+    0x10, 0x91, 0x80, 0x8b, 0x84, 0x40, 0x9d, 0xb4,
+    0x91, 0x83, 0x93, 0x82, 0x9d, 0xaf, 0x93, 0x08,
+    0x80, 0x40, 0xb7, 0xae, 0xa8, 0x83, 0xa3, 0xaf,
+    0x93, 0x80, 0xba, 0xaa, 0x8c, 0x80, 0xc6, 0x9a,
+    0x40, 0xe4, 0xab, 0xf3, 0xbf, 0x9e, 0x39, 0x01,
+    0x38, 0x08, 0x97, 0x8e, 0x00, 0x80, 0xdd, 0x39,
+    0xa6, 0x8f, 0x00, 0x80, 0x9b, 0x80, 0x89, 0xa7,
+    0x30, 0x94, 0x80, 0x8a, 0xad, 0x92, 0x80, 0xa1,
+    0xb8, 0x41, 0x06, 0x88, 0x80, 0xa4, 0x90, 0x80,
+    0xb0, 0x9d, 0xef, 0x30, 0x08, 0xa5, 0x94, 0x80,
+    0x98, 0x28, 0x08, 0x9f, 0x8d, 0x80, 0x41, 0x46,
+    0x92, 0x40, 0xbc, 0x80, 0xce, 0x43, 0x99, 0xe5,
+    0xee, 0x90, 0x40, 0xc3, 0x4a, 0xbb, 0x44, 0x2e,
+    0x4f, 0xd0, 0x42, 0x46, 0x60, 0x21, 0xb8, 0x42,
+    0x38, 0x86, 0x9e, 0xf0, 0x9d, 0x91, 0xaf, 0x8f,
+    0x83, 0x9e, 0x94, 0x84, 0x92, 0x42, 0xaf, 0xbf,
+    0xff, 0xca, 0x20, 0xc1, 0x8c, 0xbf, 0x08, 0x80,
+    0x9b, 0x57, 0xf7, 0x87, 0x44, 0xd5, 0xa9, 0x88,
+    0x60, 0x22, 0xf6, 0x41, 0x1e, 0xb0, 0x82, 0x90,
     0x1f, 0x41, 0x8b, 0x49, 0x03, 0xea, 0x84, 0x8c,
     0x82, 0x88, 0x86, 0x89, 0x57, 0x65, 0xd4, 0x80,
     0xc6, 0x01, 0x08, 0x09, 0x0b, 0x80, 0x8b, 0x00,
@@ -422,133 +411,131 @@ static const uint8_t unicode_prop_ID_Start_table[1079] = {
     0x03, 0x04, 0x00, 0x16, 0x80, 0x41, 0x53, 0x81,
     0x98, 0x80, 0x98, 0x80, 0x9e, 0x80, 0x98, 0x80,
     0x9e, 0x80, 0x98, 0x80, 0x9e, 0x80, 0x98, 0x80,
-    0x9e, 0x80, 0x98, 0x07, 0x47, 0x33, 0x9e, 0x41,
-    0xe0, 0xac, 0x89, 0x86, 0x8f, 0x80, 0x41, 0x40,
-    0x9d, 0x91, 0xab, 0x44, 0xf3, 0x30, 0x18, 0x08,
-    0x8e, 0x80, 0x40, 0xc4, 0xba, 0xc3, 0x30, 0x44,
-    0xb3, 0x18, 0x9a, 0x01, 0x00, 0x08, 0x80, 0x89,
-    0x03, 0x00, 0x00, 0x28, 0x18, 0x00, 0x00, 0x02,
-    0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
-    0x00, 0x0b, 0x06, 0x03, 0x03, 0x00, 0x80, 0x89,
-    0x80, 0x90, 0x22, 0x04, 0x80, 0x90, 0x51, 0x43,
-    0x60, 0xa6, 0xdf, 0x9f, 0x50, 0x38, 0x86, 0x40,
-    0xdd, 0x81, 0x56, 0x81, 0x8d, 0x5d, 0x30, 0x4c,
-    0x1e, 0x42, 0x1d, 0x45, 0xe1, 0x53, 0x4a,
+    0x9e, 0x80, 0x98, 0x07, 0x49, 0x33, 0xac, 0x89,
+    0x86, 0x8f, 0x80, 0x41, 0x70, 0xab, 0x45, 0x13,
+    0x40, 0xc4, 0xba, 0xc3, 0x30, 0x44, 0xb3, 0x18,
+    0x9a, 0x01, 0x00, 0x08, 0x80, 0x89, 0x03, 0x00,
+    0x00, 0x28, 0x18, 0x00, 0x00, 0x02, 0x01, 0x00,
+    0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0b,
+    0x06, 0x03, 0x03, 0x00, 0x80, 0x89, 0x80, 0x90,
+    0x22, 0x04, 0x80, 0x90, 0x51, 0x43, 0x60, 0xa6,
+    0xdd, 0xa1, 0x50, 0x34, 0x8a, 0x40, 0xdd, 0x81,
+    0x56, 0x81, 0x8d, 0x5d, 0x30, 0x4c, 0x1e, 0x42,
+    0x1d, 0x45, 0xe1, 0x53, 0x4a,
 };
 
-static const uint8_t unicode_prop_ID_Start_index[102] = {
+static const uint8_t unicode_prop_ID_Start_index[99] = {
     0xf6, 0x03, 0x20, 0xa6, 0x07, 0x00, 0xa9, 0x09,
-    0x20, 0xb1, 0x0a, 0x00, 0xba, 0x0b, 0x20, 0x3b,
-    0x0d, 0x20, 0xc7, 0x0e, 0x20, 0x49, 0x12, 0x00,
-    0x9b, 0x16, 0x00, 0xac, 0x19, 0x00, 0xc0, 0x1d,
-    0x80, 0x80, 0x20, 0x20, 0x70, 0x2d, 0x00, 0x00,
-    0x32, 0x00, 0xda, 0xa7, 0x00, 0x4c, 0xaa, 0x20,
-    0xc7, 0xd7, 0x20, 0xfc, 0xfd, 0x20, 0x9d, 0x02,
-    0x21, 0x96, 0x05, 0x01, 0xf3, 0x08, 0x01, 0xb3,
-    0x0c, 0x21, 0x73, 0x11, 0x61, 0x3e, 0x13, 0x01,
-    0x47, 0x17, 0x21, 0x9e, 0x1a, 0x01, 0x9a, 0x23,
-    0x01, 0x78, 0x6b, 0x01, 0xfc, 0xb2, 0x61, 0x3a,
-    0xd5, 0x01, 0x2d, 0xe1, 0x41, 0x33, 0xee, 0x01,
-    0xe0, 0xa6, 0x62, 0x4b, 0x13, 0x03,
+    0x00, 0xb4, 0x0a, 0x00, 0xba, 0x0b, 0x00, 0x3e,
+    0x0d, 0x00, 0xe0, 0x0e, 0x20, 0x57, 0x12, 0x00,
+    0xeb, 0x16, 0x00, 0xca, 0x19, 0x20, 0xc0, 0x1d,
+    0x60, 0x80, 0x20, 0x00, 0x2e, 0x2d, 0x00, 0xc0,
+    0x31, 0x20, 0x89, 0xa7, 0x20, 0xf0, 0xa9, 0x00,
+    0xe3, 0xab, 0x00, 0x3e, 0xfd, 0x00, 0xfb, 0x00,
+    0x21, 0x37, 0x07, 0x61, 0x01, 0x0a, 0x01, 0x1d,
+    0x0f, 0x21, 0x2c, 0x12, 0x01, 0xc8, 0x14, 0x21,
+    0xd1, 0x19, 0x21, 0x47, 0x1d, 0x01, 0x39, 0x6a,
+    0x21, 0x09, 0x8d, 0x01, 0xbc, 0xd4, 0x01, 0xa9,
+    0xd7, 0x21, 0x3a, 0xee, 0x01, 0xde, 0xa6, 0x22,
+    0x4b, 0x13, 0x03,
 };
 
-static const uint8_t unicode_prop_ID_Continue1_table[640] = {
+static const uint8_t unicode_prop_ID_Continue1_table[626] = {
     0xaf, 0x89, 0xa4, 0x80, 0xd6, 0x80, 0x42, 0x47,
     0xef, 0x96, 0x80, 0x40, 0xfa, 0x84, 0x41, 0x08,
     0xac, 0x00, 0x01, 0x01, 0x00, 0xc7, 0x8a, 0xaf,
     0x9e, 0x28, 0xe4, 0x31, 0x29, 0x08, 0x19, 0x89,
     0x96, 0x80, 0x9d, 0x9a, 0xda, 0x8a, 0x8e, 0x89,
     0xa0, 0x88, 0x88, 0x80, 0x97, 0x18, 0x88, 0x02,
-    0x04, 0xaa, 0x82, 0xbb, 0x87, 0xa9, 0x97, 0x80,
-    0xa0, 0xb5, 0x10, 0x91, 0x06, 0x89, 0x09, 0x89,
-    0x90, 0x82, 0xb7, 0x00, 0x31, 0x09, 0x82, 0x88,
-    0x80, 0x89, 0x09, 0x89, 0x8d, 0x01, 0x82, 0xb7,
-    0x00, 0x23, 0x09, 0x12, 0x80, 0x93, 0x8b, 0x10,
-    0x8a, 0x82, 0xb7, 0x00, 0x38, 0x10, 0x82, 0x93,
-    0x09, 0x89, 0x89, 0x28, 0x82, 0xb7, 0x00, 0x31,
-    0x09, 0x16, 0x82, 0x89, 0x09, 0x89, 0x91, 0x80,
-    0xba, 0x22, 0x10, 0x83, 0x88, 0x80, 0x8d, 0x89,
-    0x8f, 0x84, 0xb6, 0x00, 0x30, 0x10, 0x1e, 0x81,
-    0x8a, 0x09, 0x89, 0x90, 0x82, 0xb7, 0x00, 0x30,
-    0x10, 0x1e, 0x81, 0x8a, 0x09, 0x89, 0x8f, 0x83,
-    0xb6, 0x08, 0x30, 0x10, 0x83, 0x88, 0x80, 0x89,
-    0x09, 0x89, 0x90, 0x82, 0xc5, 0x03, 0x28, 0x00,
-    0x3d, 0x89, 0x09, 0xbc, 0x01, 0x86, 0x8b, 0x38,
-    0x89, 0xd6, 0x01, 0x88, 0x8a, 0x29, 0x89, 0xbd,
-    0x0d, 0x89, 0x8a, 0x00, 0x00, 0x03, 0x81, 0xb0,
-    0x93, 0x01, 0x84, 0x8a, 0x80, 0xa3, 0x88, 0x80,
-    0xe3, 0x93, 0x80, 0x89, 0x8b, 0x1b, 0x10, 0x11,
-    0x32, 0x83, 0x8c, 0x8b, 0x80, 0x8e, 0x42, 0xbe,
-    0x82, 0x88, 0x88, 0x43, 0x9f, 0x83, 0x9b, 0x82,
-    0x9c, 0x81, 0x9d, 0x81, 0xbf, 0x9f, 0x88, 0x01,
-    0x89, 0xa0, 0x10, 0x8a, 0x40, 0x8e, 0x80, 0xf5,
-    0x8b, 0x83, 0x8b, 0x89, 0x89, 0xff, 0x8a, 0xbb,
-    0x84, 0xb8, 0x89, 0x80, 0x9c, 0x81, 0x8a, 0x85,
-    0x89, 0x95, 0x8d, 0x80, 0x8f, 0xb0, 0x84, 0xae,
-    0x90, 0x8a, 0x89, 0x90, 0x88, 0x8b, 0x82, 0x9d,
-    0x8c, 0x81, 0x89, 0xab, 0x8d, 0xaf, 0x93, 0x87,
-    0x89, 0x85, 0x89, 0xf5, 0x10, 0x94, 0x18, 0x28,
-    0x0a, 0x40, 0xc5, 0xbf, 0x42, 0x3e, 0x81, 0x92,
-    0x80, 0xfa, 0x8c, 0x18, 0x82, 0x8b, 0x4b, 0xfd,
-    0x82, 0x40, 0x8c, 0x80, 0xdf, 0x9f, 0x42, 0x29,
-    0x85, 0xe8, 0x81, 0x60, 0x75, 0x84, 0x89, 0xc4,
-    0x03, 0x89, 0x9f, 0x81, 0xcf, 0x81, 0x41, 0x0f,
-    0x02, 0x03, 0x80, 0x96, 0x23, 0x80, 0xd2, 0x81,
-    0xb1, 0x91, 0x89, 0x89, 0x85, 0x91, 0x8c, 0x8a,
-    0x9b, 0x87, 0x98, 0x8c, 0xab, 0x83, 0xae, 0x8d,
-    0x8e, 0x89, 0x8a, 0x80, 0x89, 0x89, 0xae, 0x8d,
-    0x8b, 0x07, 0x09, 0x89, 0xa0, 0x82, 0xb1, 0x00,
-    0x11, 0x0c, 0x08, 0x80, 0xa8, 0x24, 0x81, 0x40,
-    0xeb, 0x38, 0x09, 0x89, 0x60, 0x4f, 0x23, 0x80,
-    0x42, 0xe0, 0x8f, 0x8f, 0x8f, 0x11, 0x97, 0x82,
-    0x40, 0xbf, 0x89, 0xa4, 0x80, 0x42, 0xbc, 0x80,
-    0x40, 0xe1, 0x80, 0x40, 0x94, 0x84, 0x41, 0x24,
-    0x89, 0x45, 0x56, 0x10, 0x0c, 0x83, 0xa7, 0x13,
-    0x80, 0x40, 0xa4, 0x81, 0x42, 0x3c, 0x1f, 0x89,
-    0x41, 0x70, 0x81, 0x40, 0x98, 0x8a, 0xb0, 0x83,
-    0xf9, 0x82, 0xb4, 0x8e, 0x9e, 0x8a, 0x09, 0x89,
-    0x83, 0xac, 0x8a, 0x30, 0xac, 0x89, 0x2a, 0xa3,
-    0x8d, 0x80, 0x89, 0x21, 0xab, 0x80, 0x8b, 0x82,
-    0xaf, 0x8d, 0x3b, 0x80, 0x8b, 0xd1, 0x8b, 0x28,
-    0x40, 0x9f, 0x8b, 0x84, 0x89, 0x2b, 0xb6, 0x08,
-    0x31, 0x09, 0x82, 0x88, 0x80, 0x89, 0x09, 0x32,
-    0x84, 0x40, 0xbf, 0x91, 0x88, 0x89, 0x18, 0xd0,
-    0x93, 0x8b, 0x89, 0x40, 0xd4, 0x31, 0x88, 0x9a,
-    0x81, 0xd1, 0x90, 0x8e, 0x89, 0xd0, 0x8c, 0x87,
-    0x89, 0xd2, 0x8e, 0x83, 0x89, 0x40, 0xf1, 0x8e,
-    0x40, 0xa4, 0x89, 0xc5, 0x28, 0x09, 0x18, 0x00,
-    0x81, 0x8b, 0x89, 0xf6, 0x31, 0x32, 0x80, 0x9b,
-    0x89, 0xa7, 0x30, 0x1f, 0x80, 0x88, 0x8a, 0xad,
-    0x8f, 0x41, 0x94, 0x38, 0x87, 0x8f, 0x89, 0xb7,
-    0x95, 0x80, 0x8d, 0xf9, 0x2a, 0x00, 0x08, 0x30,
-    0x07, 0x89, 0xaf, 0x20, 0x08, 0x27, 0x89, 0x41,
-    0x48, 0x83, 0x60, 0x4b, 0x68, 0x89, 0xd5, 0x89,
-    0xa5, 0x84, 0xba, 0x86, 0x98, 0x89, 0x43, 0xf4,
-    0x00, 0xb6, 0x33, 0xd0, 0x80, 0x8a, 0x81, 0x60,
-    0x4c, 0xaa, 0x81, 0x52, 0x60, 0xad, 0x81, 0x96,
-    0x42, 0x1d, 0x22, 0x2f, 0x39, 0x86, 0x9d, 0x83,
-    0x40, 0x93, 0x82, 0x45, 0x88, 0xb1, 0x41, 0xff,
-    0xb6, 0x83, 0xb1, 0x38, 0x8d, 0x80, 0x95, 0x20,
-    0x8e, 0x45, 0x4f, 0x30, 0x90, 0x0e, 0x01, 0x04,
-    0x41, 0x04, 0x86, 0x88, 0x89, 0x41, 0x63, 0x80,
-    0xbc, 0x8d, 0x45, 0xd5, 0x86, 0xec, 0x34, 0x89,
-    0x52, 0x95, 0x89, 0x6c, 0x05, 0x05, 0x40, 0xef,
+    0x04, 0xaa, 0x82, 0xf6, 0x8e, 0x80, 0xa0, 0xb5,
+    0x10, 0x91, 0x06, 0x89, 0x09, 0x89, 0x90, 0x82,
+    0xb7, 0x00, 0x31, 0x09, 0x82, 0x88, 0x80, 0x89,
+    0x09, 0x89, 0x8d, 0x01, 0x82, 0xb7, 0x00, 0x23,
+    0x09, 0x12, 0x80, 0x93, 0x8b, 0x10, 0x8a, 0x82,
+    0xb7, 0x00, 0x38, 0x10, 0x82, 0x93, 0x09, 0x89,
+    0x89, 0x28, 0x82, 0xb7, 0x00, 0x31, 0x09, 0x16,
+    0x82, 0x89, 0x09, 0x89, 0x91, 0x80, 0xba, 0x22,
+    0x10, 0x83, 0x88, 0x80, 0x8d, 0x89, 0x8f, 0x84,
+    0xb8, 0x30, 0x10, 0x1e, 0x81, 0x8a, 0x09, 0x89,
+    0x90, 0x82, 0xb7, 0x00, 0x30, 0x10, 0x1e, 0x81,
+    0x8a, 0x09, 0x89, 0x8f, 0x83, 0xb6, 0x08, 0x30,
+    0x10, 0x83, 0x88, 0x80, 0x89, 0x09, 0x89, 0x90,
+    0x82, 0xc5, 0x03, 0x28, 0x00, 0x3d, 0x89, 0x09,
+    0xbc, 0x01, 0x86, 0x8b, 0x38, 0x89, 0xd6, 0x01,
+    0x88, 0x8a, 0x29, 0x89, 0xbd, 0x0d, 0x89, 0x8a,
+    0x00, 0x00, 0x03, 0x81, 0xb0, 0x93, 0x01, 0x84,
+    0x8a, 0x80, 0xa3, 0x88, 0x80, 0xe3, 0x93, 0x80,
+    0x89, 0x8b, 0x1b, 0x10, 0x11, 0x32, 0x83, 0x8c,
+    0x8b, 0x80, 0x8e, 0x42, 0xbe, 0x82, 0x88, 0x88,
+    0x43, 0x9f, 0x82, 0x9c, 0x82, 0x9c, 0x81, 0x9d,
+    0x81, 0xbf, 0x9f, 0x88, 0x01, 0x89, 0xa0, 0x11,
+    0x89, 0x40, 0x8e, 0x80, 0xf5, 0x8b, 0x83, 0x8b,
+    0x89, 0x89, 0xff, 0x8a, 0xbb, 0x84, 0xb8, 0x89,
+    0x80, 0x9c, 0x81, 0x8a, 0x85, 0x89, 0x95, 0x8d,
+    0x01, 0xbe, 0x84, 0xae, 0x90, 0x8a, 0x89, 0x90,
+    0x88, 0x8b, 0x82, 0x9d, 0x8c, 0x81, 0x89, 0xab,
+    0x8d, 0xaf, 0x93, 0x87, 0x89, 0x85, 0x89, 0xf5,
+    0x10, 0x94, 0x18, 0x28, 0x0a, 0x40, 0xc5, 0xb9,
+    0x04, 0x42, 0x3e, 0x81, 0x92, 0x80, 0xfa, 0x8c,
+    0x18, 0x82, 0x8b, 0x4b, 0xfd, 0x82, 0x40, 0x8c,
+    0x80, 0xdf, 0x9f, 0x42, 0x29, 0x85, 0xe8, 0x81,
+    0x60, 0x75, 0x84, 0x89, 0xc4, 0x03, 0x89, 0x9f,
+    0x81, 0xcf, 0x81, 0x41, 0x0f, 0x02, 0x03, 0x80,
+    0x96, 0x23, 0x80, 0xd2, 0x81, 0xb1, 0x91, 0x89,
+    0x89, 0x85, 0x91, 0x8c, 0x8a, 0x9b, 0x87, 0x98,
+    0x8c, 0xab, 0x83, 0xae, 0x8d, 0x8e, 0x89, 0x8a,
+    0x80, 0x89, 0x89, 0xae, 0x8d, 0x8b, 0x07, 0x09,
+    0x89, 0xa0, 0x82, 0xb1, 0x00, 0x11, 0x0c, 0x08,
+    0x80, 0xa8, 0x24, 0x81, 0x40, 0xeb, 0x38, 0x09,
+    0x89, 0x60, 0x4f, 0x23, 0x80, 0x42, 0xe0, 0x8f,
+    0x8f, 0x8f, 0x11, 0x97, 0x82, 0x40, 0xbf, 0x89,
+    0xa4, 0x80, 0x42, 0xbc, 0x80, 0x40, 0xe1, 0x80,
+    0x40, 0x94, 0x84, 0x41, 0x24, 0x89, 0x45, 0x56,
+    0x10, 0x0c, 0x83, 0xa7, 0x13, 0x80, 0x40, 0xa4,
+    0x81, 0x42, 0x3c, 0x1f, 0x89, 0x41, 0x70, 0x81,
+    0x40, 0x98, 0x8a, 0x40, 0xae, 0x82, 0xb4, 0x8e,
+    0x9e, 0x89, 0x8e, 0x83, 0xac, 0x8a, 0xb4, 0x89,
+    0x2a, 0xa3, 0x8d, 0x80, 0x89, 0x21, 0xab, 0x80,
+    0x8b, 0x82, 0xaf, 0x8d, 0x3b, 0x80, 0x8b, 0xd1,
+    0x8b, 0x28, 0x40, 0x9f, 0x8b, 0x84, 0x89, 0x2b,
+    0xb6, 0x08, 0x31, 0x09, 0x82, 0x88, 0x80, 0x89,
+    0x09, 0x32, 0x84, 0x40, 0xbf, 0x91, 0x88, 0x89,
+    0x18, 0xd0, 0x93, 0x8b, 0x89, 0x40, 0xd4, 0x31,
+    0x88, 0x9a, 0x81, 0xd1, 0x90, 0x8e, 0x89, 0xd0,
+    0x8c, 0x87, 0x89, 0xd2, 0x8e, 0x83, 0x89, 0x40,
+    0xf1, 0x8e, 0x40, 0xa4, 0x89, 0xc5, 0x28, 0x09,
+    0x18, 0x00, 0x81, 0x8b, 0x89, 0xf6, 0x31, 0x32,
+    0x80, 0x9b, 0x89, 0xa7, 0x30, 0x1f, 0x80, 0x88,
+    0x8a, 0xad, 0x8f, 0x41, 0x94, 0x38, 0x87, 0x8f,
+    0x89, 0xb7, 0x95, 0x80, 0x8d, 0xf9, 0x2a, 0x00,
+    0x08, 0x30, 0x07, 0x89, 0xaf, 0x20, 0x08, 0x27,
+    0x89, 0x41, 0x48, 0x83, 0x60, 0x4b, 0x68, 0x89,
+    0x40, 0x85, 0x84, 0xba, 0x86, 0x98, 0x89, 0x43,
+    0xf4, 0x00, 0xb6, 0x33, 0xd0, 0x80, 0x8a, 0x81,
+    0x60, 0x4c, 0xaa, 0x81, 0x54, 0xc5, 0x22, 0x2f,
+    0x39, 0x86, 0x9d, 0x83, 0x40, 0x93, 0x82, 0x45,
+    0x88, 0xb1, 0x41, 0xff, 0xb6, 0x83, 0xb1, 0x38,
+    0x8d, 0x80, 0x95, 0x20, 0x8e, 0x45, 0x4f, 0x30,
+    0x90, 0x0e, 0x01, 0x04, 0x41, 0x04, 0x86, 0x88,
+    0x89, 0x41, 0xa1, 0x8d, 0x45, 0xd5, 0x86, 0xec,
+    0x34, 0x89, 0x52, 0x95, 0x89, 0x6c, 0x05, 0x05,
+    0x40, 0xef,
 };
 
 static const uint8_t unicode_prop_ID_Continue1_index[60] = {
-    0xfa, 0x06, 0x00, 0x70, 0x09, 0x00, 0xf0, 0x0a,
-    0x40, 0x57, 0x0c, 0x00, 0xf0, 0x0d, 0x40, 0xc7,
-    0x0f, 0x00, 0xea, 0x17, 0x20, 0x45, 0x1b, 0x20,
-    0x55, 0x20, 0x20, 0x0c, 0xa8, 0x60, 0x37, 0xaa,
-    0x00, 0x50, 0xfe, 0x00, 0x3a, 0x0d, 0x01, 0x83,
-    0x11, 0x01, 0xc4, 0x14, 0x21, 0x44, 0x19, 0x21,
-    0x5a, 0x1d, 0x41, 0x9f, 0xbc, 0x61, 0xb0, 0xda,
+    0xfa, 0x06, 0x00, 0x84, 0x09, 0x00, 0xf0, 0x0a,
+    0x00, 0x70, 0x0c, 0x00, 0xf4, 0x0d, 0x00, 0x4a,
+    0x10, 0x20, 0x1a, 0x18, 0x20, 0x74, 0x1b, 0x20,
+    0xdd, 0x20, 0x00, 0x0c, 0xa8, 0x00, 0x5a, 0xaa,
+    0x20, 0x1a, 0xff, 0x00, 0xad, 0x0e, 0x01, 0x38,
+    0x12, 0x21, 0xc1, 0x15, 0x21, 0xe5, 0x19, 0x21,
+    0xaa, 0x1d, 0x21, 0x8c, 0xd1, 0x41, 0x4a, 0xe1,
     0x21, 0xf0, 0x01, 0x0e,
 };
 
 #ifdef CONFIG_ALL_UNICODE
 
-static const uint8_t unicode_cc_table[881] = {
+static const uint8_t unicode_cc_table[851] = {
     0xb2, 0xcf, 0xd4, 0x00, 0xe8, 0x03, 0xdc, 0x00,
     0xe8, 0x00, 0xd8, 0x04, 0xdc, 0x01, 0xca, 0x03,
     0xdc, 0x01, 0xca, 0x0a, 0xdc, 0x04, 0x01, 0x03,
@@ -572,36 +559,34 @@ static const uint8_t unicode_cc_table[881] = {
     0xc0, 0x00, 0xdc, 0xc0, 0x00, 0xdc, 0xc1, 0xb0,
     0x6f, 0xc6, 0x00, 0xdc, 0xc0, 0x88, 0x00, 0xdc,
     0x97, 0xc3, 0x80, 0xc8, 0x80, 0xc2, 0x80, 0xc4,
-    0xaa, 0x02, 0xdc, 0xb0, 0x0b, 0xc0, 0x02, 0xdc,
-    0xc3, 0xa9, 0xc4, 0x04, 0xdc, 0xcd, 0x80, 0x00,
-    0xdc, 0xc1, 0x00, 0xdc, 0xc1, 0x00, 0xdc, 0xc2,
-    0x02, 0xdc, 0x42, 0x1b, 0xc2, 0x00, 0xdc, 0xc1,
-    0x01, 0xdc, 0xc4, 0xb0, 0x0b, 0x00, 0x07, 0x8f,
-    0x00, 0x09, 0x82, 0xc0, 0x00, 0xdc, 0xc1, 0xb0,
-    0x36, 0x00, 0x07, 0x8f, 0x00, 0x09, 0xaf, 0xc0,
-    0xb0, 0x0c, 0x00, 0x07, 0x8f, 0x00, 0x09, 0xb0,
-    0x3d, 0x00, 0x07, 0x8f, 0x00, 0x09, 0xb0, 0x3d,
-    0x00, 0x07, 0x8f, 0x00, 0x09, 0xb0, 0x4e, 0x00,
+    0xaa, 0x02, 0xdc, 0xb0, 0x46, 0x00, 0xdc, 0xcd,
+    0x80, 0x00, 0xdc, 0xc1, 0x00, 0xdc, 0xc1, 0x00,
+    0xdc, 0xc2, 0x02, 0xdc, 0x42, 0x1b, 0xc2, 0x00,
+    0xdc, 0xc1, 0x01, 0xdc, 0xc4, 0xb0, 0x0b, 0x00,
+    0x07, 0x8f, 0x00, 0x09, 0x82, 0xc0, 0x00, 0xdc,
+    0xc1, 0xb0, 0x36, 0x00, 0x07, 0x8f, 0x00, 0x09,
+    0xaf, 0xc0, 0xb0, 0x0c, 0x00, 0x07, 0x8f, 0x00,
     0x09, 0xb0, 0x3d, 0x00, 0x07, 0x8f, 0x00, 0x09,
-    0x86, 0x00, 0x54, 0x00, 0x5b, 0xb0, 0x34, 0x00,
-    0x07, 0x8f, 0x00, 0x09, 0xb0, 0x3c, 0x01, 0x09,
-    0x8f, 0x00, 0x09, 0xb0, 0x4b, 0x00, 0x09, 0xb0,
-    0x3c, 0x01, 0x67, 0x00, 0x09, 0x8c, 0x03, 0x6b,
-    0xb0, 0x3b, 0x01, 0x76, 0x00, 0x09, 0x8c, 0x03,
-    0x7a, 0xb0, 0x1b, 0x01, 0xdc, 0x9a, 0x00, 0xdc,
-    0x80, 0x00, 0xdc, 0x80, 0x00, 0xd8, 0xb0, 0x06,
-    0x41, 0x81, 0x80, 0x00, 0x84, 0x84, 0x03, 0x82,
-    0x81, 0x00, 0x82, 0x80, 0xc1, 0x00, 0x09, 0x80,
-    0xc1, 0xb0, 0x0d, 0x00, 0xdc, 0xb0, 0x3f, 0x00,
-    0x07, 0x80, 0x01, 0x09, 0xb0, 0x21, 0x00, 0xdc,
-    0xb2, 0x9e, 0xc2, 0xb3, 0x83, 0x01, 0x09, 0x9d,
-    0x00, 0x09, 0xb0, 0x6c, 0x00, 0x09, 0x89, 0xc0,
-    0xb0, 0x9a, 0x00, 0xe4, 0xb0, 0x5e, 0x00, 0xde,
-    0xc0, 0x00, 0xdc, 0xb0, 0xaa, 0xc0, 0x00, 0xdc,
-    0xb0, 0x16, 0x00, 0x09, 0x93, 0xc7, 0x81, 0x00,
-    0xdc, 0xaf, 0xc4, 0x05, 0xdc, 0xc1, 0x00, 0xdc,
-    0x80, 0x01, 0xdc, 0xc1, 0x01, 0xdc, 0xc4, 0x00,
-    0xdc, 0xc3, 0xb0, 0x34, 0x00, 0x07, 0x8e, 0x00,
+    0xb0, 0x3d, 0x00, 0x07, 0x8f, 0x00, 0x09, 0xb0,
+    0x4e, 0x00, 0x09, 0xb0, 0x4e, 0x00, 0x09, 0x86,
+    0x00, 0x54, 0x00, 0x5b, 0xb0, 0x34, 0x00, 0x07,
+    0x8f, 0x00, 0x09, 0xb0, 0x3c, 0x01, 0x09, 0x8f,
+    0x00, 0x09, 0xb0, 0x4b, 0x00, 0x09, 0xb0, 0x3c,
+    0x01, 0x67, 0x00, 0x09, 0x8c, 0x03, 0x6b, 0xb0,
+    0x3b, 0x01, 0x76, 0x00, 0x09, 0x8c, 0x03, 0x7a,
+    0xb0, 0x1b, 0x01, 0xdc, 0x9a, 0x00, 0xdc, 0x80,
+    0x00, 0xdc, 0x80, 0x00, 0xd8, 0xb0, 0x06, 0x41,
+    0x81, 0x80, 0x00, 0x84, 0x84, 0x03, 0x82, 0x81,
+    0x00, 0x82, 0x80, 0xc1, 0x00, 0x09, 0x80, 0xc1,
+    0xb0, 0x0d, 0x00, 0xdc, 0xb0, 0x3f, 0x00, 0x07,
+    0x80, 0x01, 0x09, 0xb0, 0x21, 0x00, 0xdc, 0xb2,
+    0x9e, 0xc2, 0xb3, 0x83, 0x00, 0x09, 0x9e, 0x00,
+    0x09, 0xb0, 0x6c, 0x00, 0x09, 0x89, 0xc0, 0xb0,
+    0x9a, 0x00, 0xe4, 0xb0, 0x5e, 0x00, 0xde, 0xc0,
+    0x00, 0xdc, 0xb0, 0xaa, 0xc0, 0x00, 0xdc, 0xb0,
+    0x16, 0x00, 0x09, 0x93, 0xc7, 0x81, 0x00, 0xdc,
+    0xaf, 0xc4, 0x05, 0xdc, 0xc1, 0x00, 0xdc, 0x80,
+    0x01, 0xdc, 0xb0, 0x42, 0x00, 0x07, 0x8e, 0x00,
     0x09, 0xa5, 0xc0, 0x00, 0xdc, 0xc6, 0xb0, 0x05,
     0x01, 0x09, 0xb0, 0x09, 0x00, 0x07, 0x8a, 0x01,
     0x09, 0xb0, 0x12, 0x00, 0x07, 0xb0, 0x67, 0xc2,
@@ -610,73 +595,71 @@ static const uint8_t unicode_cc_table[881] = {
     0xc0, 0x82, 0xc1, 0xb0, 0x95, 0xc1, 0x00, 0xdc,
     0xc6, 0x00, 0xdc, 0xc1, 0x00, 0xea, 0x00, 0xd6,
     0x00, 0xdc, 0x00, 0xca, 0xe4, 0x00, 0xe8, 0x01,
-    0xe4, 0x00, 0xdc, 0x00, 0xda, 0xc0, 0x00, 0xe9,
-    0x00, 0xdc, 0xc0, 0x00, 0xdc, 0xb2, 0x9f, 0xc1,
-    0x01, 0x01, 0xc3, 0x02, 0x01, 0xc1, 0x83, 0xc0,
-    0x82, 0x01, 0x01, 0xc0, 0x00, 0xdc, 0xc0, 0x01,
-    0x01, 0x03, 0xdc, 0xc0, 0xb8, 0x03, 0xcd, 0xc2,
-    0xb0, 0x5c, 0x00, 0x09, 0xb0, 0x2f, 0xdf, 0xb1,
-    0xf9, 0x00, 0xda, 0x00, 0xe4, 0x00, 0xe8, 0x00,
-    0xde, 0x01, 0xe0, 0xb0, 0x38, 0x01, 0x08, 0xb8,
-    0x6d, 0xa3, 0xc0, 0x83, 0xc9, 0x9f, 0xc1, 0xb0,
-    0x1f, 0xc1, 0xb0, 0xe3, 0x00, 0x09, 0xa4, 0x00,
-    0x09, 0xb0, 0x66, 0x00, 0x09, 0x9a, 0xd1, 0xb0,
-    0x08, 0x02, 0xdc, 0xa4, 0x00, 0x09, 0xb0, 0x2e,
-    0x00, 0x07, 0x8b, 0x00, 0x09, 0xb0, 0xbe, 0xc0,
-    0x80, 0xc1, 0x00, 0xdc, 0x81, 0xc1, 0x84, 0xc1,
-    0x80, 0xc0, 0xb0, 0x03, 0x00, 0x09, 0xb0, 0xc5,
-    0x00, 0x09, 0xb8, 0x46, 0xff, 0x00, 0x1a, 0xb2,
-    0xd0, 0xc6, 0x06, 0xdc, 0xc1, 0xb3, 0x9c, 0x00,
-    0xdc, 0xb0, 0xb1, 0x00, 0xdc, 0xb0, 0x64, 0xc4,
-    0xb6, 0x61, 0x00, 0xdc, 0x80, 0xc0, 0xa7, 0xc0,
-    0x00, 0x01, 0x00, 0xdc, 0x83, 0x00, 0x09, 0xb0,
-    0x74, 0xc0, 0x00, 0xdc, 0xb2, 0x0c, 0xc3, 0xb1,
-    0x52, 0xc1, 0xb0, 0x68, 0x01, 0xdc, 0xc2, 0x00,
-    0xdc, 0xc0, 0x03, 0xdc, 0xb0, 0x00, 0xc0, 0x00,
-    0xdc, 0xc0, 0x00, 0xdc, 0xb0, 0x8f, 0x00, 0x09,
-    0xa8, 0x00, 0x09, 0x8d, 0x00, 0x09, 0xb0, 0x08,
-    0x00, 0x09, 0x00, 0x07, 0xb0, 0x14, 0xc2, 0xaf,
-    0x01, 0x09, 0xb0, 0x0d, 0x00, 0x07, 0xb0, 0x1b,
-    0x00, 0x09, 0x88, 0x00, 0x07, 0xb0, 0x39, 0x00,
-    0x09, 0x00, 0x07, 0xb0, 0x81, 0x00, 0x07, 0x00,
-    0x09, 0xb0, 0x1f, 0x01, 0x07, 0x8f, 0x00, 0x09,
-    0x97, 0xc6, 0x82, 0xc4, 0xb0, 0x9c, 0x00, 0x09,
-    0x82, 0x00, 0x07, 0x96, 0xc0, 0xb0, 0x32, 0x00,
-    0x09, 0x00, 0x07, 0xb0, 0xca, 0x00, 0x09, 0x00,
-    0x07, 0xb0, 0x4d, 0x00, 0x09, 0xb0, 0x45, 0x00,
-    0x09, 0x00, 0x07, 0xb0, 0x42, 0x00, 0x09, 0xb0,
-    0xdc, 0x00, 0x09, 0x00, 0x07, 0xb0, 0xd1, 0x01,
-    0x09, 0x83, 0x00, 0x07, 0xb0, 0x6b, 0x00, 0x09,
-    0xb0, 0x22, 0x00, 0x09, 0x91, 0x00, 0x09, 0xb0,
-    0x20, 0x00, 0x09, 0xb1, 0x74, 0x00, 0x09, 0xb0,
-    0xd1, 0x00, 0x07, 0x80, 0x01, 0x09, 0xb0, 0x20,
-    0x00, 0x09, 0xb8, 0x45, 0x27, 0x04, 0x01, 0xb0,
-    0x0a, 0xc6, 0xb4, 0x88, 0x01, 0x06, 0xb8, 0x44,
-    0x7b, 0x00, 0x01, 0xb8, 0x0c, 0x95, 0x01, 0xd8,
-    0x02, 0x01, 0x82, 0x00, 0xe2, 0x04, 0xd8, 0x87,
-    0x07, 0xdc, 0x81, 0xc4, 0x01, 0xdc, 0x9d, 0xc3,
-    0xb0, 0x63, 0xc2, 0xb8, 0x05, 0x8a, 0xc6, 0x80,
-    0xd0, 0x81, 0xc6, 0x80, 0xc1, 0x80, 0xc4, 0xb0,
-    0xd4, 0xc6, 0xb1, 0x46, 0xc0, 0xb0, 0x0c, 0xc3,
-    0xb5, 0xaf, 0x06, 0xdc, 0xb0, 0x3c, 0xc5, 0x00,
-    0x07,
+    0xe4, 0x00, 0xdc, 0x80, 0xc0, 0x00, 0xe9, 0x00,
+    0xdc, 0xc0, 0x00, 0xdc, 0xb2, 0x9f, 0xc1, 0x01,
+    0x01, 0xc3, 0x02, 0x01, 0xc1, 0x83, 0xc0, 0x82,
+    0x01, 0x01, 0xc0, 0x00, 0xdc, 0xc0, 0x01, 0x01,
+    0x03, 0xdc, 0xc0, 0xb8, 0x03, 0xcd, 0xc2, 0xb0,
+    0x5c, 0x00, 0x09, 0xb0, 0x2f, 0xdf, 0xb1, 0xf9,
+    0x00, 0xda, 0x00, 0xe4, 0x00, 0xe8, 0x00, 0xde,
+    0x01, 0xe0, 0xb0, 0x38, 0x01, 0x08, 0xb8, 0x6d,
+    0xa3, 0xc0, 0x83, 0xc9, 0x9f, 0xc1, 0xb0, 0x1f,
+    0xc1, 0xb0, 0xe3, 0x00, 0x09, 0xa4, 0x00, 0x09,
+    0xb0, 0x66, 0x00, 0x09, 0x9a, 0xd1, 0xb0, 0x08,
+    0x02, 0xdc, 0xa4, 0x00, 0x09, 0xb0, 0x2e, 0x00,
+    0x07, 0x8b, 0x00, 0x09, 0xb0, 0xbe, 0xc0, 0x80,
+    0xc1, 0x00, 0xdc, 0x81, 0xc1, 0x84, 0xc1, 0x80,
+    0xc0, 0xb0, 0x03, 0x00, 0x09, 0xb0, 0xc5, 0x00,
+    0x09, 0xb8, 0x46, 0xff, 0x00, 0x1a, 0xb2, 0xd0,
+    0xc6, 0x06, 0xdc, 0xc1, 0xb3, 0x9c, 0x00, 0xdc,
+    0xb0, 0xb1, 0x00, 0xdc, 0xb0, 0x64, 0xc4, 0xb6,
+    0x61, 0x00, 0xdc, 0x80, 0xc0, 0xa7, 0xc0, 0x00,
+    0x01, 0x00, 0xdc, 0x83, 0x00, 0x09, 0xb0, 0x74,
+    0xc0, 0x00, 0xdc, 0xb2, 0x0c, 0xc3, 0xb1, 0x52,
+    0xc1, 0xb0, 0x68, 0x01, 0xdc, 0xc2, 0x00, 0xdc,
+    0xc0, 0x03, 0xdc, 0xb0, 0xc4, 0x00, 0x09, 0xb0,
+    0x07, 0x00, 0x09, 0xb0, 0x08, 0x00, 0x09, 0x00,
+    0x07, 0xb0, 0x14, 0xc2, 0xaf, 0x01, 0x09, 0xb0,
+    0x0d, 0x00, 0x07, 0xb0, 0x1b, 0x00, 0x09, 0x88,
+    0x00, 0x07, 0xb0, 0x39, 0x00, 0x09, 0x00, 0x07,
+    0xb0, 0x81, 0x00, 0x07, 0x00, 0x09, 0xb0, 0x1f,
+    0x01, 0x07, 0x8f, 0x00, 0x09, 0x97, 0xc6, 0x82,
+    0xc4, 0xb0, 0x9c, 0x00, 0x09, 0x82, 0x00, 0x07,
+    0x96, 0xc0, 0xb0, 0x32, 0x00, 0x09, 0x00, 0x07,
+    0xb0, 0xca, 0x00, 0x09, 0x00, 0x07, 0xb0, 0x4d,
+    0x00, 0x09, 0xb0, 0x45, 0x00, 0x09, 0x00, 0x07,
+    0xb0, 0x42, 0x00, 0x09, 0xb0, 0xdc, 0x00, 0x09,
+    0x00, 0x07, 0xb0, 0xd1, 0x01, 0x09, 0x83, 0x00,
+    0x07, 0xb0, 0x6b, 0x00, 0x09, 0xb0, 0x22, 0x00,
+    0x09, 0x91, 0x00, 0x09, 0xb0, 0x20, 0x00, 0x09,
+    0xb1, 0x74, 0x00, 0x09, 0xb0, 0xd1, 0x00, 0x07,
+    0x80, 0x01, 0x09, 0xb0, 0x20, 0x00, 0x09, 0xb8,
+    0x45, 0x27, 0x04, 0x01, 0xb0, 0x0a, 0xc6, 0xb4,
+    0x88, 0x01, 0x06, 0xb8, 0x44, 0x7b, 0x00, 0x01,
+    0xb8, 0x0c, 0x95, 0x01, 0xd8, 0x02, 0x01, 0x82,
+    0x00, 0xe2, 0x04, 0xd8, 0x87, 0x07, 0xdc, 0x81,
+    0xc4, 0x01, 0xdc, 0x9d, 0xc3, 0xb0, 0x63, 0xc2,
+    0xb8, 0x05, 0x8a, 0xc6, 0x80, 0xd0, 0x81, 0xc6,
+    0x80, 0xc1, 0x80, 0xc4, 0xb0, 0xd4, 0xc6, 0xb1,
+    0x84, 0xc3, 0xb5, 0xaf, 0x06, 0xdc, 0xb0, 0x3c,
+    0xc5, 0x00, 0x07,
 };
 
-static const uint8_t unicode_cc_index[84] = {
+static const uint8_t unicode_cc_index[81] = {
     0x4d, 0x03, 0x00, 0x97, 0x05, 0x20, 0xc6, 0x05,
-    0x00, 0xe7, 0x06, 0x00, 0x45, 0x07, 0x00, 0x9c,
-    0x08, 0x00, 0x4d, 0x09, 0x00, 0x3c, 0x0b, 0x00,
-    0x3d, 0x0d, 0x00, 0x36, 0x0f, 0x00, 0x38, 0x10,
-    0x20, 0x3a, 0x19, 0x00, 0xcb, 0x1a, 0x20, 0xd3,
-    0x1c, 0x00, 0xcf, 0x1d, 0x00, 0xe2, 0x20, 0x00,
-    0x2e, 0x30, 0x20, 0x2b, 0xa9, 0x20, 0xed, 0xab,
-    0x00, 0x39, 0x0a, 0x01, 0x84, 0x0f, 0x21, 0xc0,
-    0x11, 0x01, 0x43, 0x14, 0x01, 0x39, 0x18, 0x21,
-    0x42, 0x1d, 0x21, 0x67, 0xd1, 0x01, 0x30, 0xe1,
-    0x21, 0x4b, 0xe9, 0x01,
+    0x00, 0xe7, 0x06, 0x00, 0x45, 0x07, 0x00, 0xe2,
+    0x08, 0x00, 0x53, 0x09, 0x00, 0xcd, 0x0b, 0x20,
+    0x38, 0x0e, 0x00, 0x73, 0x0f, 0x20, 0x5d, 0x13,
+    0x20, 0x60, 0x1a, 0x20, 0xaa, 0x1b, 0x00, 0xf4,
+    0x1c, 0x00, 0xfe, 0x1d, 0x20, 0x7f, 0x2d, 0x20,
+    0xf0, 0xa6, 0x00, 0xb2, 0xaa, 0x00, 0xfe, 0x01,
+    0x01, 0xab, 0x0e, 0x01, 0x73, 0x11, 0x21, 0x70,
+    0x13, 0x01, 0xb8, 0x16, 0x01, 0x9a, 0x1a, 0x01,
+    0x9f, 0xbc, 0x01, 0x22, 0xe0, 0x01, 0x4b, 0xe9,
+    0x01,
 };
 
-static const uint32_t unicode_decomp_table1[693] = {
+static const uint32_t unicode_decomp_table1[690] = {
     0x00280081, 0x002a0097, 0x002a8081, 0x002bc097,
     0x002c8115, 0x002d0097, 0x002d4081, 0x002e0097,
     0x002e4115, 0x002f0199, 0x00302016, 0x00400842,
@@ -803,57 +786,56 @@ static const uint32_t unicode_decomp_table1[693] = {
     0x0cf54119, 0x0cf5c097, 0x0cf6009b, 0x0cf64099,
     0x0cf68217, 0x0cf78119, 0x0cf804a1, 0x0cfa4525,
     0x0cfcc525, 0x0cff4125, 0x0cffc099, 0x29a70103,
-    0x29dc0081, 0x29fc8195, 0x29fe0103, 0x2ad70203,
-    0x2ada4081, 0x3e401482, 0x3e4a7f82, 0x3e6a3f82,
-    0x3e8aa102, 0x3e9b0110, 0x3e9c2f82, 0x3eb3c590,
-    0x3ec00197, 0x3ec0c119, 0x3ec1413f, 0x3ec4c2af,
-    0x3ec74184, 0x3ec804ad, 0x3eca4081, 0x3eca8304,
-    0x3ecc03a0, 0x3ece02a0, 0x3ecf8084, 0x3ed00120,
-    0x3ed0c120, 0x3ed184ae, 0x3ed3c085, 0x3ed4312d,
-    0x3ef4cbad, 0x3efa892f, 0x3eff022d, 0x3f002f2f,
-    0x3f1782a5, 0x3f18c0b1, 0x3f1907af, 0x3f1cffaf,
-    0x3f3c81a5, 0x3f3d64af, 0x3f542031, 0x3f649b31,
-    0x3f7c0131, 0x3f7c83b3, 0x3f7e40b1, 0x3f7e80bd,
-    0x3f7ec0bb, 0x3f7f00b3, 0x3f840503, 0x3f8c01ad,
-    0x3f8cc315, 0x3f8e462d, 0x3f91cc03, 0x3f97c695,
-    0x3f9c01af, 0x3f9d0085, 0x3f9d852f, 0x3fa03aad,
-    0x3fbd442f, 0x3fc06f1f, 0x3fd7c11f, 0x3fd85fad,
-    0x3fe80081, 0x3fe84f1f, 0x3ff0831f, 0x3ff2831f,
-    0x3ff4831f, 0x3ff6819f, 0x3ff80783, 0x41e04d83,
-    0x41e70f91, 0x44268192, 0x442ac092, 0x444b8112,
-    0x44d2c112, 0x452ec212, 0x456e8112, 0x464e0092,
-    0x74578392, 0x746ec312, 0x75000d1f, 0x75068d1f,
-    0x750d0d1f, 0x7513839f, 0x7515891f, 0x751a0d1f,
-    0x75208d1f, 0x75271015, 0x752f439f, 0x7531459f,
-    0x75340d1f, 0x753a8d1f, 0x75410395, 0x7543441f,
-    0x7545839f, 0x75478d1f, 0x754e0795, 0x7552839f,
-    0x75548d1f, 0x755b0d1f, 0x75618d1f, 0x75680d1f,
-    0x756e8d1f, 0x75750d1f, 0x757b8d1f, 0x75820d1f,
-    0x75888d1f, 0x758f0d1f, 0x75958d1f, 0x759c0d1f,
-    0x75a28d1f, 0x75a90103, 0x75aa089f, 0x75ae4081,
-    0x75ae839f, 0x75b04081, 0x75b08c9f, 0x75b6c081,
-    0x75b7032d, 0x75b8889f, 0x75bcc081, 0x75bd039f,
-    0x75bec081, 0x75bf0c9f, 0x75c54081, 0x75c5832d,
-    0x75c7089f, 0x75cb4081, 0x75cb839f, 0x75cd4081,
-    0x75cd8c9f, 0x75d3c081, 0x75d4032d, 0x75d5889f,
-    0x75d9c081, 0x75da039f, 0x75dbc081, 0x75dc0c9f,
-    0x75e24081, 0x75e2832d, 0x75e4089f, 0x75e84081,
-    0x75e8839f, 0x75ea4081, 0x75ea8c9f, 0x75f0c081,
-    0x75f1042d, 0x75f3851f, 0x75f6051f, 0x75f8851f,
-    0x75fb051f, 0x75fd851f, 0x7b80022d, 0x7b814dad,
-    0x7b884203, 0x7b89c081, 0x7b8a452d, 0x7b8d0403,
-    0x7b908081, 0x7b91dc03, 0x7ba0052d, 0x7ba2c8ad,
-    0x7ba84483, 0x7baac8ad, 0x7c400097, 0x7c404521,
-    0x7c440d25, 0x7c4a8087, 0x7c4ac115, 0x7c4b4117,
-    0x7c4c0d1f, 0x7c528217, 0x7c538099, 0x7c53c097,
-    0x7c5a8197, 0x7c640097, 0x7c80012f, 0x7c808081,
-    0x7c841603, 0x7c9004c1, 0x7c940103, 0x7efc051f,
-    0xbe0001ac, 0xbe00d110, 0xbe0947ac, 0xbe0d3910,
-    0xbe29872c, 0xbe2d022c, 0xbe2e3790, 0xbe49ff90,
-    0xbe69bc10,
+    0x29dc0081, 0x29fe0103, 0x2ad70203, 0x2ada4081,
+    0x3e401482, 0x3e4a7f82, 0x3e6a3f82, 0x3e8aa102,
+    0x3e9b0110, 0x3e9c2f82, 0x3eb3c590, 0x3ec00197,
+    0x3ec0c119, 0x3ec1413f, 0x3ec4c2af, 0x3ec74184,
+    0x3ec804ad, 0x3eca4081, 0x3eca8304, 0x3ecc03a0,
+    0x3ece02a0, 0x3ecf8084, 0x3ed00120, 0x3ed0c120,
+    0x3ed184ae, 0x3ed3c085, 0x3ed4312d, 0x3ef4cbad,
+    0x3efa892f, 0x3eff022d, 0x3f002f2f, 0x3f1782a5,
+    0x3f18c0b1, 0x3f1907af, 0x3f1cffaf, 0x3f3c81a5,
+    0x3f3d64af, 0x3f542031, 0x3f649b31, 0x3f7c0131,
+    0x3f7c83b3, 0x3f7e40b1, 0x3f7e80bd, 0x3f7ec0bb,
+    0x3f7f00b3, 0x3f840503, 0x3f8c01ad, 0x3f8cc315,
+    0x3f8e462d, 0x3f91cc03, 0x3f97c695, 0x3f9c01af,
+    0x3f9d0085, 0x3f9d852f, 0x3fa03aad, 0x3fbd442f,
+    0x3fc06f1f, 0x3fd7c11f, 0x3fd85fad, 0x3fe80081,
+    0x3fe84f1f, 0x3ff0831f, 0x3ff2831f, 0x3ff4831f,
+    0x3ff6819f, 0x3ff80783, 0x44268192, 0x442ac092,
+    0x444b8112, 0x44d2c112, 0x452ec212, 0x456e8112,
+    0x464e0092, 0x74578392, 0x746ec312, 0x75000d1f,
+    0x75068d1f, 0x750d0d1f, 0x7513839f, 0x7515891f,
+    0x751a0d1f, 0x75208d1f, 0x75271015, 0x752f439f,
+    0x7531459f, 0x75340d1f, 0x753a8d1f, 0x75410395,
+    0x7543441f, 0x7545839f, 0x75478d1f, 0x754e0795,
+    0x7552839f, 0x75548d1f, 0x755b0d1f, 0x75618d1f,
+    0x75680d1f, 0x756e8d1f, 0x75750d1f, 0x757b8d1f,
+    0x75820d1f, 0x75888d1f, 0x758f0d1f, 0x75958d1f,
+    0x759c0d1f, 0x75a28d1f, 0x75a90103, 0x75aa089f,
+    0x75ae4081, 0x75ae839f, 0x75b04081, 0x75b08c9f,
+    0x75b6c081, 0x75b7032d, 0x75b8889f, 0x75bcc081,
+    0x75bd039f, 0x75bec081, 0x75bf0c9f, 0x75c54081,
+    0x75c5832d, 0x75c7089f, 0x75cb4081, 0x75cb839f,
+    0x75cd4081, 0x75cd8c9f, 0x75d3c081, 0x75d4032d,
+    0x75d5889f, 0x75d9c081, 0x75da039f, 0x75dbc081,
+    0x75dc0c9f, 0x75e24081, 0x75e2832d, 0x75e4089f,
+    0x75e84081, 0x75e8839f, 0x75ea4081, 0x75ea8c9f,
+    0x75f0c081, 0x75f1042d, 0x75f3851f, 0x75f6051f,
+    0x75f8851f, 0x75fb051f, 0x75fd851f, 0x7b80022d,
+    0x7b814dad, 0x7b884203, 0x7b89c081, 0x7b8a452d,
+    0x7b8d0403, 0x7b908081, 0x7b91dc03, 0x7ba0052d,
+    0x7ba2c8ad, 0x7ba84483, 0x7baac8ad, 0x7c400097,
+    0x7c404521, 0x7c440d25, 0x7c4a8087, 0x7c4ac115,
+    0x7c4b4117, 0x7c4c0d1f, 0x7c528217, 0x7c538099,
+    0x7c53c097, 0x7c5a8197, 0x7c640097, 0x7c80012f,
+    0x7c808081, 0x7c841603, 0x7c9004c1, 0x7c940103,
+    0x7efc051f, 0xbe0001ac, 0xbe00d110, 0xbe0947ac,
+    0xbe0d3910, 0xbe29872c, 0xbe2d022c, 0xbe2e3790,
+    0xbe49ff90, 0xbe69bc10,
 };
 
-static const uint16_t unicode_decomp_table2[693] = {
+static const uint16_t unicode_decomp_table2[690] = {
     0x0020, 0x0000, 0x0061, 0x0002, 0x0004, 0x0006, 0x03bc, 0x0008,
     0x000a, 0x000c, 0x0015, 0x0095, 0x00a5, 0x00b9, 0x00c1, 0x00c3,
     0x00c7, 0x00cb, 0x00d1, 0x00d7, 0x00dd, 0x00e0, 0x00e6, 0x00f8,
@@ -917,33 +899,33 @@ static const uint16_t unicode_decomp_table2[693] = {
     0x10f4, 0x1100, 0x1105, 0x1111, 0x1141, 0x1149, 0x114d, 0x1153,
     0x1157, 0x115a, 0x116e, 0x1171, 0x1175, 0x117b, 0x117d, 0x1181,
     0x1184, 0x118c, 0x1192, 0x1196, 0x119c, 0x11a2, 0x11a8, 0x11ab,
-    0xa76f, 0x11af, 0x11b2, 0x11b6, 0x028d, 0x11be, 0x1210, 0x130e,
-    0x140c, 0x1490, 0x1495, 0x1553, 0x156c, 0x1572, 0x1578, 0x157e,
-    0x158a, 0x1596, 0x002b, 0x15a1, 0x15b9, 0x15bd, 0x15c1, 0x15c5,
-    0x15c9, 0x15cd, 0x15e1, 0x15e5, 0x1649, 0x1662, 0x1688, 0x168e,
-    0x174c, 0x1752, 0x1757, 0x1777, 0x1877, 0x187d, 0x1911, 0x19d3,
-    0x1a77, 0x1a7f, 0x1a9d, 0x1aa2, 0x1ab6, 0x1ac0, 0x1ac6, 0x1ada,
-    0x1adf, 0x1ae5, 0x1af3, 0x1b23, 0x1b30, 0x1b38, 0x1b3c, 0x1b52,
-    0x1bc9, 0x1bdb, 0x1bdd, 0x1bdf, 0x3164, 0x1c20, 0x1c22, 0x1c24,
-    0x1c26, 0x1c28, 0x1c2a, 0x1c48, 0x1c7e, 0x1cc4, 0x1cd2, 0x1cd7,
-    0x1ce0, 0x1ce9, 0x1cfb, 0x1d04, 0x1d09, 0x1d29, 0x1d44, 0x1d46,
-    0x1d48, 0x1d4a, 0x1d4c, 0x1d4e, 0x1d50, 0x1d52, 0x1d72, 0x1d74,
-    0x1d76, 0x1d78, 0x1d7a, 0x1d81, 0x1d83, 0x1d85, 0x1d87, 0x1d96,
-    0x1d98, 0x1d9a, 0x1d9c, 0x1d9e, 0x1da0, 0x1da2, 0x1da4, 0x1da6,
-    0x1da8, 0x1daa, 0x1dac, 0x1dae, 0x1db0, 0x1db2, 0x1db6, 0x03f4,
-    0x1db8, 0x2207, 0x1dba, 0x2202, 0x1dbc, 0x1dc4, 0x03f4, 0x1dc6,
-    0x2207, 0x1dc8, 0x2202, 0x1dca, 0x1dd2, 0x03f4, 0x1dd4, 0x2207,
-    0x1dd6, 0x2202, 0x1dd8, 0x1de0, 0x03f4, 0x1de2, 0x2207, 0x1de4,
-    0x2202, 0x1de6, 0x1dee, 0x03f4, 0x1df0, 0x2207, 0x1df2, 0x2202,
-    0x1df4, 0x1dfe, 0x1e00, 0x1e02, 0x1e04, 0x1e06, 0x1e08, 0x1e0e,
-    0x1e2b, 0x062d, 0x1e33, 0x1e3f, 0x062c, 0x1e4f, 0x1ebf, 0x1ecb,
-    0x1ede, 0x1ef0, 0x1f03, 0x1f05, 0x1f09, 0x1f0f, 0x1f15, 0x1f17,
-    0x1f1b, 0x1f1d, 0x1f25, 0x1f28, 0x1f2a, 0x1f30, 0x1f32, 0x30b5,
-    0x1f38, 0x1f90, 0x1fa6, 0x1faa, 0x1fac, 0x1fb1, 0x1ffe, 0x200f,
-    0x2110, 0x2120, 0x2126, 0x2220, 0x233e,
+    0xa76f, 0x11af, 0x11b3, 0x028d, 0x11bb, 0x120d, 0x130b, 0x1409,
+    0x148d, 0x1492, 0x1550, 0x1569, 0x156f, 0x1575, 0x157b, 0x1587,
+    0x1593, 0x002b, 0x159e, 0x15b6, 0x15ba, 0x15be, 0x15c2, 0x15c6,
+    0x15ca, 0x15de, 0x15e2, 0x1646, 0x165f, 0x1685, 0x168b, 0x1749,
+    0x174f, 0x1754, 0x1774, 0x1874, 0x187a, 0x190e, 0x19d0, 0x1a74,
+    0x1a7c, 0x1a9a, 0x1a9f, 0x1ab3, 0x1abd, 0x1ac3, 0x1ad7, 0x1adc,
+    0x1ae2, 0x1af0, 0x1b20, 0x1b2d, 0x1b35, 0x1b39, 0x1b4f, 0x1bc6,
+    0x1bd8, 0x1bda, 0x1bdc, 0x3164, 0x1c1d, 0x1c1f, 0x1c21, 0x1c23,
+    0x1c25, 0x1c27, 0x1c45, 0x1c53, 0x1c58, 0x1c61, 0x1c6a, 0x1c7c,
+    0x1c85, 0x1c8a, 0x1caa, 0x1cc5, 0x1cc7, 0x1cc9, 0x1ccb, 0x1ccd,
+    0x1ccf, 0x1cd1, 0x1cd3, 0x1cf3, 0x1cf5, 0x1cf7, 0x1cf9, 0x1cfb,
+    0x1d02, 0x1d04, 0x1d06, 0x1d08, 0x1d17, 0x1d19, 0x1d1b, 0x1d1d,
+    0x1d1f, 0x1d21, 0x1d23, 0x1d25, 0x1d27, 0x1d29, 0x1d2b, 0x1d2d,
+    0x1d2f, 0x1d31, 0x1d33, 0x1d37, 0x03f4, 0x1d39, 0x2207, 0x1d3b,
+    0x2202, 0x1d3d, 0x1d45, 0x03f4, 0x1d47, 0x2207, 0x1d49, 0x2202,
+    0x1d4b, 0x1d53, 0x03f4, 0x1d55, 0x2207, 0x1d57, 0x2202, 0x1d59,
+    0x1d61, 0x03f4, 0x1d63, 0x2207, 0x1d65, 0x2202, 0x1d67, 0x1d6f,
+    0x03f4, 0x1d71, 0x2207, 0x1d73, 0x2202, 0x1d75, 0x1d7f, 0x1d81,
+    0x1d83, 0x1d85, 0x1d87, 0x1d89, 0x1d8f, 0x1dac, 0x062d, 0x1db4,
+    0x1dc0, 0x062c, 0x1dd0, 0x1e40, 0x1e4c, 0x1e5f, 0x1e71, 0x1e84,
+    0x1e86, 0x1e8a, 0x1e90, 0x1e96, 0x1e98, 0x1e9c, 0x1e9e, 0x1ea6,
+    0x1ea9, 0x1eab, 0x1eb1, 0x1eb3, 0x30b5, 0x1eb9, 0x1f11, 0x1f27,
+    0x1f2b, 0x1f2d, 0x1f32, 0x1f7f, 0x1f90, 0x2091, 0x20a1, 0x20a7,
+    0x21a1, 0x22bf,
 };
 
-static const uint8_t unicode_decomp_data[9292] = {
+static const uint8_t unicode_decomp_data[9165] = {
     0x20, 0x88, 0x20, 0x84, 0x32, 0x33, 0x20, 0x81,
     0x20, 0xa7, 0x31, 0x6f, 0x31, 0xd0, 0x34, 0x31,
     0xd0, 0x32, 0x33, 0xd0, 0x34, 0x41, 0x80, 0x41,
@@ -1509,603 +1491,587 @@ static const uint8_t unicode_decomp_data[9292] = {
     0xd1, 0x6d, 0x31, 0x00, 0xe5, 0x65, 0x31, 0x00,
     0x30, 0x00, 0xe5, 0x65, 0x32, 0x00, 0x30, 0x00,
     0xe5, 0x65, 0x33, 0x00, 0x30, 0x00, 0xe5, 0x65,
-    0x67, 0x61, 0x6c, 0x4a, 0x04, 0x4c, 0x04, 0x43,
-    0x46, 0x51, 0x26, 0x01, 0x53, 0x01, 0x27, 0xa7,
-    0x37, 0xab, 0x6b, 0x02, 0x52, 0xab, 0x48, 0x8c,
-    0xf4, 0x66, 0xca, 0x8e, 0xc8, 0x8c, 0xd1, 0x6e,
-    0x32, 0x4e, 0xe5, 0x53, 0x9c, 0x9f, 0x9c, 0x9f,
-    0x51, 0x59, 0xd1, 0x91, 0x87, 0x55, 0x48, 0x59,
-    0xf6, 0x61, 0x69, 0x76, 0x85, 0x7f, 0x3f, 0x86,
-    0xba, 0x87, 0xf8, 0x88, 0x8f, 0x90, 0x02, 0x6a,
-    0x1b, 0x6d, 0xd9, 0x70, 0xde, 0x73, 0x3d, 0x84,
-    0x6a, 0x91, 0xf1, 0x99, 0x82, 0x4e, 0x75, 0x53,
-    0x04, 0x6b, 0x1b, 0x72, 0x2d, 0x86, 0x1e, 0x9e,
-    0x50, 0x5d, 0xeb, 0x6f, 0xcd, 0x85, 0x64, 0x89,
-    0xc9, 0x62, 0xd8, 0x81, 0x1f, 0x88, 0xca, 0x5e,
-    0x17, 0x67, 0x6a, 0x6d, 0xfc, 0x72, 0xce, 0x90,
-    0x86, 0x4f, 0xb7, 0x51, 0xde, 0x52, 0xc4, 0x64,
-    0xd3, 0x6a, 0x10, 0x72, 0xe7, 0x76, 0x01, 0x80,
-    0x06, 0x86, 0x5c, 0x86, 0xef, 0x8d, 0x32, 0x97,
-    0x6f, 0x9b, 0xfa, 0x9d, 0x8c, 0x78, 0x7f, 0x79,
-    0xa0, 0x7d, 0xc9, 0x83, 0x04, 0x93, 0x7f, 0x9e,
-    0xd6, 0x8a, 0xdf, 0x58, 0x04, 0x5f, 0x60, 0x7c,
-    0x7e, 0x80, 0x62, 0x72, 0xca, 0x78, 0xc2, 0x8c,
-    0xf7, 0x96, 0xd8, 0x58, 0x62, 0x5c, 0x13, 0x6a,
-    0xda, 0x6d, 0x0f, 0x6f, 0x2f, 0x7d, 0x37, 0x7e,
-    0x4b, 0x96, 0xd2, 0x52, 0x8b, 0x80, 0xdc, 0x51,
-    0xcc, 0x51, 0x1c, 0x7a, 0xbe, 0x7d, 0xf1, 0x83,
-    0x75, 0x96, 0x80, 0x8b, 0xcf, 0x62, 0x02, 0x6a,
-    0xfe, 0x8a, 0x39, 0x4e, 0xe7, 0x5b, 0x12, 0x60,
-    0x87, 0x73, 0x70, 0x75, 0x17, 0x53, 0xfb, 0x78,
-    0xbf, 0x4f, 0xa9, 0x5f, 0x0d, 0x4e, 0xcc, 0x6c,
-    0x78, 0x65, 0x22, 0x7d, 0xc3, 0x53, 0x5e, 0x58,
-    0x01, 0x77, 0x49, 0x84, 0xaa, 0x8a, 0xba, 0x6b,
-    0xb0, 0x8f, 0x88, 0x6c, 0xfe, 0x62, 0xe5, 0x82,
-    0xa0, 0x63, 0x65, 0x75, 0xae, 0x4e, 0x69, 0x51,
-    0xc9, 0x51, 0x81, 0x68, 0xe7, 0x7c, 0x6f, 0x82,
-    0xd2, 0x8a, 0xcf, 0x91, 0xf5, 0x52, 0x42, 0x54,
-    0x73, 0x59, 0xec, 0x5e, 0xc5, 0x65, 0xfe, 0x6f,
-    0x2a, 0x79, 0xad, 0x95, 0x6a, 0x9a, 0x97, 0x9e,
-    0xce, 0x9e, 0x9b, 0x52, 0xc6, 0x66, 0x77, 0x6b,
-    0x62, 0x8f, 0x74, 0x5e, 0x90, 0x61, 0x00, 0x62,
-    0x9a, 0x64, 0x23, 0x6f, 0x49, 0x71, 0x89, 0x74,
-    0xca, 0x79, 0xf4, 0x7d, 0x6f, 0x80, 0x26, 0x8f,
-    0xee, 0x84, 0x23, 0x90, 0x4a, 0x93, 0x17, 0x52,
-    0xa3, 0x52, 0xbd, 0x54, 0xc8, 0x70, 0xc2, 0x88,
-    0xaa, 0x8a, 0xc9, 0x5e, 0xf5, 0x5f, 0x7b, 0x63,
-    0xae, 0x6b, 0x3e, 0x7c, 0x75, 0x73, 0xe4, 0x4e,
-    0xf9, 0x56, 0xe7, 0x5b, 0xba, 0x5d, 0x1c, 0x60,
-    0xb2, 0x73, 0x69, 0x74, 0x9a, 0x7f, 0x46, 0x80,
-    0x34, 0x92, 0xf6, 0x96, 0x48, 0x97, 0x18, 0x98,
-    0x8b, 0x4f, 0xae, 0x79, 0xb4, 0x91, 0xb8, 0x96,
-    0xe1, 0x60, 0x86, 0x4e, 0xda, 0x50, 0xee, 0x5b,
-    0x3f, 0x5c, 0x99, 0x65, 0x02, 0x6a, 0xce, 0x71,
-    0x42, 0x76, 0xfc, 0x84, 0x7c, 0x90, 0x8d, 0x9f,
-    0x88, 0x66, 0x2e, 0x96, 0x89, 0x52, 0x7b, 0x67,
-    0xf3, 0x67, 0x41, 0x6d, 0x9c, 0x6e, 0x09, 0x74,
-    0x59, 0x75, 0x6b, 0x78, 0x10, 0x7d, 0x5e, 0x98,
-    0x6d, 0x51, 0x2e, 0x62, 0x78, 0x96, 0x2b, 0x50,
-    0x19, 0x5d, 0xea, 0x6d, 0x2a, 0x8f, 0x8b, 0x5f,
-    0x44, 0x61, 0x17, 0x68, 0x87, 0x73, 0x86, 0x96,
-    0x29, 0x52, 0x0f, 0x54, 0x65, 0x5c, 0x13, 0x66,
-    0x4e, 0x67, 0xa8, 0x68, 0xe5, 0x6c, 0x06, 0x74,
-    0xe2, 0x75, 0x79, 0x7f, 0xcf, 0x88, 0xe1, 0x88,
-    0xcc, 0x91, 0xe2, 0x96, 0x3f, 0x53, 0xba, 0x6e,
-    0x1d, 0x54, 0xd0, 0x71, 0x98, 0x74, 0xfa, 0x85,
-    0xa3, 0x96, 0x57, 0x9c, 0x9f, 0x9e, 0x97, 0x67,
-    0xcb, 0x6d, 0xe8, 0x81, 0xcb, 0x7a, 0x20, 0x7b,
-    0x92, 0x7c, 0xc0, 0x72, 0x99, 0x70, 0x58, 0x8b,
-    0xc0, 0x4e, 0x36, 0x83, 0x3a, 0x52, 0x07, 0x52,
-    0xa6, 0x5e, 0xd3, 0x62, 0xd6, 0x7c, 0x85, 0x5b,
-    0x1e, 0x6d, 0xb4, 0x66, 0x3b, 0x8f, 0x4c, 0x88,
-    0x4d, 0x96, 0x8b, 0x89, 0xd3, 0x5e, 0x40, 0x51,
-    0xc0, 0x55, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x58,
-    0x00, 0x00, 0x74, 0x66, 0x00, 0x00, 0x00, 0x00,
-    0xde, 0x51, 0x2a, 0x73, 0xca, 0x76, 0x3c, 0x79,
-    0x5e, 0x79, 0x65, 0x79, 0x8f, 0x79, 0x56, 0x97,
-    0xbe, 0x7c, 0xbd, 0x7f, 0x00, 0x00, 0x12, 0x86,
-    0x00, 0x00, 0xf8, 0x8a, 0x00, 0x00, 0x00, 0x00,
-    0x38, 0x90, 0xfd, 0x90, 0xef, 0x98, 0xfc, 0x98,
-    0x28, 0x99, 0xb4, 0x9d, 0xde, 0x90, 0xb7, 0x96,
-    0xae, 0x4f, 0xe7, 0x50, 0x4d, 0x51, 0xc9, 0x52,
-    0xe4, 0x52, 0x51, 0x53, 0x9d, 0x55, 0x06, 0x56,
-    0x68, 0x56, 0x40, 0x58, 0xa8, 0x58, 0x64, 0x5c,
-    0x6e, 0x5c, 0x94, 0x60, 0x68, 0x61, 0x8e, 0x61,
-    0xf2, 0x61, 0x4f, 0x65, 0xe2, 0x65, 0x91, 0x66,
-    0x85, 0x68, 0x77, 0x6d, 0x1a, 0x6e, 0x22, 0x6f,
-    0x6e, 0x71, 0x2b, 0x72, 0x22, 0x74, 0x91, 0x78,
-    0x3e, 0x79, 0x49, 0x79, 0x48, 0x79, 0x50, 0x79,
-    0x56, 0x79, 0x5d, 0x79, 0x8d, 0x79, 0x8e, 0x79,
-    0x40, 0x7a, 0x81, 0x7a, 0xc0, 0x7b, 0xf4, 0x7d,
-    0x09, 0x7e, 0x41, 0x7e, 0x72, 0x7f, 0x05, 0x80,
-    0xed, 0x81, 0x79, 0x82, 0x79, 0x82, 0x57, 0x84,
-    0x10, 0x89, 0x96, 0x89, 0x01, 0x8b, 0x39, 0x8b,
-    0xd3, 0x8c, 0x08, 0x8d, 0xb6, 0x8f, 0x38, 0x90,
-    0xe3, 0x96, 0xff, 0x97, 0x3b, 0x98, 0x75, 0x60,
-    0xee, 0x42, 0x18, 0x82, 0x02, 0x26, 0x4e, 0xb5,
-    0x51, 0x68, 0x51, 0x80, 0x4f, 0x45, 0x51, 0x80,
-    0x51, 0xc7, 0x52, 0xfa, 0x52, 0x9d, 0x55, 0x55,
-    0x55, 0x99, 0x55, 0xe2, 0x55, 0x5a, 0x58, 0xb3,
-    0x58, 0x44, 0x59, 0x54, 0x59, 0x62, 0x5a, 0x28,
-    0x5b, 0xd2, 0x5e, 0xd9, 0x5e, 0x69, 0x5f, 0xad,
-    0x5f, 0xd8, 0x60, 0x4e, 0x61, 0x08, 0x61, 0x8e,
-    0x61, 0x60, 0x61, 0xf2, 0x61, 0x34, 0x62, 0xc4,
-    0x63, 0x1c, 0x64, 0x52, 0x64, 0x56, 0x65, 0x74,
-    0x66, 0x17, 0x67, 0x1b, 0x67, 0x56, 0x67, 0x79,
-    0x6b, 0xba, 0x6b, 0x41, 0x6d, 0xdb, 0x6e, 0xcb,
-    0x6e, 0x22, 0x6f, 0x1e, 0x70, 0x6e, 0x71, 0xa7,
-    0x77, 0x35, 0x72, 0xaf, 0x72, 0x2a, 0x73, 0x71,
-    0x74, 0x06, 0x75, 0x3b, 0x75, 0x1d, 0x76, 0x1f,
-    0x76, 0xca, 0x76, 0xdb, 0x76, 0xf4, 0x76, 0x4a,
-    0x77, 0x40, 0x77, 0xcc, 0x78, 0xb1, 0x7a, 0xc0,
-    0x7b, 0x7b, 0x7c, 0x5b, 0x7d, 0xf4, 0x7d, 0x3e,
-    0x7f, 0x05, 0x80, 0x52, 0x83, 0xef, 0x83, 0x79,
-    0x87, 0x41, 0x89, 0x86, 0x89, 0x96, 0x89, 0xbf,
-    0x8a, 0xf8, 0x8a, 0xcb, 0x8a, 0x01, 0x8b, 0xfe,
-    0x8a, 0xed, 0x8a, 0x39, 0x8b, 0x8a, 0x8b, 0x08,
-    0x8d, 0x38, 0x8f, 0x72, 0x90, 0x99, 0x91, 0x76,
-    0x92, 0x7c, 0x96, 0xe3, 0x96, 0x56, 0x97, 0xdb,
-    0x97, 0xff, 0x97, 0x0b, 0x98, 0x3b, 0x98, 0x12,
-    0x9b, 0x9c, 0x9f, 0x4a, 0x28, 0x44, 0x28, 0xd5,
-    0x33, 0x9d, 0x3b, 0x18, 0x40, 0x39, 0x40, 0x49,
-    0x52, 0xd0, 0x5c, 0xd3, 0x7e, 0x43, 0x9f, 0x8e,
-    0x9f, 0x2a, 0xa0, 0x02, 0x66, 0x66, 0x66, 0x69,
-    0x66, 0x6c, 0x66, 0x66, 0x69, 0x66, 0x66, 0x6c,
-    0x7f, 0x01, 0x74, 0x73, 0x00, 0x74, 0x65, 0x05,
-    0x0f, 0x11, 0x0f, 0x00, 0x0f, 0x06, 0x19, 0x11,
-    0x0f, 0x08, 0xd9, 0x05, 0xb4, 0x05, 0x00, 0x00,
-    0x00, 0x00, 0xf2, 0x05, 0xb7, 0x05, 0xd0, 0x05,
-    0x12, 0x00, 0x03, 0x04, 0x0b, 0x0c, 0x0d, 0x18,
-    0x1a, 0xe9, 0x05, 0xc1, 0x05, 0xe9, 0x05, 0xc2,
-    0x05, 0x49, 0xfb, 0xc1, 0x05, 0x49, 0xfb, 0xc2,
-    0x05, 0xd0, 0x05, 0xb7, 0x05, 0xd0, 0x05, 0xb8,
-    0x05, 0xd0, 0x05, 0xbc, 0x05, 0xd8, 0x05, 0xbc,
-    0x05, 0xde, 0x05, 0xbc, 0x05, 0xe0, 0x05, 0xbc,
-    0x05, 0xe3, 0x05, 0xbc, 0x05, 0xb9, 0x05, 0x2d,
-    0x03, 0x2e, 0x03, 0x2f, 0x03, 0x30, 0x03, 0x31,
-    0x03, 0x1c, 0x00, 0x18, 0x06, 0x22, 0x06, 0x2b,
-    0x06, 0xd0, 0x05, 0xdc, 0x05, 0x71, 0x06, 0x00,
-    0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x0d, 0x0d, 0x0d,
-    0x0d, 0x0f, 0x0f, 0x0f, 0x0f, 0x09, 0x09, 0x09,
-    0x09, 0x0e, 0x0e, 0x0e, 0x0e, 0x08, 0x08, 0x08,
-    0x08, 0x33, 0x33, 0x33, 0x33, 0x35, 0x35, 0x35,
-    0x35, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12,
-    0x12, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16,
-    0x16, 0x1c, 0x1c, 0x1b, 0x1b, 0x1d, 0x1d, 0x17,
-    0x17, 0x27, 0x27, 0x20, 0x20, 0x38, 0x38, 0x38,
-    0x38, 0x3e, 0x3e, 0x3e, 0x3e, 0x42, 0x42, 0x42,
-    0x42, 0x40, 0x40, 0x40, 0x40, 0x49, 0x49, 0x4a,
-    0x4a, 0x4a, 0x4a, 0x4f, 0x4f, 0x50, 0x50, 0x50,
-    0x50, 0x4d, 0x4d, 0x4d, 0x4d, 0x61, 0x61, 0x62,
-    0x62, 0x49, 0x06, 0x64, 0x64, 0x64, 0x64, 0x7e,
-    0x7e, 0x7d, 0x7d, 0x7f, 0x7f, 0x2e, 0x82, 0x82,
-    0x7c, 0x7c, 0x80, 0x80, 0x87, 0x87, 0x87, 0x87,
-    0x00, 0x00, 0x26, 0x06, 0x00, 0x01, 0x00, 0x01,
-    0x00, 0xaf, 0x00, 0xaf, 0x00, 0x22, 0x00, 0x22,
-    0x00, 0xa1, 0x00, 0xa1, 0x00, 0xa0, 0x00, 0xa0,
-    0x00, 0xa2, 0x00, 0xa2, 0x00, 0xaa, 0x00, 0xaa,
-    0x00, 0xaa, 0x00, 0x23, 0x00, 0x23, 0x00, 0x23,
-    0xcc, 0x06, 0x00, 0x00, 0x00, 0x00, 0x26, 0x06,
-    0x00, 0x06, 0x00, 0x07, 0x00, 0x1f, 0x00, 0x23,
-    0x00, 0x24, 0x02, 0x06, 0x02, 0x07, 0x02, 0x08,
-    0x02, 0x1f, 0x02, 0x23, 0x02, 0x24, 0x04, 0x06,
-    0x04, 0x07, 0x04, 0x08, 0x04, 0x1f, 0x04, 0x23,
-    0x04, 0x24, 0x05, 0x06, 0x05, 0x1f, 0x05, 0x23,
-    0x05, 0x24, 0x06, 0x07, 0x06, 0x1f, 0x07, 0x06,
-    0x07, 0x1f, 0x08, 0x06, 0x08, 0x07, 0x08, 0x1f,
-    0x0d, 0x06, 0x0d, 0x07, 0x0d, 0x08, 0x0d, 0x1f,
-    0x0f, 0x07, 0x0f, 0x1f, 0x10, 0x06, 0x10, 0x07,
-    0x10, 0x08, 0x10, 0x1f, 0x11, 0x07, 0x11, 0x1f,
-    0x12, 0x1f, 0x13, 0x06, 0x13, 0x1f, 0x14, 0x06,
-    0x14, 0x1f, 0x1b, 0x06, 0x1b, 0x07, 0x1b, 0x08,
-    0x1b, 0x1f, 0x1b, 0x23, 0x1b, 0x24, 0x1c, 0x07,
-    0x1c, 0x1f, 0x1c, 0x23, 0x1c, 0x24, 0x1d, 0x01,
-    0x1d, 0x06, 0x1d, 0x07, 0x1d, 0x08, 0x1d, 0x1e,
-    0x1d, 0x1f, 0x1d, 0x23, 0x1d, 0x24, 0x1e, 0x06,
-    0x1e, 0x07, 0x1e, 0x08, 0x1e, 0x1f, 0x1e, 0x23,
-    0x1e, 0x24, 0x1f, 0x06, 0x1f, 0x07, 0x1f, 0x08,
-    0x1f, 0x1f, 0x1f, 0x23, 0x1f, 0x24, 0x20, 0x06,
-    0x20, 0x07, 0x20, 0x08, 0x20, 0x1f, 0x20, 0x23,
-    0x20, 0x24, 0x21, 0x06, 0x21, 0x1f, 0x21, 0x23,
-    0x21, 0x24, 0x24, 0x06, 0x24, 0x07, 0x24, 0x08,
-    0x24, 0x1f, 0x24, 0x23, 0x24, 0x24, 0x0a, 0x4a,
-    0x0b, 0x4a, 0x23, 0x4a, 0x20, 0x00, 0x4c, 0x06,
-    0x51, 0x06, 0x51, 0x06, 0xff, 0x00, 0x1f, 0x26,
-    0x06, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x1f, 0x00,
-    0x20, 0x00, 0x23, 0x00, 0x24, 0x02, 0x0b, 0x02,
-    0x0c, 0x02, 0x1f, 0x02, 0x20, 0x02, 0x23, 0x02,
-    0x24, 0x04, 0x0b, 0x04, 0x0c, 0x04, 0x1f, 0x26,
-    0x06, 0x04, 0x20, 0x04, 0x23, 0x04, 0x24, 0x05,
-    0x0b, 0x05, 0x0c, 0x05, 0x1f, 0x05, 0x20, 0x05,
-    0x23, 0x05, 0x24, 0x1b, 0x23, 0x1b, 0x24, 0x1c,
-    0x23, 0x1c, 0x24, 0x1d, 0x01, 0x1d, 0x1e, 0x1d,
-    0x1f, 0x1d, 0x23, 0x1d, 0x24, 0x1e, 0x1f, 0x1e,
-    0x23, 0x1e, 0x24, 0x1f, 0x01, 0x1f, 0x1f, 0x20,
-    0x0b, 0x20, 0x0c, 0x20, 0x1f, 0x20, 0x20, 0x20,
-    0x23, 0x20, 0x24, 0x23, 0x4a, 0x24, 0x0b, 0x24,
-    0x0c, 0x24, 0x1f, 0x24, 0x20, 0x24, 0x23, 0x24,
-    0x24, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00,
-    0x1f, 0x00, 0x21, 0x02, 0x06, 0x02, 0x07, 0x02,
-    0x08, 0x02, 0x1f, 0x02, 0x21, 0x04, 0x06, 0x04,
-    0x07, 0x04, 0x08, 0x04, 0x1f, 0x04, 0x21, 0x05,
-    0x1f, 0x06, 0x07, 0x06, 0x1f, 0x07, 0x06, 0x07,
-    0x1f, 0x08, 0x06, 0x08, 0x1f, 0x0d, 0x06, 0x0d,
+    0x67, 0x61, 0x6c, 0x4a, 0x04, 0x4c, 0x04, 0x26,
+    0x01, 0x53, 0x01, 0x27, 0xa7, 0x37, 0xab, 0x6b,
+    0x02, 0x52, 0xab, 0x48, 0x8c, 0xf4, 0x66, 0xca,
+    0x8e, 0xc8, 0x8c, 0xd1, 0x6e, 0x32, 0x4e, 0xe5,
+    0x53, 0x9c, 0x9f, 0x9c, 0x9f, 0x51, 0x59, 0xd1,
+    0x91, 0x87, 0x55, 0x48, 0x59, 0xf6, 0x61, 0x69,
+    0x76, 0x85, 0x7f, 0x3f, 0x86, 0xba, 0x87, 0xf8,
+    0x88, 0x8f, 0x90, 0x02, 0x6a, 0x1b, 0x6d, 0xd9,
+    0x70, 0xde, 0x73, 0x3d, 0x84, 0x6a, 0x91, 0xf1,
+    0x99, 0x82, 0x4e, 0x75, 0x53, 0x04, 0x6b, 0x1b,
+    0x72, 0x2d, 0x86, 0x1e, 0x9e, 0x50, 0x5d, 0xeb,
+    0x6f, 0xcd, 0x85, 0x64, 0x89, 0xc9, 0x62, 0xd8,
+    0x81, 0x1f, 0x88, 0xca, 0x5e, 0x17, 0x67, 0x6a,
+    0x6d, 0xfc, 0x72, 0xce, 0x90, 0x86, 0x4f, 0xb7,
+    0x51, 0xde, 0x52, 0xc4, 0x64, 0xd3, 0x6a, 0x10,
+    0x72, 0xe7, 0x76, 0x01, 0x80, 0x06, 0x86, 0x5c,
+    0x86, 0xef, 0x8d, 0x32, 0x97, 0x6f, 0x9b, 0xfa,
+    0x9d, 0x8c, 0x78, 0x7f, 0x79, 0xa0, 0x7d, 0xc9,
+    0x83, 0x04, 0x93, 0x7f, 0x9e, 0xd6, 0x8a, 0xdf,
+    0x58, 0x04, 0x5f, 0x60, 0x7c, 0x7e, 0x80, 0x62,
+    0x72, 0xca, 0x78, 0xc2, 0x8c, 0xf7, 0x96, 0xd8,
+    0x58, 0x62, 0x5c, 0x13, 0x6a, 0xda, 0x6d, 0x0f,
+    0x6f, 0x2f, 0x7d, 0x37, 0x7e, 0x4b, 0x96, 0xd2,
+    0x52, 0x8b, 0x80, 0xdc, 0x51, 0xcc, 0x51, 0x1c,
+    0x7a, 0xbe, 0x7d, 0xf1, 0x83, 0x75, 0x96, 0x80,
+    0x8b, 0xcf, 0x62, 0x02, 0x6a, 0xfe, 0x8a, 0x39,
+    0x4e, 0xe7, 0x5b, 0x12, 0x60, 0x87, 0x73, 0x70,
+    0x75, 0x17, 0x53, 0xfb, 0x78, 0xbf, 0x4f, 0xa9,
+    0x5f, 0x0d, 0x4e, 0xcc, 0x6c, 0x78, 0x65, 0x22,
+    0x7d, 0xc3, 0x53, 0x5e, 0x58, 0x01, 0x77, 0x49,
+    0x84, 0xaa, 0x8a, 0xba, 0x6b, 0xb0, 0x8f, 0x88,
+    0x6c, 0xfe, 0x62, 0xe5, 0x82, 0xa0, 0x63, 0x65,
+    0x75, 0xae, 0x4e, 0x69, 0x51, 0xc9, 0x51, 0x81,
+    0x68, 0xe7, 0x7c, 0x6f, 0x82, 0xd2, 0x8a, 0xcf,
+    0x91, 0xf5, 0x52, 0x42, 0x54, 0x73, 0x59, 0xec,
+    0x5e, 0xc5, 0x65, 0xfe, 0x6f, 0x2a, 0x79, 0xad,
+    0x95, 0x6a, 0x9a, 0x97, 0x9e, 0xce, 0x9e, 0x9b,
+    0x52, 0xc6, 0x66, 0x77, 0x6b, 0x62, 0x8f, 0x74,
+    0x5e, 0x90, 0x61, 0x00, 0x62, 0x9a, 0x64, 0x23,
+    0x6f, 0x49, 0x71, 0x89, 0x74, 0xca, 0x79, 0xf4,
+    0x7d, 0x6f, 0x80, 0x26, 0x8f, 0xee, 0x84, 0x23,
+    0x90, 0x4a, 0x93, 0x17, 0x52, 0xa3, 0x52, 0xbd,
+    0x54, 0xc8, 0x70, 0xc2, 0x88, 0xaa, 0x8a, 0xc9,
+    0x5e, 0xf5, 0x5f, 0x7b, 0x63, 0xae, 0x6b, 0x3e,
+    0x7c, 0x75, 0x73, 0xe4, 0x4e, 0xf9, 0x56, 0xe7,
+    0x5b, 0xba, 0x5d, 0x1c, 0x60, 0xb2, 0x73, 0x69,
+    0x74, 0x9a, 0x7f, 0x46, 0x80, 0x34, 0x92, 0xf6,
+    0x96, 0x48, 0x97, 0x18, 0x98, 0x8b, 0x4f, 0xae,
+    0x79, 0xb4, 0x91, 0xb8, 0x96, 0xe1, 0x60, 0x86,
+    0x4e, 0xda, 0x50, 0xee, 0x5b, 0x3f, 0x5c, 0x99,
+    0x65, 0x02, 0x6a, 0xce, 0x71, 0x42, 0x76, 0xfc,
+    0x84, 0x7c, 0x90, 0x8d, 0x9f, 0x88, 0x66, 0x2e,
+    0x96, 0x89, 0x52, 0x7b, 0x67, 0xf3, 0x67, 0x41,
+    0x6d, 0x9c, 0x6e, 0x09, 0x74, 0x59, 0x75, 0x6b,
+    0x78, 0x10, 0x7d, 0x5e, 0x98, 0x6d, 0x51, 0x2e,
+    0x62, 0x78, 0x96, 0x2b, 0x50, 0x19, 0x5d, 0xea,
+    0x6d, 0x2a, 0x8f, 0x8b, 0x5f, 0x44, 0x61, 0x17,
+    0x68, 0x87, 0x73, 0x86, 0x96, 0x29, 0x52, 0x0f,
+    0x54, 0x65, 0x5c, 0x13, 0x66, 0x4e, 0x67, 0xa8,
+    0x68, 0xe5, 0x6c, 0x06, 0x74, 0xe2, 0x75, 0x79,
+    0x7f, 0xcf, 0x88, 0xe1, 0x88, 0xcc, 0x91, 0xe2,
+    0x96, 0x3f, 0x53, 0xba, 0x6e, 0x1d, 0x54, 0xd0,
+    0x71, 0x98, 0x74, 0xfa, 0x85, 0xa3, 0x96, 0x57,
+    0x9c, 0x9f, 0x9e, 0x97, 0x67, 0xcb, 0x6d, 0xe8,
+    0x81, 0xcb, 0x7a, 0x20, 0x7b, 0x92, 0x7c, 0xc0,
+    0x72, 0x99, 0x70, 0x58, 0x8b, 0xc0, 0x4e, 0x36,
+    0x83, 0x3a, 0x52, 0x07, 0x52, 0xa6, 0x5e, 0xd3,
+    0x62, 0xd6, 0x7c, 0x85, 0x5b, 0x1e, 0x6d, 0xb4,
+    0x66, 0x3b, 0x8f, 0x4c, 0x88, 0x4d, 0x96, 0x8b,
+    0x89, 0xd3, 0x5e, 0x40, 0x51, 0xc0, 0x55, 0x00,
+    0x00, 0x00, 0x00, 0x5a, 0x58, 0x00, 0x00, 0x74,
+    0x66, 0x00, 0x00, 0x00, 0x00, 0xde, 0x51, 0x2a,
+    0x73, 0xca, 0x76, 0x3c, 0x79, 0x5e, 0x79, 0x65,
+    0x79, 0x8f, 0x79, 0x56, 0x97, 0xbe, 0x7c, 0xbd,
+    0x7f, 0x00, 0x00, 0x12, 0x86, 0x00, 0x00, 0xf8,
+    0x8a, 0x00, 0x00, 0x00, 0x00, 0x38, 0x90, 0xfd,
+    0x90, 0xef, 0x98, 0xfc, 0x98, 0x28, 0x99, 0xb4,
+    0x9d, 0xde, 0x90, 0xb7, 0x96, 0xae, 0x4f, 0xe7,
+    0x50, 0x4d, 0x51, 0xc9, 0x52, 0xe4, 0x52, 0x51,
+    0x53, 0x9d, 0x55, 0x06, 0x56, 0x68, 0x56, 0x40,
+    0x58, 0xa8, 0x58, 0x64, 0x5c, 0x6e, 0x5c, 0x94,
+    0x60, 0x68, 0x61, 0x8e, 0x61, 0xf2, 0x61, 0x4f,
+    0x65, 0xe2, 0x65, 0x91, 0x66, 0x85, 0x68, 0x77,
+    0x6d, 0x1a, 0x6e, 0x22, 0x6f, 0x6e, 0x71, 0x2b,
+    0x72, 0x22, 0x74, 0x91, 0x78, 0x3e, 0x79, 0x49,
+    0x79, 0x48, 0x79, 0x50, 0x79, 0x56, 0x79, 0x5d,
+    0x79, 0x8d, 0x79, 0x8e, 0x79, 0x40, 0x7a, 0x81,
+    0x7a, 0xc0, 0x7b, 0xf4, 0x7d, 0x09, 0x7e, 0x41,
+    0x7e, 0x72, 0x7f, 0x05, 0x80, 0xed, 0x81, 0x79,
+    0x82, 0x79, 0x82, 0x57, 0x84, 0x10, 0x89, 0x96,
+    0x89, 0x01, 0x8b, 0x39, 0x8b, 0xd3, 0x8c, 0x08,
+    0x8d, 0xb6, 0x8f, 0x38, 0x90, 0xe3, 0x96, 0xff,
+    0x97, 0x3b, 0x98, 0x75, 0x60, 0xee, 0x42, 0x18,
+    0x82, 0x02, 0x26, 0x4e, 0xb5, 0x51, 0x68, 0x51,
+    0x80, 0x4f, 0x45, 0x51, 0x80, 0x51, 0xc7, 0x52,
+    0xfa, 0x52, 0x9d, 0x55, 0x55, 0x55, 0x99, 0x55,
+    0xe2, 0x55, 0x5a, 0x58, 0xb3, 0x58, 0x44, 0x59,
+    0x54, 0x59, 0x62, 0x5a, 0x28, 0x5b, 0xd2, 0x5e,
+    0xd9, 0x5e, 0x69, 0x5f, 0xad, 0x5f, 0xd8, 0x60,
+    0x4e, 0x61, 0x08, 0x61, 0x8e, 0x61, 0x60, 0x61,
+    0xf2, 0x61, 0x34, 0x62, 0xc4, 0x63, 0x1c, 0x64,
+    0x52, 0x64, 0x56, 0x65, 0x74, 0x66, 0x17, 0x67,
+    0x1b, 0x67, 0x56, 0x67, 0x79, 0x6b, 0xba, 0x6b,
+    0x41, 0x6d, 0xdb, 0x6e, 0xcb, 0x6e, 0x22, 0x6f,
+    0x1e, 0x70, 0x6e, 0x71, 0xa7, 0x77, 0x35, 0x72,
+    0xaf, 0x72, 0x2a, 0x73, 0x71, 0x74, 0x06, 0x75,
+    0x3b, 0x75, 0x1d, 0x76, 0x1f, 0x76, 0xca, 0x76,
+    0xdb, 0x76, 0xf4, 0x76, 0x4a, 0x77, 0x40, 0x77,
+    0xcc, 0x78, 0xb1, 0x7a, 0xc0, 0x7b, 0x7b, 0x7c,
+    0x5b, 0x7d, 0xf4, 0x7d, 0x3e, 0x7f, 0x05, 0x80,
+    0x52, 0x83, 0xef, 0x83, 0x79, 0x87, 0x41, 0x89,
+    0x86, 0x89, 0x96, 0x89, 0xbf, 0x8a, 0xf8, 0x8a,
+    0xcb, 0x8a, 0x01, 0x8b, 0xfe, 0x8a, 0xed, 0x8a,
+    0x39, 0x8b, 0x8a, 0x8b, 0x08, 0x8d, 0x38, 0x8f,
+    0x72, 0x90, 0x99, 0x91, 0x76, 0x92, 0x7c, 0x96,
+    0xe3, 0x96, 0x56, 0x97, 0xdb, 0x97, 0xff, 0x97,
+    0x0b, 0x98, 0x3b, 0x98, 0x12, 0x9b, 0x9c, 0x9f,
+    0x4a, 0x28, 0x44, 0x28, 0xd5, 0x33, 0x9d, 0x3b,
+    0x18, 0x40, 0x39, 0x40, 0x49, 0x52, 0xd0, 0x5c,
+    0xd3, 0x7e, 0x43, 0x9f, 0x8e, 0x9f, 0x2a, 0xa0,
+    0x02, 0x66, 0x66, 0x66, 0x69, 0x66, 0x6c, 0x66,
+    0x66, 0x69, 0x66, 0x66, 0x6c, 0x7f, 0x01, 0x74,
+    0x73, 0x00, 0x74, 0x65, 0x05, 0x0f, 0x11, 0x0f,
+    0x00, 0x0f, 0x06, 0x19, 0x11, 0x0f, 0x08, 0xd9,
+    0x05, 0xb4, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf2,
+    0x05, 0xb7, 0x05, 0xd0, 0x05, 0x12, 0x00, 0x03,
+    0x04, 0x0b, 0x0c, 0x0d, 0x18, 0x1a, 0xe9, 0x05,
+    0xc1, 0x05, 0xe9, 0x05, 0xc2, 0x05, 0x49, 0xfb,
+    0xc1, 0x05, 0x49, 0xfb, 0xc2, 0x05, 0xd0, 0x05,
+    0xb7, 0x05, 0xd0, 0x05, 0xb8, 0x05, 0xd0, 0x05,
+    0xbc, 0x05, 0xd8, 0x05, 0xbc, 0x05, 0xde, 0x05,
+    0xbc, 0x05, 0xe0, 0x05, 0xbc, 0x05, 0xe3, 0x05,
+    0xbc, 0x05, 0xb9, 0x05, 0x2d, 0x03, 0x2e, 0x03,
+    0x2f, 0x03, 0x30, 0x03, 0x31, 0x03, 0x1c, 0x00,
+    0x18, 0x06, 0x22, 0x06, 0x2b, 0x06, 0xd0, 0x05,
+    0xdc, 0x05, 0x71, 0x06, 0x00, 0x00, 0x0a, 0x0a,
+    0x0a, 0x0a, 0x0d, 0x0d, 0x0d, 0x0d, 0x0f, 0x0f,
+    0x0f, 0x0f, 0x09, 0x09, 0x09, 0x09, 0x0e, 0x0e,
+    0x0e, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x33, 0x33,
+    0x33, 0x33, 0x35, 0x35, 0x35, 0x35, 0x13, 0x13,
+    0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x15, 0x15,
+    0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x1c, 0x1c,
+    0x1b, 0x1b, 0x1d, 0x1d, 0x17, 0x17, 0x27, 0x27,
+    0x20, 0x20, 0x38, 0x38, 0x38, 0x38, 0x3e, 0x3e,
+    0x3e, 0x3e, 0x42, 0x42, 0x42, 0x42, 0x40, 0x40,
+    0x40, 0x40, 0x49, 0x49, 0x4a, 0x4a, 0x4a, 0x4a,
+    0x4f, 0x4f, 0x50, 0x50, 0x50, 0x50, 0x4d, 0x4d,
+    0x4d, 0x4d, 0x61, 0x61, 0x62, 0x62, 0x49, 0x06,
+    0x64, 0x64, 0x64, 0x64, 0x7e, 0x7e, 0x7d, 0x7d,
+    0x7f, 0x7f, 0x2e, 0x82, 0x82, 0x7c, 0x7c, 0x80,
+    0x80, 0x87, 0x87, 0x87, 0x87, 0x00, 0x00, 0x26,
+    0x06, 0x00, 0x01, 0x00, 0x01, 0x00, 0xaf, 0x00,
+    0xaf, 0x00, 0x22, 0x00, 0x22, 0x00, 0xa1, 0x00,
+    0xa1, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa2, 0x00,
+    0xa2, 0x00, 0xaa, 0x00, 0xaa, 0x00, 0xaa, 0x00,
+    0x23, 0x00, 0x23, 0x00, 0x23, 0xcc, 0x06, 0x00,
+    0x00, 0x00, 0x00, 0x26, 0x06, 0x00, 0x06, 0x00,
+    0x07, 0x00, 0x1f, 0x00, 0x23, 0x00, 0x24, 0x02,
+    0x06, 0x02, 0x07, 0x02, 0x08, 0x02, 0x1f, 0x02,
+    0x23, 0x02, 0x24, 0x04, 0x06, 0x04, 0x07, 0x04,
+    0x08, 0x04, 0x1f, 0x04, 0x23, 0x04, 0x24, 0x05,
+    0x06, 0x05, 0x1f, 0x05, 0x23, 0x05, 0x24, 0x06,
+    0x07, 0x06, 0x1f, 0x07, 0x06, 0x07, 0x1f, 0x08,
+    0x06, 0x08, 0x07, 0x08, 0x1f, 0x0d, 0x06, 0x0d,
     0x07, 0x0d, 0x08, 0x0d, 0x1f, 0x0f, 0x07, 0x0f,
-    0x08, 0x0f, 0x1f, 0x10, 0x06, 0x10, 0x07, 0x10,
-    0x08, 0x10, 0x1f, 0x11, 0x07, 0x12, 0x1f, 0x13,
+    0x1f, 0x10, 0x06, 0x10, 0x07, 0x10, 0x08, 0x10,
+    0x1f, 0x11, 0x07, 0x11, 0x1f, 0x12, 0x1f, 0x13,
     0x06, 0x13, 0x1f, 0x14, 0x06, 0x14, 0x1f, 0x1b,
-    0x06, 0x1b, 0x07, 0x1b, 0x08, 0x1b, 0x1f, 0x1c,
-    0x07, 0x1c, 0x1f, 0x1d, 0x06, 0x1d, 0x07, 0x1d,
-    0x08, 0x1d, 0x1e, 0x1d, 0x1f, 0x1e, 0x06, 0x1e,
-    0x07, 0x1e, 0x08, 0x1e, 0x1f, 0x1e, 0x21, 0x1f,
-    0x06, 0x1f, 0x07, 0x1f, 0x08, 0x1f, 0x1f, 0x20,
-    0x06, 0x20, 0x07, 0x20, 0x08, 0x20, 0x1f, 0x20,
-    0x21, 0x21, 0x06, 0x21, 0x1f, 0x21, 0x4a, 0x24,
+    0x06, 0x1b, 0x07, 0x1b, 0x08, 0x1b, 0x1f, 0x1b,
+    0x23, 0x1b, 0x24, 0x1c, 0x07, 0x1c, 0x1f, 0x1c,
+    0x23, 0x1c, 0x24, 0x1d, 0x01, 0x1d, 0x06, 0x1d,
+    0x07, 0x1d, 0x08, 0x1d, 0x1e, 0x1d, 0x1f, 0x1d,
+    0x23, 0x1d, 0x24, 0x1e, 0x06, 0x1e, 0x07, 0x1e,
+    0x08, 0x1e, 0x1f, 0x1e, 0x23, 0x1e, 0x24, 0x1f,
+    0x06, 0x1f, 0x07, 0x1f, 0x08, 0x1f, 0x1f, 0x1f,
+    0x23, 0x1f, 0x24, 0x20, 0x06, 0x20, 0x07, 0x20,
+    0x08, 0x20, 0x1f, 0x20, 0x23, 0x20, 0x24, 0x21,
+    0x06, 0x21, 0x1f, 0x21, 0x23, 0x21, 0x24, 0x24,
     0x06, 0x24, 0x07, 0x24, 0x08, 0x24, 0x1f, 0x24,
-    0x21, 0x00, 0x1f, 0x00, 0x21, 0x02, 0x1f, 0x02,
-    0x21, 0x04, 0x1f, 0x04, 0x21, 0x05, 0x1f, 0x05,
-    0x21, 0x0d, 0x1f, 0x0d, 0x21, 0x0e, 0x1f, 0x0e,
-    0x21, 0x1d, 0x1e, 0x1d, 0x1f, 0x1e, 0x1f, 0x20,
-    0x1f, 0x20, 0x21, 0x24, 0x1f, 0x24, 0x21, 0x40,
-    0x06, 0x4e, 0x06, 0x51, 0x06, 0x27, 0x06, 0x10,
-    0x22, 0x10, 0x23, 0x12, 0x22, 0x12, 0x23, 0x13,
-    0x22, 0x13, 0x23, 0x0c, 0x22, 0x0c, 0x23, 0x0d,
-    0x22, 0x0d, 0x23, 0x06, 0x22, 0x06, 0x23, 0x05,
-    0x22, 0x05, 0x23, 0x07, 0x22, 0x07, 0x23, 0x0e,
-    0x22, 0x0e, 0x23, 0x0f, 0x22, 0x0f, 0x23, 0x0d,
-    0x05, 0x0d, 0x06, 0x0d, 0x07, 0x0d, 0x1e, 0x0d,
-    0x0a, 0x0c, 0x0a, 0x0e, 0x0a, 0x0f, 0x0a, 0x10,
-    0x22, 0x10, 0x23, 0x12, 0x22, 0x12, 0x23, 0x13,
-    0x22, 0x13, 0x23, 0x0c, 0x22, 0x0c, 0x23, 0x0d,
-    0x22, 0x0d, 0x23, 0x06, 0x22, 0x06, 0x23, 0x05,
-    0x22, 0x05, 0x23, 0x07, 0x22, 0x07, 0x23, 0x0e,
-    0x22, 0x0e, 0x23, 0x0f, 0x22, 0x0f, 0x23, 0x0d,
-    0x05, 0x0d, 0x06, 0x0d, 0x07, 0x0d, 0x1e, 0x0d,
-    0x0a, 0x0c, 0x0a, 0x0e, 0x0a, 0x0f, 0x0a, 0x0d,
-    0x05, 0x0d, 0x06, 0x0d, 0x07, 0x0d, 0x1e, 0x0c,
-    0x20, 0x0d, 0x20, 0x10, 0x1e, 0x0c, 0x05, 0x0c,
-    0x06, 0x0c, 0x07, 0x0d, 0x05, 0x0d, 0x06, 0x0d,
-    0x07, 0x10, 0x1e, 0x11, 0x1e, 0x00, 0x24, 0x00,
-    0x24, 0x2a, 0x06, 0x00, 0x02, 0x1b, 0x00, 0x03,
-    0x02, 0x00, 0x03, 0x02, 0x00, 0x03, 0x1b, 0x00,
-    0x04, 0x1b, 0x00, 0x1b, 0x02, 0x00, 0x1b, 0x03,
-    0x00, 0x1b, 0x04, 0x02, 0x1b, 0x03, 0x02, 0x1b,
-    0x03, 0x03, 0x1b, 0x20, 0x03, 0x1b, 0x1f, 0x09,
-    0x03, 0x02, 0x09, 0x02, 0x03, 0x09, 0x02, 0x1f,
-    0x09, 0x1b, 0x03, 0x09, 0x1b, 0x03, 0x09, 0x1b,
-    0x02, 0x09, 0x1b, 0x1b, 0x09, 0x1b, 0x1b, 0x0b,
-    0x03, 0x03, 0x0b, 0x03, 0x03, 0x0b, 0x1b, 0x1b,
-    0x0a, 0x03, 0x1b, 0x0a, 0x03, 0x1b, 0x0a, 0x02,
-    0x20, 0x0a, 0x1b, 0x04, 0x0a, 0x1b, 0x04, 0x0a,
-    0x1b, 0x1b, 0x0a, 0x1b, 0x1b, 0x0c, 0x03, 0x1f,
-    0x0c, 0x04, 0x1b, 0x0c, 0x04, 0x1b, 0x0d, 0x1b,
-    0x03, 0x0d, 0x1b, 0x03, 0x0d, 0x1b, 0x1b, 0x0d,
-    0x1b, 0x20, 0x0f, 0x02, 0x1b, 0x0f, 0x1b, 0x1b,
-    0x0f, 0x1b, 0x1b, 0x0f, 0x1b, 0x1f, 0x10, 0x1b,
-    0x1b, 0x10, 0x1b, 0x20, 0x10, 0x1b, 0x1f, 0x17,
-    0x04, 0x1b, 0x17, 0x04, 0x1b, 0x18, 0x1b, 0x03,
-    0x18, 0x1b, 0x1b, 0x1a, 0x03, 0x1b, 0x1a, 0x03,
-    0x20, 0x1a, 0x03, 0x1f, 0x1a, 0x02, 0x02, 0x1a,
-    0x02, 0x02, 0x1a, 0x04, 0x1b, 0x1a, 0x04, 0x1b,
-    0x1a, 0x1b, 0x03, 0x1a, 0x1b, 0x03, 0x1b, 0x03,
-    0x02, 0x1b, 0x03, 0x1b, 0x1b, 0x03, 0x20, 0x1b,
-    0x02, 0x03, 0x1b, 0x02, 0x1b, 0x1b, 0x04, 0x02,
-    0x1b, 0x04, 0x1b, 0x28, 0x06, 0x1d, 0x04, 0x06,
-    0x1f, 0x1d, 0x04, 0x1f, 0x1d, 0x1d, 0x1e, 0x05,
-    0x1d, 0x1e, 0x05, 0x21, 0x1e, 0x04, 0x1d, 0x1e,
-    0x04, 0x1d, 0x1e, 0x04, 0x21, 0x1e, 0x1d, 0x22,
-    0x1e, 0x1d, 0x21, 0x22, 0x1d, 0x1d, 0x22, 0x1d,
-    0x1d, 0x00, 0x06, 0x22, 0x02, 0x04, 0x22, 0x02,
-    0x04, 0x21, 0x02, 0x06, 0x22, 0x02, 0x06, 0x21,
-    0x02, 0x1d, 0x22, 0x02, 0x1d, 0x21, 0x04, 0x1d,
-    0x22, 0x04, 0x05, 0x21, 0x04, 0x1d, 0x21, 0x0b,
-    0x06, 0x21, 0x0d, 0x05, 0x22, 0x0c, 0x05, 0x22,
-    0x0e, 0x05, 0x22, 0x1c, 0x04, 0x22, 0x1c, 0x1d,
-    0x22, 0x22, 0x05, 0x22, 0x22, 0x04, 0x22, 0x22,
-    0x1d, 0x22, 0x1d, 0x1d, 0x22, 0x1a, 0x1d, 0x22,
-    0x1e, 0x05, 0x22, 0x1a, 0x1d, 0x05, 0x1c, 0x05,
-    0x1d, 0x11, 0x1d, 0x22, 0x1b, 0x1d, 0x22, 0x1e,
-    0x04, 0x05, 0x1d, 0x06, 0x22, 0x1c, 0x04, 0x1d,
-    0x1b, 0x1d, 0x1d, 0x1c, 0x04, 0x1d, 0x1e, 0x04,
-    0x05, 0x04, 0x05, 0x22, 0x05, 0x04, 0x22, 0x1d,
-    0x04, 0x22, 0x19, 0x1d, 0x22, 0x00, 0x05, 0x22,
-    0x1b, 0x1d, 0x1d, 0x11, 0x04, 0x1d, 0x0d, 0x1d,
-    0x1d, 0x0b, 0x06, 0x22, 0x1e, 0x04, 0x22, 0x35,
-    0x06, 0x00, 0x0f, 0x9d, 0x0d, 0x0f, 0x9d, 0x27,
-    0x06, 0x00, 0x1d, 0x1d, 0x20, 0x00, 0x1c, 0x01,
-    0x0a, 0x1e, 0x06, 0x1e, 0x08, 0x0e, 0x1d, 0x12,
-    0x1e, 0x0a, 0x0c, 0x21, 0x1d, 0x12, 0x1d, 0x23,
-    0x20, 0x21, 0x0c, 0x1d, 0x1e, 0x35, 0x06, 0x00,
-    0x0f, 0x14, 0x27, 0x06, 0x0e, 0x1d, 0x22, 0xff,
-    0x00, 0x1d, 0x1d, 0x20, 0xff, 0x12, 0x1d, 0x23,
-    0x20, 0xff, 0x21, 0x0c, 0x1d, 0x1e, 0x27, 0x06,
-    0x05, 0x1d, 0xff, 0x05, 0x1d, 0x00, 0x1d, 0x20,
-    0x27, 0x06, 0x0a, 0xa5, 0x00, 0x1d, 0x2c, 0x00,
-    0x01, 0x30, 0x02, 0x30, 0x3a, 0x00, 0x3b, 0x00,
-    0x21, 0x00, 0x3f, 0x00, 0x16, 0x30, 0x17, 0x30,
-    0x26, 0x20, 0x13, 0x20, 0x12, 0x01, 0x00, 0x5f,
-    0x5f, 0x28, 0x29, 0x7b, 0x7d, 0x08, 0x30, 0x0c,
-    0x0d, 0x08, 0x09, 0x02, 0x03, 0x00, 0x01, 0x04,
-    0x05, 0x06, 0x07, 0x5b, 0x00, 0x5d, 0x00, 0x3e,
-    0x20, 0x3e, 0x20, 0x3e, 0x20, 0x3e, 0x20, 0x5f,
-    0x00, 0x5f, 0x00, 0x5f, 0x00, 0x2c, 0x00, 0x01,
-    0x30, 0x2e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x3a,
-    0x00, 0x3f, 0x00, 0x21, 0x00, 0x14, 0x20, 0x28,
-    0x00, 0x29, 0x00, 0x7b, 0x00, 0x7d, 0x00, 0x14,
-    0x30, 0x15, 0x30, 0x23, 0x26, 0x2a, 0x2b, 0x2d,
-    0x3c, 0x3e, 0x3d, 0x00, 0x5c, 0x24, 0x25, 0x40,
-    0x40, 0x06, 0xff, 0x0b, 0x00, 0x0b, 0xff, 0x0c,
-    0x20, 0x00, 0x4d, 0x06, 0x40, 0x06, 0xff, 0x0e,
-    0x00, 0x0e, 0xff, 0x0f, 0x00, 0x0f, 0xff, 0x10,
-    0x00, 0x10, 0xff, 0x11, 0x00, 0x11, 0xff, 0x12,
-    0x00, 0x12, 0x21, 0x06, 0x00, 0x01, 0x01, 0x02,
-    0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x05,
-    0x05, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x08,
-    0x08, 0x09, 0x09, 0x09, 0x09, 0x0a, 0x0a, 0x0a,
-    0x0a, 0x0b, 0x0b, 0x0b, 0x0b, 0x0c, 0x0c, 0x0c,
-    0x0c, 0x0d, 0x0d, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f,
-    0x0f, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x12,
-    0x12, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14,
-    0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16,
-    0x16, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18,
-    0x18, 0x19, 0x19, 0x19, 0x19, 0x20, 0x20, 0x20,
-    0x20, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22,
-    0x22, 0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24,
-    0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26,
-    0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x29,
-    0x29, 0x22, 0x06, 0x22, 0x00, 0x22, 0x00, 0x22,
-    0x01, 0x22, 0x01, 0x22, 0x03, 0x22, 0x03, 0x22,
-    0x05, 0x22, 0x05, 0x21, 0x00, 0x85, 0x29, 0x01,
-    0x30, 0x01, 0x0b, 0x0c, 0x00, 0xfa, 0xf1, 0xa0,
-    0xa2, 0xa4, 0xa6, 0xa8, 0xe2, 0xe4, 0xe6, 0xc2,
-    0xfb, 0xa1, 0xa3, 0xa5, 0xa7, 0xa9, 0xaa, 0xac,
-    0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc,
-    0xbe, 0xc0, 0xc3, 0xc5, 0xc7, 0xc9, 0xca, 0xcb,
-    0xcc, 0xcd, 0xce, 0xd1, 0xd4, 0xd7, 0xda, 0xdd,
-    0xde, 0xdf, 0xe0, 0xe1, 0xe3, 0xe5, 0xe7, 0xe8,
-    0xe9, 0xea, 0xeb, 0xec, 0xee, 0xf2, 0x98, 0x99,
-    0x31, 0x31, 0x4f, 0x31, 0x55, 0x31, 0x5b, 0x31,
-    0x61, 0x31, 0xa2, 0x00, 0xa3, 0x00, 0xac, 0x00,
-    0xaf, 0x00, 0xa6, 0x00, 0xa5, 0x00, 0xa9, 0x20,
-    0x00, 0x00, 0x02, 0x25, 0x90, 0x21, 0x91, 0x21,
-    0x92, 0x21, 0x93, 0x21, 0xa0, 0x25, 0xcb, 0x25,
-    0xd0, 0x02, 0xd1, 0x02, 0xe6, 0x00, 0x99, 0x02,
-    0x53, 0x02, 0x00, 0x00, 0xa3, 0x02, 0x66, 0xab,
-    0xa5, 0x02, 0xa4, 0x02, 0x56, 0x02, 0x57, 0x02,
-    0x91, 0x1d, 0x58, 0x02, 0x5e, 0x02, 0xa9, 0x02,
-    0x64, 0x02, 0x62, 0x02, 0x60, 0x02, 0x9b, 0x02,
-    0x27, 0x01, 0x9c, 0x02, 0x67, 0x02, 0x84, 0x02,
-    0xaa, 0x02, 0xab, 0x02, 0x6c, 0x02, 0x04, 0xdf,
-    0x8e, 0xa7, 0x6e, 0x02, 0x05, 0xdf, 0x8e, 0x02,
-    0x06, 0xdf, 0xf8, 0x00, 0x76, 0x02, 0x77, 0x02,
-    0x71, 0x00, 0x7a, 0x02, 0x08, 0xdf, 0x7d, 0x02,
-    0x7e, 0x02, 0x80, 0x02, 0xa8, 0x02, 0xa6, 0x02,
-    0x67, 0xab, 0xa7, 0x02, 0x88, 0x02, 0x71, 0x2c,
-    0x00, 0x00, 0x8f, 0x02, 0xa1, 0x02, 0xa2, 0x02,
-    0x98, 0x02, 0xc0, 0x01, 0xc1, 0x01, 0xc2, 0x01,
-    0x0a, 0xdf, 0x1e, 0xdf, 0x41, 0x04, 0x40, 0x00,
-    0x00, 0x00, 0x00, 0x14, 0x99, 0x10, 0xba, 0x10,
-    0x00, 0x00, 0x00, 0x00, 0x9b, 0x10, 0xba, 0x10,
-    0x05, 0x05, 0xa5, 0x10, 0xba, 0x10, 0x05, 0x31,
-    0x11, 0x27, 0x11, 0x32, 0x11, 0x27, 0x11, 0x55,
-    0x47, 0x13, 0x3e, 0x13, 0x47, 0x13, 0x57, 0x13,
-    0x55, 0xb9, 0x14, 0xba, 0x14, 0xb9, 0x14, 0xb0,
-    0x14, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x14, 0xbd,
-    0x14, 0x55, 0x50, 0xb8, 0x15, 0xaf, 0x15, 0xb9,
-    0x15, 0xaf, 0x15, 0x55, 0x35, 0x19, 0x30, 0x19,
-    0x05, 0x57, 0xd1, 0x65, 0xd1, 0x58, 0xd1, 0x65,
-    0xd1, 0x5f, 0xd1, 0x6e, 0xd1, 0x5f, 0xd1, 0x6f,
-    0xd1, 0x5f, 0xd1, 0x70, 0xd1, 0x5f, 0xd1, 0x71,
-    0xd1, 0x5f, 0xd1, 0x72, 0xd1, 0x55, 0x55, 0x55,
-    0x05, 0xb9, 0xd1, 0x65, 0xd1, 0xba, 0xd1, 0x65,
-    0xd1, 0xbb, 0xd1, 0x6e, 0xd1, 0xbc, 0xd1, 0x6e,
-    0xd1, 0xbb, 0xd1, 0x6f, 0xd1, 0xbc, 0xd1, 0x6f,
-    0xd1, 0x55, 0x55, 0x55, 0x41, 0x00, 0x61, 0x00,
-    0x41, 0x00, 0x61, 0x00, 0x69, 0x00, 0x41, 0x00,
-    0x61, 0x00, 0x41, 0x00, 0x43, 0x44, 0x00, 0x00,
-    0x47, 0x00, 0x00, 0x4a, 0x4b, 0x00, 0x00, 0x4e,
-    0x4f, 0x50, 0x51, 0x00, 0x53, 0x54, 0x55, 0x56,
-    0x57, 0x58, 0x59, 0x5a, 0x61, 0x62, 0x63, 0x64,
-    0x00, 0x66, 0x68, 0x00, 0x70, 0x00, 0x41, 0x00,
-    0x61, 0x00, 0x41, 0x42, 0x00, 0x44, 0x45, 0x46,
-    0x47, 0x4a, 0x00, 0x53, 0x00, 0x61, 0x00, 0x41,
-    0x42, 0x00, 0x44, 0x45, 0x46, 0x47, 0x00, 0x49,
-    0x4a, 0x4b, 0x4c, 0x4d, 0x00, 0x4f, 0x53, 0x00,
-    0x61, 0x00, 0x41, 0x00, 0x61, 0x00, 0x41, 0x00,
-    0x61, 0x00, 0x41, 0x00, 0x61, 0x00, 0x41, 0x00,
-    0x61, 0x00, 0x41, 0x00, 0x61, 0x00, 0x41, 0x00,
-    0x61, 0x00, 0x31, 0x01, 0x37, 0x02, 0x91, 0x03,
-    0xa3, 0x03, 0xb1, 0x03, 0xd1, 0x03, 0x24, 0x00,
-    0x1f, 0x04, 0x20, 0x05, 0x91, 0x03, 0xa3, 0x03,
-    0xb1, 0x03, 0xd1, 0x03, 0x24, 0x00, 0x1f, 0x04,
-    0x20, 0x05, 0x91, 0x03, 0xa3, 0x03, 0xb1, 0x03,
-    0xd1, 0x03, 0x24, 0x00, 0x1f, 0x04, 0x20, 0x05,
-    0x91, 0x03, 0xa3, 0x03, 0xb1, 0x03, 0xd1, 0x03,
-    0x24, 0x00, 0x1f, 0x04, 0x20, 0x05, 0x91, 0x03,
-    0xa3, 0x03, 0xb1, 0x03, 0xd1, 0x03, 0x24, 0x00,
-    0x1f, 0x04, 0x20, 0x05, 0x0b, 0x0c, 0x30, 0x00,
-    0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
-    0x27, 0x06, 0x00, 0x01, 0x05, 0x08, 0x2a, 0x06,
-    0x1e, 0x08, 0x03, 0x0d, 0x20, 0x19, 0x1a, 0x1b,
+    0x23, 0x24, 0x24, 0x0a, 0x4a, 0x0b, 0x4a, 0x23,
+    0x4a, 0x20, 0x00, 0x4c, 0x06, 0x51, 0x06, 0x51,
+    0x06, 0xff, 0x00, 0x1f, 0x26, 0x06, 0x00, 0x0b,
+    0x00, 0x0c, 0x00, 0x1f, 0x00, 0x20, 0x00, 0x23,
+    0x00, 0x24, 0x02, 0x0b, 0x02, 0x0c, 0x02, 0x1f,
+    0x02, 0x20, 0x02, 0x23, 0x02, 0x24, 0x04, 0x0b,
+    0x04, 0x0c, 0x04, 0x1f, 0x26, 0x06, 0x04, 0x20,
+    0x04, 0x23, 0x04, 0x24, 0x05, 0x0b, 0x05, 0x0c,
+    0x05, 0x1f, 0x05, 0x20, 0x05, 0x23, 0x05, 0x24,
+    0x1b, 0x23, 0x1b, 0x24, 0x1c, 0x23, 0x1c, 0x24,
+    0x1d, 0x01, 0x1d, 0x1e, 0x1d, 0x1f, 0x1d, 0x23,
+    0x1d, 0x24, 0x1e, 0x1f, 0x1e, 0x23, 0x1e, 0x24,
+    0x1f, 0x01, 0x1f, 0x1f, 0x20, 0x0b, 0x20, 0x0c,
+    0x20, 0x1f, 0x20, 0x20, 0x20, 0x23, 0x20, 0x24,
+    0x23, 0x4a, 0x24, 0x0b, 0x24, 0x0c, 0x24, 0x1f,
+    0x24, 0x20, 0x24, 0x23, 0x24, 0x24, 0x00, 0x06,
+    0x00, 0x07, 0x00, 0x08, 0x00, 0x1f, 0x00, 0x21,
+    0x02, 0x06, 0x02, 0x07, 0x02, 0x08, 0x02, 0x1f,
+    0x02, 0x21, 0x04, 0x06, 0x04, 0x07, 0x04, 0x08,
+    0x04, 0x1f, 0x04, 0x21, 0x05, 0x1f, 0x06, 0x07,
+    0x06, 0x1f, 0x07, 0x06, 0x07, 0x1f, 0x08, 0x06,
+    0x08, 0x1f, 0x0d, 0x06, 0x0d, 0x07, 0x0d, 0x08,
+    0x0d, 0x1f, 0x0f, 0x07, 0x0f, 0x08, 0x0f, 0x1f,
+    0x10, 0x06, 0x10, 0x07, 0x10, 0x08, 0x10, 0x1f,
+    0x11, 0x07, 0x12, 0x1f, 0x13, 0x06, 0x13, 0x1f,
+    0x14, 0x06, 0x14, 0x1f, 0x1b, 0x06, 0x1b, 0x07,
+    0x1b, 0x08, 0x1b, 0x1f, 0x1c, 0x07, 0x1c, 0x1f,
+    0x1d, 0x06, 0x1d, 0x07, 0x1d, 0x08, 0x1d, 0x1e,
+    0x1d, 0x1f, 0x1e, 0x06, 0x1e, 0x07, 0x1e, 0x08,
+    0x1e, 0x1f, 0x1e, 0x21, 0x1f, 0x06, 0x1f, 0x07,
+    0x1f, 0x08, 0x1f, 0x1f, 0x20, 0x06, 0x20, 0x07,
+    0x20, 0x08, 0x20, 0x1f, 0x20, 0x21, 0x21, 0x06,
+    0x21, 0x1f, 0x21, 0x4a, 0x24, 0x06, 0x24, 0x07,
+    0x24, 0x08, 0x24, 0x1f, 0x24, 0x21, 0x00, 0x1f,
+    0x00, 0x21, 0x02, 0x1f, 0x02, 0x21, 0x04, 0x1f,
+    0x04, 0x21, 0x05, 0x1f, 0x05, 0x21, 0x0d, 0x1f,
+    0x0d, 0x21, 0x0e, 0x1f, 0x0e, 0x21, 0x1d, 0x1e,
+    0x1d, 0x1f, 0x1e, 0x1f, 0x20, 0x1f, 0x20, 0x21,
+    0x24, 0x1f, 0x24, 0x21, 0x40, 0x06, 0x4e, 0x06,
+    0x51, 0x06, 0x27, 0x06, 0x10, 0x22, 0x10, 0x23,
+    0x12, 0x22, 0x12, 0x23, 0x13, 0x22, 0x13, 0x23,
+    0x0c, 0x22, 0x0c, 0x23, 0x0d, 0x22, 0x0d, 0x23,
+    0x06, 0x22, 0x06, 0x23, 0x05, 0x22, 0x05, 0x23,
+    0x07, 0x22, 0x07, 0x23, 0x0e, 0x22, 0x0e, 0x23,
+    0x0f, 0x22, 0x0f, 0x23, 0x0d, 0x05, 0x0d, 0x06,
+    0x0d, 0x07, 0x0d, 0x1e, 0x0d, 0x0a, 0x0c, 0x0a,
+    0x0e, 0x0a, 0x0f, 0x0a, 0x10, 0x22, 0x10, 0x23,
+    0x12, 0x22, 0x12, 0x23, 0x13, 0x22, 0x13, 0x23,
+    0x0c, 0x22, 0x0c, 0x23, 0x0d, 0x22, 0x0d, 0x23,
+    0x06, 0x22, 0x06, 0x23, 0x05, 0x22, 0x05, 0x23,
+    0x07, 0x22, 0x07, 0x23, 0x0e, 0x22, 0x0e, 0x23,
+    0x0f, 0x22, 0x0f, 0x23, 0x0d, 0x05, 0x0d, 0x06,
+    0x0d, 0x07, 0x0d, 0x1e, 0x0d, 0x0a, 0x0c, 0x0a,
+    0x0e, 0x0a, 0x0f, 0x0a, 0x0d, 0x05, 0x0d, 0x06,
+    0x0d, 0x07, 0x0d, 0x1e, 0x0c, 0x20, 0x0d, 0x20,
+    0x10, 0x1e, 0x0c, 0x05, 0x0c, 0x06, 0x0c, 0x07,
+    0x0d, 0x05, 0x0d, 0x06, 0x0d, 0x07, 0x10, 0x1e,
+    0x11, 0x1e, 0x00, 0x24, 0x00, 0x24, 0x2a, 0x06,
+    0x00, 0x02, 0x1b, 0x00, 0x03, 0x02, 0x00, 0x03,
+    0x02, 0x00, 0x03, 0x1b, 0x00, 0x04, 0x1b, 0x00,
+    0x1b, 0x02, 0x00, 0x1b, 0x03, 0x00, 0x1b, 0x04,
+    0x02, 0x1b, 0x03, 0x02, 0x1b, 0x03, 0x03, 0x1b,
+    0x20, 0x03, 0x1b, 0x1f, 0x09, 0x03, 0x02, 0x09,
+    0x02, 0x03, 0x09, 0x02, 0x1f, 0x09, 0x1b, 0x03,
+    0x09, 0x1b, 0x03, 0x09, 0x1b, 0x02, 0x09, 0x1b,
+    0x1b, 0x09, 0x1b, 0x1b, 0x0b, 0x03, 0x03, 0x0b,
+    0x03, 0x03, 0x0b, 0x1b, 0x1b, 0x0a, 0x03, 0x1b,
+    0x0a, 0x03, 0x1b, 0x0a, 0x02, 0x20, 0x0a, 0x1b,
+    0x04, 0x0a, 0x1b, 0x04, 0x0a, 0x1b, 0x1b, 0x0a,
+    0x1b, 0x1b, 0x0c, 0x03, 0x1f, 0x0c, 0x04, 0x1b,
+    0x0c, 0x04, 0x1b, 0x0d, 0x1b, 0x03, 0x0d, 0x1b,
+    0x03, 0x0d, 0x1b, 0x1b, 0x0d, 0x1b, 0x20, 0x0f,
+    0x02, 0x1b, 0x0f, 0x1b, 0x1b, 0x0f, 0x1b, 0x1b,
+    0x0f, 0x1b, 0x1f, 0x10, 0x1b, 0x1b, 0x10, 0x1b,
+    0x20, 0x10, 0x1b, 0x1f, 0x17, 0x04, 0x1b, 0x17,
+    0x04, 0x1b, 0x18, 0x1b, 0x03, 0x18, 0x1b, 0x1b,
+    0x1a, 0x03, 0x1b, 0x1a, 0x03, 0x20, 0x1a, 0x03,
+    0x1f, 0x1a, 0x02, 0x02, 0x1a, 0x02, 0x02, 0x1a,
+    0x04, 0x1b, 0x1a, 0x04, 0x1b, 0x1a, 0x1b, 0x03,
+    0x1a, 0x1b, 0x03, 0x1b, 0x03, 0x02, 0x1b, 0x03,
+    0x1b, 0x1b, 0x03, 0x20, 0x1b, 0x02, 0x03, 0x1b,
+    0x02, 0x1b, 0x1b, 0x04, 0x02, 0x1b, 0x04, 0x1b,
+    0x28, 0x06, 0x1d, 0x04, 0x06, 0x1f, 0x1d, 0x04,
+    0x1f, 0x1d, 0x1d, 0x1e, 0x05, 0x1d, 0x1e, 0x05,
+    0x21, 0x1e, 0x04, 0x1d, 0x1e, 0x04, 0x1d, 0x1e,
+    0x04, 0x21, 0x1e, 0x1d, 0x22, 0x1e, 0x1d, 0x21,
+    0x22, 0x1d, 0x1d, 0x22, 0x1d, 0x1d, 0x00, 0x06,
+    0x22, 0x02, 0x04, 0x22, 0x02, 0x04, 0x21, 0x02,
+    0x06, 0x22, 0x02, 0x06, 0x21, 0x02, 0x1d, 0x22,
+    0x02, 0x1d, 0x21, 0x04, 0x1d, 0x22, 0x04, 0x05,
+    0x21, 0x04, 0x1d, 0x21, 0x0b, 0x06, 0x21, 0x0d,
+    0x05, 0x22, 0x0c, 0x05, 0x22, 0x0e, 0x05, 0x22,
+    0x1c, 0x04, 0x22, 0x1c, 0x1d, 0x22, 0x22, 0x05,
+    0x22, 0x22, 0x04, 0x22, 0x22, 0x1d, 0x22, 0x1d,
+    0x1d, 0x22, 0x1a, 0x1d, 0x22, 0x1e, 0x05, 0x22,
+    0x1a, 0x1d, 0x05, 0x1c, 0x05, 0x1d, 0x11, 0x1d,
+    0x22, 0x1b, 0x1d, 0x22, 0x1e, 0x04, 0x05, 0x1d,
+    0x06, 0x22, 0x1c, 0x04, 0x1d, 0x1b, 0x1d, 0x1d,
+    0x1c, 0x04, 0x1d, 0x1e, 0x04, 0x05, 0x04, 0x05,
+    0x22, 0x05, 0x04, 0x22, 0x1d, 0x04, 0x22, 0x19,
+    0x1d, 0x22, 0x00, 0x05, 0x22, 0x1b, 0x1d, 0x1d,
+    0x11, 0x04, 0x1d, 0x0d, 0x1d, 0x1d, 0x0b, 0x06,
+    0x22, 0x1e, 0x04, 0x22, 0x35, 0x06, 0x00, 0x0f,
+    0x9d, 0x0d, 0x0f, 0x9d, 0x27, 0x06, 0x00, 0x1d,
+    0x1d, 0x20, 0x00, 0x1c, 0x01, 0x0a, 0x1e, 0x06,
+    0x1e, 0x08, 0x0e, 0x1d, 0x12, 0x1e, 0x0a, 0x0c,
+    0x21, 0x1d, 0x12, 0x1d, 0x23, 0x20, 0x21, 0x0c,
+    0x1d, 0x1e, 0x35, 0x06, 0x00, 0x0f, 0x14, 0x27,
+    0x06, 0x0e, 0x1d, 0x22, 0xff, 0x00, 0x1d, 0x1d,
+    0x20, 0xff, 0x12, 0x1d, 0x23, 0x20, 0xff, 0x21,
+    0x0c, 0x1d, 0x1e, 0x27, 0x06, 0x05, 0x1d, 0xff,
+    0x05, 0x1d, 0x00, 0x1d, 0x20, 0x27, 0x06, 0x0a,
+    0xa5, 0x00, 0x1d, 0x2c, 0x00, 0x01, 0x30, 0x02,
+    0x30, 0x3a, 0x00, 0x3b, 0x00, 0x21, 0x00, 0x3f,
+    0x00, 0x16, 0x30, 0x17, 0x30, 0x26, 0x20, 0x13,
+    0x20, 0x12, 0x01, 0x00, 0x5f, 0x5f, 0x28, 0x29,
+    0x7b, 0x7d, 0x08, 0x30, 0x0c, 0x0d, 0x08, 0x09,
+    0x02, 0x03, 0x00, 0x01, 0x04, 0x05, 0x06, 0x07,
+    0x5b, 0x00, 0x5d, 0x00, 0x3e, 0x20, 0x3e, 0x20,
+    0x3e, 0x20, 0x3e, 0x20, 0x5f, 0x00, 0x5f, 0x00,
+    0x5f, 0x00, 0x2c, 0x00, 0x01, 0x30, 0x2e, 0x00,
+    0x00, 0x00, 0x3b, 0x00, 0x3a, 0x00, 0x3f, 0x00,
+    0x21, 0x00, 0x14, 0x20, 0x28, 0x00, 0x29, 0x00,
+    0x7b, 0x00, 0x7d, 0x00, 0x14, 0x30, 0x15, 0x30,
+    0x23, 0x26, 0x2a, 0x2b, 0x2d, 0x3c, 0x3e, 0x3d,
+    0x00, 0x5c, 0x24, 0x25, 0x40, 0x40, 0x06, 0xff,
+    0x0b, 0x00, 0x0b, 0xff, 0x0c, 0x20, 0x00, 0x4d,
+    0x06, 0x40, 0x06, 0xff, 0x0e, 0x00, 0x0e, 0xff,
+    0x0f, 0x00, 0x0f, 0xff, 0x10, 0x00, 0x10, 0xff,
+    0x11, 0x00, 0x11, 0xff, 0x12, 0x00, 0x12, 0x21,
+    0x06, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03,
+    0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06,
+    0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09,
+    0x09, 0x09, 0x0a, 0x0a, 0x0a, 0x0a, 0x0b, 0x0b,
+    0x0b, 0x0b, 0x0c, 0x0c, 0x0c, 0x0c, 0x0d, 0x0d,
+    0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x10, 0x10,
+    0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13,
+    0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15,
+    0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17,
+    0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19,
+    0x19, 0x19, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21,
+    0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23,
+    0x23, 0x23, 0x24, 0x24, 0x24, 0x24, 0x25, 0x25,
+    0x25, 0x25, 0x26, 0x26, 0x26, 0x26, 0x27, 0x27,
+    0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x22, 0x06,
+    0x22, 0x00, 0x22, 0x00, 0x22, 0x01, 0x22, 0x01,
+    0x22, 0x03, 0x22, 0x03, 0x22, 0x05, 0x22, 0x05,
+    0x21, 0x00, 0x85, 0x29, 0x01, 0x30, 0x01, 0x0b,
+    0x0c, 0x00, 0xfa, 0xf1, 0xa0, 0xa2, 0xa4, 0xa6,
+    0xa8, 0xe2, 0xe4, 0xe6, 0xc2, 0xfb, 0xa1, 0xa3,
+    0xa5, 0xa7, 0xa9, 0xaa, 0xac, 0xae, 0xb0, 0xb2,
+    0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc3,
+    0xc5, 0xc7, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce,
+    0xd1, 0xd4, 0xd7, 0xda, 0xdd, 0xde, 0xdf, 0xe0,
+    0xe1, 0xe3, 0xe5, 0xe7, 0xe8, 0xe9, 0xea, 0xeb,
+    0xec, 0xee, 0xf2, 0x98, 0x99, 0x31, 0x31, 0x4f,
+    0x31, 0x55, 0x31, 0x5b, 0x31, 0x61, 0x31, 0xa2,
+    0x00, 0xa3, 0x00, 0xac, 0x00, 0xaf, 0x00, 0xa6,
+    0x00, 0xa5, 0x00, 0xa9, 0x20, 0x00, 0x00, 0x02,
+    0x25, 0x90, 0x21, 0x91, 0x21, 0x92, 0x21, 0x93,
+    0x21, 0xa0, 0x25, 0xcb, 0x25, 0x99, 0x10, 0xba,
+    0x10, 0x00, 0x00, 0x00, 0x00, 0x9b, 0x10, 0xba,
+    0x10, 0x05, 0x05, 0xa5, 0x10, 0xba, 0x10, 0x05,
+    0x31, 0x11, 0x27, 0x11, 0x32, 0x11, 0x27, 0x11,
+    0x55, 0x47, 0x13, 0x3e, 0x13, 0x47, 0x13, 0x57,
+    0x13, 0x55, 0xb9, 0x14, 0xba, 0x14, 0xb9, 0x14,
+    0xb0, 0x14, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x14,
+    0xbd, 0x14, 0x55, 0x50, 0xb8, 0x15, 0xaf, 0x15,
+    0xb9, 0x15, 0xaf, 0x15, 0x55, 0x35, 0x19, 0x30,
+    0x19, 0x05, 0x57, 0xd1, 0x65, 0xd1, 0x58, 0xd1,
+    0x65, 0xd1, 0x5f, 0xd1, 0x6e, 0xd1, 0x5f, 0xd1,
+    0x6f, 0xd1, 0x5f, 0xd1, 0x70, 0xd1, 0x5f, 0xd1,
+    0x71, 0xd1, 0x5f, 0xd1, 0x72, 0xd1, 0x55, 0x55,
+    0x55, 0x05, 0xb9, 0xd1, 0x65, 0xd1, 0xba, 0xd1,
+    0x65, 0xd1, 0xbb, 0xd1, 0x6e, 0xd1, 0xbc, 0xd1,
+    0x6e, 0xd1, 0xbb, 0xd1, 0x6f, 0xd1, 0xbc, 0xd1,
+    0x6f, 0xd1, 0x55, 0x55, 0x55, 0x41, 0x00, 0x61,
+    0x00, 0x41, 0x00, 0x61, 0x00, 0x69, 0x00, 0x41,
+    0x00, 0x61, 0x00, 0x41, 0x00, 0x43, 0x44, 0x00,
+    0x00, 0x47, 0x00, 0x00, 0x4a, 0x4b, 0x00, 0x00,
+    0x4e, 0x4f, 0x50, 0x51, 0x00, 0x53, 0x54, 0x55,
+    0x56, 0x57, 0x58, 0x59, 0x5a, 0x61, 0x62, 0x63,
+    0x64, 0x00, 0x66, 0x68, 0x00, 0x70, 0x00, 0x41,
+    0x00, 0x61, 0x00, 0x41, 0x42, 0x00, 0x44, 0x45,
+    0x46, 0x47, 0x4a, 0x00, 0x53, 0x00, 0x61, 0x00,
+    0x41, 0x42, 0x00, 0x44, 0x45, 0x46, 0x47, 0x00,
+    0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x00, 0x4f, 0x53,
+    0x00, 0x61, 0x00, 0x41, 0x00, 0x61, 0x00, 0x41,
+    0x00, 0x61, 0x00, 0x41, 0x00, 0x61, 0x00, 0x41,
+    0x00, 0x61, 0x00, 0x41, 0x00, 0x61, 0x00, 0x41,
+    0x00, 0x61, 0x00, 0x31, 0x01, 0x37, 0x02, 0x91,
+    0x03, 0xa3, 0x03, 0xb1, 0x03, 0xd1, 0x03, 0x24,
+    0x00, 0x1f, 0x04, 0x20, 0x05, 0x91, 0x03, 0xa3,
+    0x03, 0xb1, 0x03, 0xd1, 0x03, 0x24, 0x00, 0x1f,
+    0x04, 0x20, 0x05, 0x91, 0x03, 0xa3, 0x03, 0xb1,
+    0x03, 0xd1, 0x03, 0x24, 0x00, 0x1f, 0x04, 0x20,
+    0x05, 0x91, 0x03, 0xa3, 0x03, 0xb1, 0x03, 0xd1,
+    0x03, 0x24, 0x00, 0x1f, 0x04, 0x20, 0x05, 0x91,
+    0x03, 0xa3, 0x03, 0xb1, 0x03, 0xd1, 0x03, 0x24,
+    0x00, 0x1f, 0x04, 0x20, 0x05, 0x0b, 0x0c, 0x30,
+    0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30,
+    0x00, 0x27, 0x06, 0x00, 0x01, 0x05, 0x08, 0x2a,
+    0x06, 0x1e, 0x08, 0x03, 0x0d, 0x20, 0x19, 0x1a,
+    0x1b, 0x1c, 0x09, 0x0f, 0x17, 0x0b, 0x18, 0x07,
+    0x0a, 0x00, 0x01, 0x04, 0x06, 0x0c, 0x0e, 0x10,
+    0x44, 0x90, 0x77, 0x45, 0x28, 0x06, 0x2c, 0x06,
+    0x00, 0x00, 0x47, 0x06, 0x33, 0x06, 0x17, 0x10,
+    0x11, 0x12, 0x13, 0x00, 0x06, 0x0e, 0x02, 0x0f,
+    0x34, 0x06, 0x2a, 0x06, 0x2b, 0x06, 0x2e, 0x06,
+    0x00, 0x00, 0x36, 0x06, 0x00, 0x00, 0x3a, 0x06,
+    0x2d, 0x06, 0x00, 0x00, 0x4a, 0x06, 0x00, 0x00,
+    0x44, 0x06, 0x00, 0x00, 0x46, 0x06, 0x33, 0x06,
+    0x39, 0x06, 0x00, 0x00, 0x35, 0x06, 0x42, 0x06,
+    0x00, 0x00, 0x34, 0x06, 0x00, 0x00, 0x00, 0x00,
+    0x2e, 0x06, 0x00, 0x00, 0x36, 0x06, 0x00, 0x00,
+    0x3a, 0x06, 0x00, 0x00, 0xba, 0x06, 0x00, 0x00,
+    0x6f, 0x06, 0x00, 0x00, 0x28, 0x06, 0x2c, 0x06,
+    0x00, 0x00, 0x47, 0x06, 0x00, 0x00, 0x00, 0x00,
+    0x2d, 0x06, 0x37, 0x06, 0x4a, 0x06, 0x43, 0x06,
+    0x00, 0x00, 0x45, 0x06, 0x46, 0x06, 0x33, 0x06,
+    0x39, 0x06, 0x41, 0x06, 0x35, 0x06, 0x42, 0x06,
+    0x00, 0x00, 0x34, 0x06, 0x2a, 0x06, 0x2b, 0x06,
+    0x2e, 0x06, 0x00, 0x00, 0x36, 0x06, 0x38, 0x06,
+    0x3a, 0x06, 0x6e, 0x06, 0x00, 0x00, 0xa1, 0x06,
+    0x27, 0x06, 0x00, 0x01, 0x05, 0x08, 0x20, 0x21,
+    0x0b, 0x06, 0x10, 0x23, 0x2a, 0x06, 0x1a, 0x1b,
     0x1c, 0x09, 0x0f, 0x17, 0x0b, 0x18, 0x07, 0x0a,
-    0x00, 0x01, 0x04, 0x06, 0x0c, 0x0e, 0x10, 0x44,
-    0x90, 0x77, 0x45, 0x28, 0x06, 0x2c, 0x06, 0x00,
-    0x00, 0x47, 0x06, 0x33, 0x06, 0x17, 0x10, 0x11,
-    0x12, 0x13, 0x00, 0x06, 0x0e, 0x02, 0x0f, 0x34,
-    0x06, 0x2a, 0x06, 0x2b, 0x06, 0x2e, 0x06, 0x00,
-    0x00, 0x36, 0x06, 0x00, 0x00, 0x3a, 0x06, 0x2d,
-    0x06, 0x00, 0x00, 0x4a, 0x06, 0x00, 0x00, 0x44,
-    0x06, 0x00, 0x00, 0x46, 0x06, 0x33, 0x06, 0x39,
-    0x06, 0x00, 0x00, 0x35, 0x06, 0x42, 0x06, 0x00,
-    0x00, 0x34, 0x06, 0x00, 0x00, 0x00, 0x00, 0x2e,
-    0x06, 0x00, 0x00, 0x36, 0x06, 0x00, 0x00, 0x3a,
-    0x06, 0x00, 0x00, 0xba, 0x06, 0x00, 0x00, 0x6f,
-    0x06, 0x00, 0x00, 0x28, 0x06, 0x2c, 0x06, 0x00,
-    0x00, 0x47, 0x06, 0x00, 0x00, 0x00, 0x00, 0x2d,
-    0x06, 0x37, 0x06, 0x4a, 0x06, 0x43, 0x06, 0x00,
-    0x00, 0x45, 0x06, 0x46, 0x06, 0x33, 0x06, 0x39,
-    0x06, 0x41, 0x06, 0x35, 0x06, 0x42, 0x06, 0x00,
-    0x00, 0x34, 0x06, 0x2a, 0x06, 0x2b, 0x06, 0x2e,
-    0x06, 0x00, 0x00, 0x36, 0x06, 0x38, 0x06, 0x3a,
-    0x06, 0x6e, 0x06, 0x00, 0x00, 0xa1, 0x06, 0x27,
-    0x06, 0x00, 0x01, 0x05, 0x08, 0x20, 0x21, 0x0b,
-    0x06, 0x10, 0x23, 0x2a, 0x06, 0x1a, 0x1b, 0x1c,
-    0x09, 0x0f, 0x17, 0x0b, 0x18, 0x07, 0x0a, 0x00,
-    0x01, 0x04, 0x06, 0x0c, 0x0e, 0x10, 0x28, 0x06,
-    0x2c, 0x06, 0x2f, 0x06, 0x00, 0x00, 0x48, 0x06,
-    0x32, 0x06, 0x2d, 0x06, 0x37, 0x06, 0x4a, 0x06,
-    0x2a, 0x06, 0x1a, 0x1b, 0x1c, 0x09, 0x0f, 0x17,
-    0x0b, 0x18, 0x07, 0x0a, 0x00, 0x01, 0x04, 0x06,
-    0x0c, 0x0e, 0x10, 0x30, 0x2e, 0x30, 0x00, 0x2c,
-    0x00, 0x28, 0x00, 0x41, 0x00, 0x29, 0x00, 0x14,
-    0x30, 0x53, 0x00, 0x15, 0x30, 0x43, 0x52, 0x43,
-    0x44, 0x57, 0x5a, 0x41, 0x00, 0x48, 0x56, 0x4d,
-    0x56, 0x53, 0x44, 0x53, 0x53, 0x50, 0x50, 0x56,
-    0x57, 0x43, 0x4d, 0x43, 0x4d, 0x44, 0x4d, 0x52,
-    0x44, 0x4a, 0x4b, 0x30, 0x30, 0x00, 0x68, 0x68,
-    0x4b, 0x62, 0x57, 0x5b, 0xcc, 0x53, 0xc7, 0x30,
-    0x8c, 0x4e, 0x1a, 0x59, 0xe3, 0x89, 0x29, 0x59,
-    0xa4, 0x4e, 0x20, 0x66, 0x21, 0x71, 0x99, 0x65,
-    0x4d, 0x52, 0x8c, 0x5f, 0x8d, 0x51, 0xb0, 0x65,
-    0x1d, 0x52, 0x42, 0x7d, 0x1f, 0x75, 0xa9, 0x8c,
-    0xf0, 0x58, 0x39, 0x54, 0x14, 0x6f, 0x95, 0x62,
-    0x55, 0x63, 0x00, 0x4e, 0x09, 0x4e, 0x4a, 0x90,
-    0xe6, 0x5d, 0x2d, 0x4e, 0xf3, 0x53, 0x07, 0x63,
-    0x70, 0x8d, 0x53, 0x62, 0x81, 0x79, 0x7a, 0x7a,
-    0x08, 0x54, 0x80, 0x6e, 0x09, 0x67, 0x08, 0x67,
-    0x33, 0x75, 0x72, 0x52, 0xb6, 0x55, 0x4d, 0x91,
-    0x14, 0x30, 0x15, 0x30, 0x2c, 0x67, 0x09, 0x4e,
-    0x8c, 0x4e, 0x89, 0x5b, 0xb9, 0x70, 0x53, 0x62,
-    0xd7, 0x76, 0xdd, 0x52, 0x57, 0x65, 0x97, 0x5f,
-    0xef, 0x53, 0x30, 0x00, 0x38, 0x4e, 0x05, 0x00,
-    0x09, 0x22, 0x01, 0x60, 0x4f, 0xae, 0x4f, 0xbb,
-    0x4f, 0x02, 0x50, 0x7a, 0x50, 0x99, 0x50, 0xe7,
-    0x50, 0xcf, 0x50, 0x9e, 0x34, 0x3a, 0x06, 0x4d,
-    0x51, 0x54, 0x51, 0x64, 0x51, 0x77, 0x51, 0x1c,
-    0x05, 0xb9, 0x34, 0x67, 0x51, 0x8d, 0x51, 0x4b,
-    0x05, 0x97, 0x51, 0xa4, 0x51, 0xcc, 0x4e, 0xac,
-    0x51, 0xb5, 0x51, 0xdf, 0x91, 0xf5, 0x51, 0x03,
-    0x52, 0xdf, 0x34, 0x3b, 0x52, 0x46, 0x52, 0x72,
-    0x52, 0x77, 0x52, 0x15, 0x35, 0x02, 0x00, 0x20,
-    0x80, 0x80, 0x00, 0x08, 0x00, 0x00, 0xc7, 0x52,
-    0x00, 0x02, 0x1d, 0x33, 0x3e, 0x3f, 0x50, 0x82,
-    0x8a, 0x93, 0xac, 0xb6, 0xb8, 0xb8, 0xb8, 0x2c,
-    0x0a, 0x70, 0x70, 0xca, 0x53, 0xdf, 0x53, 0x63,
-    0x0b, 0xeb, 0x53, 0xf1, 0x53, 0x06, 0x54, 0x9e,
-    0x54, 0x38, 0x54, 0x48, 0x54, 0x68, 0x54, 0xa2,
-    0x54, 0xf6, 0x54, 0x10, 0x55, 0x53, 0x55, 0x63,
-    0x55, 0x84, 0x55, 0x84, 0x55, 0x99, 0x55, 0xab,
-    0x55, 0xb3, 0x55, 0xc2, 0x55, 0x16, 0x57, 0x06,
-    0x56, 0x17, 0x57, 0x51, 0x56, 0x74, 0x56, 0x07,
-    0x52, 0xee, 0x58, 0xce, 0x57, 0xf4, 0x57, 0x0d,
-    0x58, 0x8b, 0x57, 0x32, 0x58, 0x31, 0x58, 0xac,
-    0x58, 0xe4, 0x14, 0xf2, 0x58, 0xf7, 0x58, 0x06,
-    0x59, 0x1a, 0x59, 0x22, 0x59, 0x62, 0x59, 0xa8,
-    0x16, 0xea, 0x16, 0xec, 0x59, 0x1b, 0x5a, 0x27,
-    0x5a, 0xd8, 0x59, 0x66, 0x5a, 0xee, 0x36, 0xfc,
-    0x36, 0x08, 0x5b, 0x3e, 0x5b, 0x3e, 0x5b, 0xc8,
-    0x19, 0xc3, 0x5b, 0xd8, 0x5b, 0xe7, 0x5b, 0xf3,
-    0x5b, 0x18, 0x1b, 0xff, 0x5b, 0x06, 0x5c, 0x53,
-    0x5f, 0x22, 0x5c, 0x81, 0x37, 0x60, 0x5c, 0x6e,
-    0x5c, 0xc0, 0x5c, 0x8d, 0x5c, 0xe4, 0x1d, 0x43,
-    0x5d, 0xe6, 0x1d, 0x6e, 0x5d, 0x6b, 0x5d, 0x7c,
-    0x5d, 0xe1, 0x5d, 0xe2, 0x5d, 0x2f, 0x38, 0xfd,
-    0x5d, 0x28, 0x5e, 0x3d, 0x5e, 0x69, 0x5e, 0x62,
-    0x38, 0x83, 0x21, 0x7c, 0x38, 0xb0, 0x5e, 0xb3,
-    0x5e, 0xb6, 0x5e, 0xca, 0x5e, 0x92, 0xa3, 0xfe,
-    0x5e, 0x31, 0x23, 0x31, 0x23, 0x01, 0x82, 0x22,
-    0x5f, 0x22, 0x5f, 0xc7, 0x38, 0xb8, 0x32, 0xda,
-    0x61, 0x62, 0x5f, 0x6b, 0x5f, 0xe3, 0x38, 0x9a,
-    0x5f, 0xcd, 0x5f, 0xd7, 0x5f, 0xf9, 0x5f, 0x81,
-    0x60, 0x3a, 0x39, 0x1c, 0x39, 0x94, 0x60, 0xd4,
-    0x26, 0xc7, 0x60, 0x02, 0x02, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0a, 0x00,
-    0x00, 0x02, 0x08, 0x00, 0x80, 0x08, 0x00, 0x00,
-    0x08, 0x80, 0x28, 0x80, 0x02, 0x00, 0x00, 0x02,
-    0x48, 0x61, 0x00, 0x04, 0x06, 0x04, 0x32, 0x46,
-    0x6a, 0x5c, 0x67, 0x96, 0xaa, 0xae, 0xc8, 0xd3,
-    0x5d, 0x62, 0x00, 0x54, 0x77, 0xf3, 0x0c, 0x2b,
-    0x3d, 0x63, 0xfc, 0x62, 0x68, 0x63, 0x83, 0x63,
-    0xe4, 0x63, 0xf1, 0x2b, 0x22, 0x64, 0xc5, 0x63,
-    0xa9, 0x63, 0x2e, 0x3a, 0x69, 0x64, 0x7e, 0x64,
-    0x9d, 0x64, 0x77, 0x64, 0x6c, 0x3a, 0x4f, 0x65,
-    0x6c, 0x65, 0x0a, 0x30, 0xe3, 0x65, 0xf8, 0x66,
-    0x49, 0x66, 0x19, 0x3b, 0x91, 0x66, 0x08, 0x3b,
-    0xe4, 0x3a, 0x92, 0x51, 0x95, 0x51, 0x00, 0x67,
-    0x9c, 0x66, 0xad, 0x80, 0xd9, 0x43, 0x17, 0x67,
-    0x1b, 0x67, 0x21, 0x67, 0x5e, 0x67, 0x53, 0x67,
-    0xc3, 0x33, 0x49, 0x3b, 0xfa, 0x67, 0x85, 0x67,
-    0x52, 0x68, 0x85, 0x68, 0x6d, 0x34, 0x8e, 0x68,
-    0x1f, 0x68, 0x14, 0x69, 0x9d, 0x3b, 0x42, 0x69,
-    0xa3, 0x69, 0xea, 0x69, 0xa8, 0x6a, 0xa3, 0x36,
-    0xdb, 0x6a, 0x18, 0x3c, 0x21, 0x6b, 0xa7, 0x38,
-    0x54, 0x6b, 0x4e, 0x3c, 0x72, 0x6b, 0x9f, 0x6b,
-    0xba, 0x6b, 0xbb, 0x6b, 0x8d, 0x3a, 0x0b, 0x1d,
-    0xfa, 0x3a, 0x4e, 0x6c, 0xbc, 0x3c, 0xbf, 0x6c,
-    0xcd, 0x6c, 0x67, 0x6c, 0x16, 0x6d, 0x3e, 0x6d,
-    0x77, 0x6d, 0x41, 0x6d, 0x69, 0x6d, 0x78, 0x6d,
-    0x85, 0x6d, 0x1e, 0x3d, 0x34, 0x6d, 0x2f, 0x6e,
-    0x6e, 0x6e, 0x33, 0x3d, 0xcb, 0x6e, 0xc7, 0x6e,
-    0xd1, 0x3e, 0xf9, 0x6d, 0x6e, 0x6f, 0x5e, 0x3f,
-    0x8e, 0x3f, 0xc6, 0x6f, 0x39, 0x70, 0x1e, 0x70,
-    0x1b, 0x70, 0x96, 0x3d, 0x4a, 0x70, 0x7d, 0x70,
-    0x77, 0x70, 0xad, 0x70, 0x25, 0x05, 0x45, 0x71,
-    0x63, 0x42, 0x9c, 0x71, 0xab, 0x43, 0x28, 0x72,
-    0x35, 0x72, 0x50, 0x72, 0x08, 0x46, 0x80, 0x72,
-    0x95, 0x72, 0x35, 0x47, 0x02, 0x20, 0x00, 0x00,
-    0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00,
-    0x00, 0x02, 0x02, 0x80, 0x8a, 0x00, 0x00, 0x20,
-    0x00, 0x08, 0x0a, 0x00, 0x80, 0x88, 0x80, 0x20,
-    0x14, 0x48, 0x7a, 0x73, 0x8b, 0x73, 0xac, 0x3e,
-    0xa5, 0x73, 0xb8, 0x3e, 0xb8, 0x3e, 0x47, 0x74,
-    0x5c, 0x74, 0x71, 0x74, 0x85, 0x74, 0xca, 0x74,
-    0x1b, 0x3f, 0x24, 0x75, 0x36, 0x4c, 0x3e, 0x75,
-    0x92, 0x4c, 0x70, 0x75, 0x9f, 0x21, 0x10, 0x76,
-    0xa1, 0x4f, 0xb8, 0x4f, 0x44, 0x50, 0xfc, 0x3f,
-    0x08, 0x40, 0xf4, 0x76, 0xf3, 0x50, 0xf2, 0x50,
-    0x19, 0x51, 0x33, 0x51, 0x1e, 0x77, 0x1f, 0x77,
-    0x1f, 0x77, 0x4a, 0x77, 0x39, 0x40, 0x8b, 0x77,
-    0x46, 0x40, 0x96, 0x40, 0x1d, 0x54, 0x4e, 0x78,
-    0x8c, 0x78, 0xcc, 0x78, 0xe3, 0x40, 0x26, 0x56,
-    0x56, 0x79, 0x9a, 0x56, 0xc5, 0x56, 0x8f, 0x79,
-    0xeb, 0x79, 0x2f, 0x41, 0x40, 0x7a, 0x4a, 0x7a,
-    0x4f, 0x7a, 0x7c, 0x59, 0xa7, 0x5a, 0xa7, 0x5a,
-    0xee, 0x7a, 0x02, 0x42, 0xab, 0x5b, 0xc6, 0x7b,
-    0xc9, 0x7b, 0x27, 0x42, 0x80, 0x5c, 0xd2, 0x7c,
-    0xa0, 0x42, 0xe8, 0x7c, 0xe3, 0x7c, 0x00, 0x7d,
-    0x86, 0x5f, 0x63, 0x7d, 0x01, 0x43, 0xc7, 0x7d,
-    0x02, 0x7e, 0x45, 0x7e, 0x34, 0x43, 0x28, 0x62,
-    0x47, 0x62, 0x59, 0x43, 0xd9, 0x62, 0x7a, 0x7f,
-    0x3e, 0x63, 0x95, 0x7f, 0xfa, 0x7f, 0x05, 0x80,
-    0xda, 0x64, 0x23, 0x65, 0x60, 0x80, 0xa8, 0x65,
-    0x70, 0x80, 0x5f, 0x33, 0xd5, 0x43, 0xb2, 0x80,
-    0x03, 0x81, 0x0b, 0x44, 0x3e, 0x81, 0xb5, 0x5a,
-    0xa7, 0x67, 0xb5, 0x67, 0x93, 0x33, 0x9c, 0x33,
-    0x01, 0x82, 0x04, 0x82, 0x9e, 0x8f, 0x6b, 0x44,
-    0x91, 0x82, 0x8b, 0x82, 0x9d, 0x82, 0xb3, 0x52,
-    0xb1, 0x82, 0xb3, 0x82, 0xbd, 0x82, 0xe6, 0x82,
-    0x3c, 0x6b, 0xe5, 0x82, 0x1d, 0x83, 0x63, 0x83,
-    0xad, 0x83, 0x23, 0x83, 0xbd, 0x83, 0xe7, 0x83,
-    0x57, 0x84, 0x53, 0x83, 0xca, 0x83, 0xcc, 0x83,
-    0xdc, 0x83, 0x36, 0x6c, 0x6b, 0x6d, 0x02, 0x00,
-    0x00, 0x20, 0x22, 0x2a, 0xa0, 0x0a, 0x00, 0x20,
-    0x80, 0x28, 0x00, 0xa8, 0x20, 0x20, 0x00, 0x02,
-    0x80, 0x22, 0x02, 0x8a, 0x08, 0x00, 0xaa, 0x00,
-    0x00, 0x00, 0x02, 0x00, 0x00, 0x28, 0xd5, 0x6c,
-    0x2b, 0x45, 0xf1, 0x84, 0xf3, 0x84, 0x16, 0x85,
-    0xca, 0x73, 0x64, 0x85, 0x2c, 0x6f, 0x5d, 0x45,
-    0x61, 0x45, 0xb1, 0x6f, 0xd2, 0x70, 0x6b, 0x45,
-    0x50, 0x86, 0x5c, 0x86, 0x67, 0x86, 0x69, 0x86,
-    0xa9, 0x86, 0x88, 0x86, 0x0e, 0x87, 0xe2, 0x86,
-    0x79, 0x87, 0x28, 0x87, 0x6b, 0x87, 0x86, 0x87,
-    0xd7, 0x45, 0xe1, 0x87, 0x01, 0x88, 0xf9, 0x45,
-    0x60, 0x88, 0x63, 0x88, 0x67, 0x76, 0xd7, 0x88,
-    0xde, 0x88, 0x35, 0x46, 0xfa, 0x88, 0xbb, 0x34,
-    0xae, 0x78, 0x66, 0x79, 0xbe, 0x46, 0xc7, 0x46,
-    0xa0, 0x8a, 0xed, 0x8a, 0x8a, 0x8b, 0x55, 0x8c,
-    0xa8, 0x7c, 0xab, 0x8c, 0xc1, 0x8c, 0x1b, 0x8d,
-    0x77, 0x8d, 0x2f, 0x7f, 0x04, 0x08, 0xcb, 0x8d,
-    0xbc, 0x8d, 0xf0, 0x8d, 0xde, 0x08, 0xd4, 0x8e,
-    0x38, 0x8f, 0xd2, 0x85, 0xed, 0x85, 0x94, 0x90,
-    0xf1, 0x90, 0x11, 0x91, 0x2e, 0x87, 0x1b, 0x91,
-    0x38, 0x92, 0xd7, 0x92, 0xd8, 0x92, 0x7c, 0x92,
-    0xf9, 0x93, 0x15, 0x94, 0xfa, 0x8b, 0x8b, 0x95,
-    0x95, 0x49, 0xb7, 0x95, 0x77, 0x8d, 0xe6, 0x49,
-    0xc3, 0x96, 0xb2, 0x5d, 0x23, 0x97, 0x45, 0x91,
-    0x1a, 0x92, 0x6e, 0x4a, 0x76, 0x4a, 0xe0, 0x97,
-    0x0a, 0x94, 0xb2, 0x4a, 0x96, 0x94, 0x0b, 0x98,
-    0x0b, 0x98, 0x29, 0x98, 0xb6, 0x95, 0xe2, 0x98,
-    0x33, 0x4b, 0x29, 0x99, 0xa7, 0x99, 0xc2, 0x99,
-    0xfe, 0x99, 0xce, 0x4b, 0x30, 0x9b, 0x12, 0x9b,
-    0x40, 0x9c, 0xfd, 0x9c, 0xce, 0x4c, 0xed, 0x4c,
-    0x67, 0x9d, 0xce, 0xa0, 0xf8, 0x4c, 0x05, 0xa1,
-    0x0e, 0xa2, 0x91, 0xa2, 0xbb, 0x9e, 0x56, 0x4d,
-    0xf9, 0x9e, 0xfe, 0x9e, 0x05, 0x9f, 0x0f, 0x9f,
-    0x16, 0x9f, 0x3b, 0x9f, 0x00, 0xa6, 0x02, 0x88,
-    0xa0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x28,
-    0x00, 0x08, 0xa0, 0x80, 0xa0, 0x80, 0x00, 0x80,
-    0x80, 0x00, 0x0a, 0x88, 0x80, 0x00, 0x80, 0x00,
-    0x20, 0x2a, 0x00, 0x80,
+    0x00, 0x01, 0x04, 0x06, 0x0c, 0x0e, 0x10, 0x28,
+    0x06, 0x2c, 0x06, 0x2f, 0x06, 0x00, 0x00, 0x48,
+    0x06, 0x32, 0x06, 0x2d, 0x06, 0x37, 0x06, 0x4a,
+    0x06, 0x2a, 0x06, 0x1a, 0x1b, 0x1c, 0x09, 0x0f,
+    0x17, 0x0b, 0x18, 0x07, 0x0a, 0x00, 0x01, 0x04,
+    0x06, 0x0c, 0x0e, 0x10, 0x30, 0x2e, 0x30, 0x00,
+    0x2c, 0x00, 0x28, 0x00, 0x41, 0x00, 0x29, 0x00,
+    0x14, 0x30, 0x53, 0x00, 0x15, 0x30, 0x43, 0x52,
+    0x43, 0x44, 0x57, 0x5a, 0x41, 0x00, 0x48, 0x56,
+    0x4d, 0x56, 0x53, 0x44, 0x53, 0x53, 0x50, 0x50,
+    0x56, 0x57, 0x43, 0x4d, 0x43, 0x4d, 0x44, 0x4d,
+    0x52, 0x44, 0x4a, 0x4b, 0x30, 0x30, 0x00, 0x68,
+    0x68, 0x4b, 0x62, 0x57, 0x5b, 0xcc, 0x53, 0xc7,
+    0x30, 0x8c, 0x4e, 0x1a, 0x59, 0xe3, 0x89, 0x29,
+    0x59, 0xa4, 0x4e, 0x20, 0x66, 0x21, 0x71, 0x99,
+    0x65, 0x4d, 0x52, 0x8c, 0x5f, 0x8d, 0x51, 0xb0,
+    0x65, 0x1d, 0x52, 0x42, 0x7d, 0x1f, 0x75, 0xa9,
+    0x8c, 0xf0, 0x58, 0x39, 0x54, 0x14, 0x6f, 0x95,
+    0x62, 0x55, 0x63, 0x00, 0x4e, 0x09, 0x4e, 0x4a,
+    0x90, 0xe6, 0x5d, 0x2d, 0x4e, 0xf3, 0x53, 0x07,
+    0x63, 0x70, 0x8d, 0x53, 0x62, 0x81, 0x79, 0x7a,
+    0x7a, 0x08, 0x54, 0x80, 0x6e, 0x09, 0x67, 0x08,
+    0x67, 0x33, 0x75, 0x72, 0x52, 0xb6, 0x55, 0x4d,
+    0x91, 0x14, 0x30, 0x15, 0x30, 0x2c, 0x67, 0x09,
+    0x4e, 0x8c, 0x4e, 0x89, 0x5b, 0xb9, 0x70, 0x53,
+    0x62, 0xd7, 0x76, 0xdd, 0x52, 0x57, 0x65, 0x97,
+    0x5f, 0xef, 0x53, 0x30, 0x00, 0x38, 0x4e, 0x05,
+    0x00, 0x09, 0x22, 0x01, 0x60, 0x4f, 0xae, 0x4f,
+    0xbb, 0x4f, 0x02, 0x50, 0x7a, 0x50, 0x99, 0x50,
+    0xe7, 0x50, 0xcf, 0x50, 0x9e, 0x34, 0x3a, 0x06,
+    0x4d, 0x51, 0x54, 0x51, 0x64, 0x51, 0x77, 0x51,
+    0x1c, 0x05, 0xb9, 0x34, 0x67, 0x51, 0x8d, 0x51,
+    0x4b, 0x05, 0x97, 0x51, 0xa4, 0x51, 0xcc, 0x4e,
+    0xac, 0x51, 0xb5, 0x51, 0xdf, 0x91, 0xf5, 0x51,
+    0x03, 0x52, 0xdf, 0x34, 0x3b, 0x52, 0x46, 0x52,
+    0x72, 0x52, 0x77, 0x52, 0x15, 0x35, 0x02, 0x00,
+    0x20, 0x80, 0x80, 0x00, 0x08, 0x00, 0x00, 0xc7,
+    0x52, 0x00, 0x02, 0x1d, 0x33, 0x3e, 0x3f, 0x50,
+    0x82, 0x8a, 0x93, 0xac, 0xb6, 0xb8, 0xb8, 0xb8,
+    0x2c, 0x0a, 0x70, 0x70, 0xca, 0x53, 0xdf, 0x53,
+    0x63, 0x0b, 0xeb, 0x53, 0xf1, 0x53, 0x06, 0x54,
+    0x9e, 0x54, 0x38, 0x54, 0x48, 0x54, 0x68, 0x54,
+    0xa2, 0x54, 0xf6, 0x54, 0x10, 0x55, 0x53, 0x55,
+    0x63, 0x55, 0x84, 0x55, 0x84, 0x55, 0x99, 0x55,
+    0xab, 0x55, 0xb3, 0x55, 0xc2, 0x55, 0x16, 0x57,
+    0x06, 0x56, 0x17, 0x57, 0x51, 0x56, 0x74, 0x56,
+    0x07, 0x52, 0xee, 0x58, 0xce, 0x57, 0xf4, 0x57,
+    0x0d, 0x58, 0x8b, 0x57, 0x32, 0x58, 0x31, 0x58,
+    0xac, 0x58, 0xe4, 0x14, 0xf2, 0x58, 0xf7, 0x58,
+    0x06, 0x59, 0x1a, 0x59, 0x22, 0x59, 0x62, 0x59,
+    0xa8, 0x16, 0xea, 0x16, 0xec, 0x59, 0x1b, 0x5a,
+    0x27, 0x5a, 0xd8, 0x59, 0x66, 0x5a, 0xee, 0x36,
+    0xfc, 0x36, 0x08, 0x5b, 0x3e, 0x5b, 0x3e, 0x5b,
+    0xc8, 0x19, 0xc3, 0x5b, 0xd8, 0x5b, 0xe7, 0x5b,
+    0xf3, 0x5b, 0x18, 0x1b, 0xff, 0x5b, 0x06, 0x5c,
+    0x53, 0x5f, 0x22, 0x5c, 0x81, 0x37, 0x60, 0x5c,
+    0x6e, 0x5c, 0xc0, 0x5c, 0x8d, 0x5c, 0xe4, 0x1d,
+    0x43, 0x5d, 0xe6, 0x1d, 0x6e, 0x5d, 0x6b, 0x5d,
+    0x7c, 0x5d, 0xe1, 0x5d, 0xe2, 0x5d, 0x2f, 0x38,
+    0xfd, 0x5d, 0x28, 0x5e, 0x3d, 0x5e, 0x69, 0x5e,
+    0x62, 0x38, 0x83, 0x21, 0x7c, 0x38, 0xb0, 0x5e,
+    0xb3, 0x5e, 0xb6, 0x5e, 0xca, 0x5e, 0x92, 0xa3,
+    0xfe, 0x5e, 0x31, 0x23, 0x31, 0x23, 0x01, 0x82,
+    0x22, 0x5f, 0x22, 0x5f, 0xc7, 0x38, 0xb8, 0x32,
+    0xda, 0x61, 0x62, 0x5f, 0x6b, 0x5f, 0xe3, 0x38,
+    0x9a, 0x5f, 0xcd, 0x5f, 0xd7, 0x5f, 0xf9, 0x5f,
+    0x81, 0x60, 0x3a, 0x39, 0x1c, 0x39, 0x94, 0x60,
+    0xd4, 0x26, 0xc7, 0x60, 0x02, 0x02, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0a,
+    0x00, 0x00, 0x02, 0x08, 0x00, 0x80, 0x08, 0x00,
+    0x00, 0x08, 0x80, 0x28, 0x80, 0x02, 0x00, 0x00,
+    0x02, 0x48, 0x61, 0x00, 0x04, 0x06, 0x04, 0x32,
+    0x46, 0x6a, 0x5c, 0x67, 0x96, 0xaa, 0xae, 0xc8,
+    0xd3, 0x5d, 0x62, 0x00, 0x54, 0x77, 0xf3, 0x0c,
+    0x2b, 0x3d, 0x63, 0xfc, 0x62, 0x68, 0x63, 0x83,
+    0x63, 0xe4, 0x63, 0xf1, 0x2b, 0x22, 0x64, 0xc5,
+    0x63, 0xa9, 0x63, 0x2e, 0x3a, 0x69, 0x64, 0x7e,
+    0x64, 0x9d, 0x64, 0x77, 0x64, 0x6c, 0x3a, 0x4f,
+    0x65, 0x6c, 0x65, 0x0a, 0x30, 0xe3, 0x65, 0xf8,
+    0x66, 0x49, 0x66, 0x19, 0x3b, 0x91, 0x66, 0x08,
+    0x3b, 0xe4, 0x3a, 0x92, 0x51, 0x95, 0x51, 0x00,
+    0x67, 0x9c, 0x66, 0xad, 0x80, 0xd9, 0x43, 0x17,
+    0x67, 0x1b, 0x67, 0x21, 0x67, 0x5e, 0x67, 0x53,
+    0x67, 0xc3, 0x33, 0x49, 0x3b, 0xfa, 0x67, 0x85,
+    0x67, 0x52, 0x68, 0x85, 0x68, 0x6d, 0x34, 0x8e,
+    0x68, 0x1f, 0x68, 0x14, 0x69, 0x9d, 0x3b, 0x42,
+    0x69, 0xa3, 0x69, 0xea, 0x69, 0xa8, 0x6a, 0xa3,
+    0x36, 0xdb, 0x6a, 0x18, 0x3c, 0x21, 0x6b, 0xa7,
+    0x38, 0x54, 0x6b, 0x4e, 0x3c, 0x72, 0x6b, 0x9f,
+    0x6b, 0xba, 0x6b, 0xbb, 0x6b, 0x8d, 0x3a, 0x0b,
+    0x1d, 0xfa, 0x3a, 0x4e, 0x6c, 0xbc, 0x3c, 0xbf,
+    0x6c, 0xcd, 0x6c, 0x67, 0x6c, 0x16, 0x6d, 0x3e,
+    0x6d, 0x77, 0x6d, 0x41, 0x6d, 0x69, 0x6d, 0x78,
+    0x6d, 0x85, 0x6d, 0x1e, 0x3d, 0x34, 0x6d, 0x2f,
+    0x6e, 0x6e, 0x6e, 0x33, 0x3d, 0xcb, 0x6e, 0xc7,
+    0x6e, 0xd1, 0x3e, 0xf9, 0x6d, 0x6e, 0x6f, 0x5e,
+    0x3f, 0x8e, 0x3f, 0xc6, 0x6f, 0x39, 0x70, 0x1e,
+    0x70, 0x1b, 0x70, 0x96, 0x3d, 0x4a, 0x70, 0x7d,
+    0x70, 0x77, 0x70, 0xad, 0x70, 0x25, 0x05, 0x45,
+    0x71, 0x63, 0x42, 0x9c, 0x71, 0xab, 0x43, 0x28,
+    0x72, 0x35, 0x72, 0x50, 0x72, 0x08, 0x46, 0x80,
+    0x72, 0x95, 0x72, 0x35, 0x47, 0x02, 0x20, 0x00,
+    0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80,
+    0x00, 0x00, 0x02, 0x02, 0x80, 0x8a, 0x00, 0x00,
+    0x20, 0x00, 0x08, 0x0a, 0x00, 0x80, 0x88, 0x80,
+    0x20, 0x14, 0x48, 0x7a, 0x73, 0x8b, 0x73, 0xac,
+    0x3e, 0xa5, 0x73, 0xb8, 0x3e, 0xb8, 0x3e, 0x47,
+    0x74, 0x5c, 0x74, 0x71, 0x74, 0x85, 0x74, 0xca,
+    0x74, 0x1b, 0x3f, 0x24, 0x75, 0x36, 0x4c, 0x3e,
+    0x75, 0x92, 0x4c, 0x70, 0x75, 0x9f, 0x21, 0x10,
+    0x76, 0xa1, 0x4f, 0xb8, 0x4f, 0x44, 0x50, 0xfc,
+    0x3f, 0x08, 0x40, 0xf4, 0x76, 0xf3, 0x50, 0xf2,
+    0x50, 0x19, 0x51, 0x33, 0x51, 0x1e, 0x77, 0x1f,
+    0x77, 0x1f, 0x77, 0x4a, 0x77, 0x39, 0x40, 0x8b,
+    0x77, 0x46, 0x40, 0x96, 0x40, 0x1d, 0x54, 0x4e,
+    0x78, 0x8c, 0x78, 0xcc, 0x78, 0xe3, 0x40, 0x26,
+    0x56, 0x56, 0x79, 0x9a, 0x56, 0xc5, 0x56, 0x8f,
+    0x79, 0xeb, 0x79, 0x2f, 0x41, 0x40, 0x7a, 0x4a,
+    0x7a, 0x4f, 0x7a, 0x7c, 0x59, 0xa7, 0x5a, 0xa7,
+    0x5a, 0xee, 0x7a, 0x02, 0x42, 0xab, 0x5b, 0xc6,
+    0x7b, 0xc9, 0x7b, 0x27, 0x42, 0x80, 0x5c, 0xd2,
+    0x7c, 0xa0, 0x42, 0xe8, 0x7c, 0xe3, 0x7c, 0x00,
+    0x7d, 0x86, 0x5f, 0x63, 0x7d, 0x01, 0x43, 0xc7,
+    0x7d, 0x02, 0x7e, 0x45, 0x7e, 0x34, 0x43, 0x28,
+    0x62, 0x47, 0x62, 0x59, 0x43, 0xd9, 0x62, 0x7a,
+    0x7f, 0x3e, 0x63, 0x95, 0x7f, 0xfa, 0x7f, 0x05,
+    0x80, 0xda, 0x64, 0x23, 0x65, 0x60, 0x80, 0xa8,
+    0x65, 0x70, 0x80, 0x5f, 0x33, 0xd5, 0x43, 0xb2,
+    0x80, 0x03, 0x81, 0x0b, 0x44, 0x3e, 0x81, 0xb5,
+    0x5a, 0xa7, 0x67, 0xb5, 0x67, 0x93, 0x33, 0x9c,
+    0x33, 0x01, 0x82, 0x04, 0x82, 0x9e, 0x8f, 0x6b,
+    0x44, 0x91, 0x82, 0x8b, 0x82, 0x9d, 0x82, 0xb3,
+    0x52, 0xb1, 0x82, 0xb3, 0x82, 0xbd, 0x82, 0xe6,
+    0x82, 0x3c, 0x6b, 0xe5, 0x82, 0x1d, 0x83, 0x63,
+    0x83, 0xad, 0x83, 0x23, 0x83, 0xbd, 0x83, 0xe7,
+    0x83, 0x57, 0x84, 0x53, 0x83, 0xca, 0x83, 0xcc,
+    0x83, 0xdc, 0x83, 0x36, 0x6c, 0x6b, 0x6d, 0x02,
+    0x00, 0x00, 0x20, 0x22, 0x2a, 0xa0, 0x0a, 0x00,
+    0x20, 0x80, 0x28, 0x00, 0xa8, 0x20, 0x20, 0x00,
+    0x02, 0x80, 0x22, 0x02, 0x8a, 0x08, 0x00, 0xaa,
+    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x28, 0xd5,
+    0x6c, 0x2b, 0x45, 0xf1, 0x84, 0xf3, 0x84, 0x16,
+    0x85, 0xca, 0x73, 0x64, 0x85, 0x2c, 0x6f, 0x5d,
+    0x45, 0x61, 0x45, 0xb1, 0x6f, 0xd2, 0x70, 0x6b,
+    0x45, 0x50, 0x86, 0x5c, 0x86, 0x67, 0x86, 0x69,
+    0x86, 0xa9, 0x86, 0x88, 0x86, 0x0e, 0x87, 0xe2,
+    0x86, 0x79, 0x87, 0x28, 0x87, 0x6b, 0x87, 0x86,
+    0x87, 0xd7, 0x45, 0xe1, 0x87, 0x01, 0x88, 0xf9,
+    0x45, 0x60, 0x88, 0x63, 0x88, 0x67, 0x76, 0xd7,
+    0x88, 0xde, 0x88, 0x35, 0x46, 0xfa, 0x88, 0xbb,
+    0x34, 0xae, 0x78, 0x66, 0x79, 0xbe, 0x46, 0xc7,
+    0x46, 0xa0, 0x8a, 0xed, 0x8a, 0x8a, 0x8b, 0x55,
+    0x8c, 0xa8, 0x7c, 0xab, 0x8c, 0xc1, 0x8c, 0x1b,
+    0x8d, 0x77, 0x8d, 0x2f, 0x7f, 0x04, 0x08, 0xcb,
+    0x8d, 0xbc, 0x8d, 0xf0, 0x8d, 0xde, 0x08, 0xd4,
+    0x8e, 0x38, 0x8f, 0xd2, 0x85, 0xed, 0x85, 0x94,
+    0x90, 0xf1, 0x90, 0x11, 0x91, 0x2e, 0x87, 0x1b,
+    0x91, 0x38, 0x92, 0xd7, 0x92, 0xd8, 0x92, 0x7c,
+    0x92, 0xf9, 0x93, 0x15, 0x94, 0xfa, 0x8b, 0x8b,
+    0x95, 0x95, 0x49, 0xb7, 0x95, 0x77, 0x8d, 0xe6,
+    0x49, 0xc3, 0x96, 0xb2, 0x5d, 0x23, 0x97, 0x45,
+    0x91, 0x1a, 0x92, 0x6e, 0x4a, 0x76, 0x4a, 0xe0,
+    0x97, 0x0a, 0x94, 0xb2, 0x4a, 0x96, 0x94, 0x0b,
+    0x98, 0x0b, 0x98, 0x29, 0x98, 0xb6, 0x95, 0xe2,
+    0x98, 0x33, 0x4b, 0x29, 0x99, 0xa7, 0x99, 0xc2,
+    0x99, 0xfe, 0x99, 0xce, 0x4b, 0x30, 0x9b, 0x12,
+    0x9b, 0x40, 0x9c, 0xfd, 0x9c, 0xce, 0x4c, 0xed,
+    0x4c, 0x67, 0x9d, 0xce, 0xa0, 0xf8, 0x4c, 0x05,
+    0xa1, 0x0e, 0xa2, 0x91, 0xa2, 0xbb, 0x9e, 0x56,
+    0x4d, 0xf9, 0x9e, 0xfe, 0x9e, 0x05, 0x9f, 0x0f,
+    0x9f, 0x16, 0x9f, 0x3b, 0x9f, 0x00, 0xa6, 0x02,
+    0x88, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
+    0x28, 0x00, 0x08, 0xa0, 0x80, 0xa0, 0x80, 0x00,
+    0x80, 0x80, 0x00, 0x0a, 0x88, 0x80, 0x00, 0x80,
+    0x00, 0x20, 0x2a, 0x00, 0x80,
 };
 
 static const uint16_t unicode_comp_table[945] = {
@@ -2225,9 +2191,9 @@ static const uint16_t unicode_comp_table[945] = {
     0x5704, 0x5706, 0x5708, 0x570a, 0x570c, 0x570e, 0x5710, 0x5712,
     0x5714, 0x5716, 0x5740, 0x5742, 0x5744, 0x5780, 0x5781, 0x57c0,
     0x57c1, 0x5800, 0x5801, 0x5840, 0x5841, 0x5880, 0x5881, 0x5900,
-    0x5901, 0x5902, 0x5903, 0x5940, 0x8f40, 0x8f42, 0x8f80, 0x8fc0,
-    0x8fc1, 0x9000, 0x9001, 0x9041, 0x9040, 0x9043, 0x9080, 0x9081,
-    0x90c0,
+    0x5901, 0x5902, 0x5903, 0x5940, 0x8e80, 0x8e82, 0x8ec0, 0x8f00,
+    0x8f01, 0x8f40, 0x8f41, 0x8f81, 0x8f80, 0x8f83, 0x8fc0, 0x8fc1,
+    0x9000,
 };
 
 typedef enum {
@@ -2313,7 +2279,7 @@ static const char unicode_gc_name_table[] =
     "C,Other"                  "\0"
 ;
 
-static const uint8_t unicode_gc_table[3897] = {
+static const uint8_t unicode_gc_table[3790] = {
     0xfa, 0x18, 0x17, 0x56, 0x0d, 0x56, 0x12, 0x13,
     0x16, 0x0c, 0x16, 0x11, 0x36, 0xe9, 0x02, 0x36,
     0x4c, 0x36, 0xe1, 0x12, 0x12, 0x16, 0x13, 0x0e,
@@ -2346,462 +2312,448 @@ static const uint8_t unicode_gc_table[3897] = {
     0x11, 0x06, 0x16, 0x26, 0x16, 0x26, 0x16, 0x06,
     0xe0, 0x00, 0xe5, 0x13, 0x60, 0x65, 0x36, 0xe0,
     0x03, 0xbb, 0x4c, 0x36, 0x0d, 0x36, 0x2f, 0xe6,
-    0x03, 0x16, 0x1b, 0x56, 0xe5, 0x18, 0x04, 0xe5,
-    0x02, 0xe6, 0x0d, 0xe9, 0x02, 0x76, 0x25, 0x06,
-    0xe5, 0x5b, 0x16, 0x05, 0xc6, 0x1b, 0x0f, 0xa6,
-    0x24, 0x26, 0x0f, 0x66, 0x25, 0xe9, 0x02, 0x45,
-    0x2f, 0x05, 0xf6, 0x06, 0x00, 0x1b, 0x05, 0x06,
-    0xe5, 0x16, 0xe6, 0x13, 0x20, 0xe5, 0x51, 0xe6,
-    0x03, 0x05, 0xe0, 0x06, 0xe9, 0x02, 0xe5, 0x19,
-    0xe6, 0x01, 0x24, 0x0f, 0x56, 0x04, 0x20, 0x06,
-    0x2d, 0xe5, 0x0e, 0x66, 0x04, 0xe6, 0x01, 0x04,
-    0x46, 0x04, 0x86, 0x20, 0xf6, 0x07, 0x00, 0xe5,
-    0x11, 0x46, 0x20, 0x16, 0x00, 0xe5, 0x03, 0x80,
-    0xe5, 0x10, 0x0e, 0xa5, 0x00, 0x3b, 0xa0, 0xe6,
-    0x00, 0xe5, 0x21, 0x04, 0xe6, 0x10, 0x1b, 0xe6,
-    0x18, 0x07, 0xe5, 0x2e, 0x06, 0x07, 0x06, 0x05,
-    0x47, 0xe6, 0x00, 0x67, 0x06, 0x27, 0x05, 0xc6,
-    0xe5, 0x02, 0x26, 0x36, 0xe9, 0x02, 0x16, 0x04,
-    0xe5, 0x07, 0x06, 0x27, 0x00, 0xe5, 0x00, 0x20,
-    0x25, 0x20, 0xe5, 0x0e, 0x00, 0xc5, 0x00, 0x05,
-    0x40, 0x65, 0x20, 0x06, 0x05, 0x47, 0x66, 0x20,
-    0x27, 0x20, 0x27, 0x06, 0x05, 0xe0, 0x00, 0x07,
+    0x03, 0x16, 0x1b, 0x00, 0x36, 0xe5, 0x18, 0x04,
+    0xe5, 0x02, 0xe6, 0x0d, 0xe9, 0x02, 0x76, 0x25,
+    0x06, 0xe5, 0x5b, 0x16, 0x05, 0xc6, 0x1b, 0x0f,
+    0xa6, 0x24, 0x26, 0x0f, 0x66, 0x25, 0xe9, 0x02,
+    0x45, 0x2f, 0x05, 0xf6, 0x06, 0x00, 0x1b, 0x05,
+    0x06, 0xe5, 0x16, 0xe6, 0x13, 0x20, 0xe5, 0x51,
+    0xe6, 0x03, 0x05, 0xe0, 0x06, 0xe9, 0x02, 0xe5,
+    0x19, 0xe6, 0x01, 0x24, 0x0f, 0x56, 0x04, 0x20,
+    0x06, 0x2d, 0xe5, 0x0e, 0x66, 0x04, 0xe6, 0x01,
+    0x04, 0x46, 0x04, 0x86, 0x20, 0xf6, 0x07, 0x00,
+    0xe5, 0x11, 0x46, 0x20, 0x16, 0x00, 0xe5, 0x03,
+    0xe0, 0x2d, 0xe5, 0x0d, 0x00, 0xe5, 0x0a, 0xe0,
+    0x03, 0xe6, 0x07, 0x1b, 0xe6, 0x18, 0x07, 0xe5,
+    0x2e, 0x06, 0x07, 0x06, 0x05, 0x47, 0xe6, 0x00,
+    0x67, 0x06, 0x27, 0x05, 0xc6, 0xe5, 0x02, 0x26,
+    0x36, 0xe9, 0x02, 0x16, 0x04, 0xe5, 0x07, 0x06,
+    0x27, 0x00, 0xe5, 0x00, 0x20, 0x25, 0x20, 0xe5,
+    0x0e, 0x00, 0xc5, 0x00, 0x05, 0x40, 0x65, 0x20,
+    0x06, 0x05, 0x47, 0x66, 0x20, 0x27, 0x20, 0x27,
+    0x06, 0x05, 0xe0, 0x00, 0x07, 0x60, 0x25, 0x00,
+    0x45, 0x26, 0x20, 0xe9, 0x02, 0x25, 0x2d, 0xab,
+    0x0f, 0x0d, 0x05, 0x16, 0x06, 0x20, 0x26, 0x07,
+    0x00, 0xa5, 0x60, 0x25, 0x20, 0xe5, 0x0e, 0x00,
+    0xc5, 0x00, 0x25, 0x00, 0x25, 0x00, 0x25, 0x20,
+    0x06, 0x00, 0x47, 0x26, 0x60, 0x26, 0x20, 0x46,
+    0x40, 0x06, 0xc0, 0x65, 0x00, 0x05, 0xc0, 0xe9,
+    0x02, 0x26, 0x45, 0x06, 0x16, 0xe0, 0x02, 0x26,
+    0x07, 0x00, 0xe5, 0x01, 0x00, 0x45, 0x00, 0xe5,
+    0x0e, 0x00, 0xc5, 0x00, 0x25, 0x00, 0x85, 0x20,
+    0x06, 0x05, 0x47, 0x86, 0x00, 0x26, 0x07, 0x00,
+    0x27, 0x06, 0x20, 0x05, 0xe0, 0x07, 0x25, 0x26,
+    0x20, 0xe9, 0x02, 0x16, 0x0d, 0xc0, 0x05, 0xa6,
+    0x00, 0x06, 0x27, 0x00, 0xe5, 0x00, 0x20, 0x25,
+    0x20, 0xe5, 0x0e, 0x00, 0xc5, 0x00, 0x25, 0x00,
+    0x85, 0x20, 0x06, 0x05, 0x07, 0x06, 0x07, 0x66,
+    0x20, 0x27, 0x20, 0x27, 0x06, 0xc0, 0x26, 0x07,
     0x60, 0x25, 0x00, 0x45, 0x26, 0x20, 0xe9, 0x02,
-    0x25, 0x2d, 0xab, 0x0f, 0x0d, 0x05, 0x16, 0x06,
-    0x20, 0x26, 0x07, 0x00, 0xa5, 0x60, 0x25, 0x20,
-    0xe5, 0x0e, 0x00, 0xc5, 0x00, 0x25, 0x00, 0x25,
-    0x00, 0x25, 0x20, 0x06, 0x00, 0x47, 0x26, 0x60,
-    0x26, 0x20, 0x46, 0x40, 0x06, 0xc0, 0x65, 0x00,
-    0x05, 0xc0, 0xe9, 0x02, 0x26, 0x45, 0x06, 0x16,
-    0xe0, 0x02, 0x26, 0x07, 0x00, 0xe5, 0x01, 0x00,
-    0x45, 0x00, 0xe5, 0x0e, 0x00, 0xc5, 0x00, 0x25,
-    0x00, 0x85, 0x20, 0x06, 0x05, 0x47, 0x86, 0x00,
-    0x26, 0x07, 0x00, 0x27, 0x06, 0x20, 0x05, 0xe0,
-    0x07, 0x25, 0x26, 0x20, 0xe9, 0x02, 0x16, 0x0d,
-    0xc0, 0x05, 0xa6, 0x00, 0x06, 0x27, 0x00, 0xe5,
-    0x00, 0x20, 0x25, 0x20, 0xe5, 0x0e, 0x00, 0xc5,
-    0x00, 0x25, 0x00, 0x85, 0x20, 0x06, 0x05, 0x07,
-    0x06, 0x07, 0x66, 0x20, 0x27, 0x20, 0x27, 0x06,
-    0xc0, 0x26, 0x07, 0x60, 0x25, 0x00, 0x45, 0x26,
-    0x20, 0xe9, 0x02, 0x0f, 0x05, 0xab, 0xe0, 0x02,
-    0x06, 0x05, 0x00, 0xa5, 0x40, 0x45, 0x00, 0x65,
-    0x40, 0x25, 0x00, 0x05, 0x00, 0x25, 0x40, 0x25,
-    0x40, 0x45, 0x40, 0xe5, 0x04, 0x60, 0x27, 0x06,
-    0x27, 0x40, 0x47, 0x00, 0x47, 0x06, 0x20, 0x05,
-    0xa0, 0x07, 0xe0, 0x06, 0xe9, 0x02, 0x4b, 0xaf,
-    0x0d, 0x0f, 0x80, 0x06, 0x47, 0x06, 0xe5, 0x00,
-    0x00, 0x45, 0x00, 0xe5, 0x0f, 0x00, 0xe5, 0x08,
-    0x20, 0x06, 0x05, 0x46, 0x67, 0x00, 0x46, 0x00,
-    0x66, 0xc0, 0x26, 0x00, 0x45, 0x20, 0x05, 0x20,
-    0x25, 0x26, 0x20, 0xe9, 0x02, 0xc0, 0x16, 0xcb,
-    0x0f, 0x05, 0x06, 0x27, 0x16, 0xe5, 0x00, 0x00,
-    0x45, 0x00, 0xe5, 0x0f, 0x00, 0xe5, 0x02, 0x00,
-    0x85, 0x20, 0x06, 0x05, 0x07, 0x06, 0x87, 0x00,
-    0x06, 0x27, 0x00, 0x27, 0x26, 0xc0, 0x27, 0xa0,
-    0x25, 0x00, 0x25, 0x26, 0x20, 0xe9, 0x02, 0x00,
-    0x25, 0xe0, 0x05, 0x26, 0x27, 0xe5, 0x01, 0x00,
-    0x45, 0x00, 0xe5, 0x21, 0x26, 0x05, 0x47, 0x66,
-    0x00, 0x47, 0x00, 0x47, 0x06, 0x05, 0x0f, 0x60,
-    0x45, 0x07, 0xcb, 0x45, 0x26, 0x20, 0xe9, 0x02,
-    0xeb, 0x01, 0x0f, 0xa5, 0x00, 0x06, 0x27, 0x00,
-    0xe5, 0x0a, 0x40, 0xe5, 0x10, 0x00, 0xe5, 0x01,
-    0x00, 0x05, 0x20, 0xc5, 0x40, 0x06, 0x60, 0x47,
-    0x46, 0x00, 0x06, 0x00, 0xe7, 0x00, 0xa0, 0xe9,
-    0x02, 0x20, 0x27, 0x16, 0xe0, 0x04, 0xe5, 0x28,
-    0x06, 0x25, 0xc6, 0x60, 0x0d, 0xa5, 0x04, 0xe6,
-    0x00, 0x16, 0xe9, 0x02, 0x36, 0xe0, 0x1d, 0x25,
-    0x00, 0x05, 0x00, 0x85, 0x00, 0xe5, 0x10, 0x00,
-    0x05, 0x00, 0xe5, 0x02, 0x06, 0x25, 0xe6, 0x01,
-    0x05, 0x20, 0x85, 0x00, 0x04, 0x00, 0xa6, 0x20,
-    0xe9, 0x02, 0x20, 0x65, 0xe0, 0x18, 0x05, 0x4f,
-    0xf6, 0x07, 0x0f, 0x16, 0x4f, 0x26, 0xaf, 0xe9,
-    0x02, 0xeb, 0x02, 0x0f, 0x06, 0x0f, 0x06, 0x0f,
-    0x06, 0x12, 0x13, 0x12, 0x13, 0x27, 0xe5, 0x00,
-    0x00, 0xe5, 0x1c, 0x60, 0xe6, 0x06, 0x07, 0x86,
-    0x16, 0x26, 0x85, 0xe6, 0x03, 0x00, 0xe6, 0x1c,
-    0x00, 0xef, 0x00, 0x06, 0xaf, 0x00, 0x2f, 0x96,
-    0x6f, 0x36, 0xe0, 0x1d, 0xe5, 0x23, 0x27, 0x66,
-    0x07, 0xa6, 0x07, 0x26, 0x27, 0x26, 0x05, 0xe9,
-    0x02, 0xb6, 0xa5, 0x27, 0x26, 0x65, 0x46, 0x05,
-    0x47, 0x25, 0xc7, 0x45, 0x66, 0xe5, 0x05, 0x06,
-    0x27, 0x26, 0xa7, 0x06, 0x05, 0x07, 0xe9, 0x02,
-    0x47, 0x06, 0x2f, 0xe1, 0x1e, 0x00, 0x01, 0x80,
-    0x01, 0x20, 0xe2, 0x23, 0x16, 0x04, 0x42, 0xe5,
-    0x80, 0xc1, 0x00, 0x65, 0x20, 0xc5, 0x00, 0x05,
-    0x00, 0x65, 0x20, 0xe5, 0x21, 0x00, 0x65, 0x20,
-    0xe5, 0x19, 0x00, 0x65, 0x20, 0xc5, 0x00, 0x05,
-    0x00, 0x65, 0x20, 0xe5, 0x07, 0x00, 0xe5, 0x31,
-    0x00, 0x65, 0x20, 0xe5, 0x3b, 0x20, 0x46, 0xf6,
-    0x01, 0xeb, 0x0c, 0x40, 0xe5, 0x08, 0xef, 0x02,
-    0xa0, 0xe1, 0x4e, 0x20, 0xa2, 0x20, 0x11, 0xe5,
-    0x81, 0xe4, 0x0f, 0x16, 0xe5, 0x09, 0x17, 0xe5,
-    0x12, 0x12, 0x13, 0x40, 0xe5, 0x43, 0x56, 0x4a,
-    0xe5, 0x00, 0xc0, 0xe5, 0x0a, 0x46, 0x07, 0xe0,
-    0x01, 0xe5, 0x0b, 0x26, 0x07, 0x36, 0xe0, 0x01,
-    0xe5, 0x0a, 0x26, 0xe0, 0x04, 0xe5, 0x05, 0x00,
-    0x45, 0x00, 0x26, 0xe0, 0x04, 0xe5, 0x2c, 0x26,
-    0x07, 0xc6, 0xe7, 0x00, 0x06, 0x27, 0xe6, 0x03,
-    0x56, 0x04, 0x56, 0x0d, 0x05, 0x06, 0x20, 0xe9,
-    0x02, 0xa0, 0xeb, 0x02, 0xa0, 0xb6, 0x11, 0x76,
-    0x46, 0x1b, 0x06, 0xe9, 0x02, 0xa0, 0xe5, 0x1b,
-    0x04, 0xe5, 0x2d, 0xc0, 0x85, 0x26, 0xe5, 0x1a,
-    0x06, 0x05, 0x80, 0xe5, 0x3e, 0xe0, 0x02, 0xe5,
-    0x17, 0x00, 0x46, 0x67, 0x26, 0x47, 0x60, 0x27,
-    0x06, 0xa7, 0x46, 0x60, 0x0f, 0x40, 0x36, 0xe9,
-    0x02, 0xe5, 0x16, 0x20, 0x85, 0xe0, 0x03, 0xe5,
-    0x24, 0x60, 0xe5, 0x12, 0xa0, 0xe9, 0x02, 0x0b,
-    0x40, 0xef, 0x1a, 0xe5, 0x0f, 0x26, 0x27, 0x06,
-    0x20, 0x36, 0xe5, 0x2d, 0x07, 0x06, 0x07, 0xc6,
-    0x00, 0x06, 0x07, 0x06, 0x27, 0xe6, 0x00, 0xa7,
-    0xe6, 0x02, 0x20, 0x06, 0xe9, 0x02, 0xa0, 0xe9,
-    0x02, 0xa0, 0xd6, 0x04, 0xb6, 0x20, 0xe6, 0x06,
-    0x08, 0xe6, 0x08, 0xe0, 0x29, 0x66, 0x07, 0xe5,
-    0x27, 0x06, 0x07, 0x86, 0x07, 0x06, 0x87, 0x06,
-    0x27, 0xe5, 0x00, 0x40, 0xe9, 0x02, 0xd6, 0xef,
-    0x02, 0xe6, 0x01, 0xef, 0x01, 0x36, 0x00, 0x26,
-    0x07, 0xe5, 0x16, 0x07, 0x66, 0x27, 0x26, 0x07,
-    0x46, 0x25, 0xe9, 0x02, 0xe5, 0x24, 0x06, 0x07,
-    0x26, 0x47, 0x06, 0x07, 0x46, 0x27, 0xe0, 0x00,
-    0x76, 0xe5, 0x1c, 0xe7, 0x00, 0xe6, 0x00, 0x27,
-    0x26, 0x40, 0x96, 0xe9, 0x02, 0x40, 0x45, 0xe9,
-    0x02, 0xe5, 0x16, 0xa4, 0x36, 0xe2, 0x01, 0xc0,
-    0xe1, 0x23, 0x20, 0x41, 0xf6, 0x00, 0xe0, 0x00,
-    0x46, 0x16, 0xe6, 0x05, 0x07, 0xc6, 0x65, 0x06,
-    0xa5, 0x06, 0x25, 0x07, 0x26, 0x05, 0x80, 0xe2,
-    0x24, 0xe4, 0x37, 0xe2, 0x05, 0x04, 0xe2, 0x1a,
-    0xe4, 0x1d, 0xe6, 0x38, 0xff, 0x80, 0x0e, 0xe2,
-    0x00, 0xff, 0x5a, 0xe2, 0x00, 0xe1, 0x00, 0xa2,
-    0x20, 0xa1, 0x20, 0xe2, 0x00, 0xe1, 0x00, 0xe2,
-    0x00, 0xe1, 0x00, 0xa2, 0x20, 0xa1, 0x20, 0xe2,
-    0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
-    0x3f, 0xc2, 0xe1, 0x00, 0xe2, 0x06, 0x20, 0xe2,
-    0x00, 0xe3, 0x00, 0xe2, 0x00, 0xe3, 0x00, 0xe2,
-    0x00, 0xe3, 0x00, 0x82, 0x00, 0x22, 0x61, 0x03,
-    0x0e, 0x02, 0x4e, 0x42, 0x00, 0x22, 0x61, 0x03,
-    0x4e, 0x62, 0x20, 0x22, 0x61, 0x00, 0x4e, 0xe2,
-    0x00, 0x81, 0x4e, 0x20, 0x42, 0x00, 0x22, 0x61,
-    0x03, 0x2e, 0x00, 0xf7, 0x03, 0x9b, 0xb1, 0x36,
-    0x14, 0x15, 0x12, 0x34, 0x15, 0x12, 0x14, 0xf6,
-    0x00, 0x18, 0x19, 0x9b, 0x17, 0xf6, 0x01, 0x14,
-    0x15, 0x76, 0x30, 0x56, 0x0c, 0x12, 0x13, 0xf6,
-    0x03, 0x0c, 0x16, 0x10, 0xf6, 0x02, 0x17, 0x9b,
-    0x00, 0xfb, 0x02, 0x0b, 0x04, 0x20, 0xab, 0x4c,
-    0x12, 0x13, 0x04, 0xeb, 0x02, 0x4c, 0x12, 0x13,
-    0x00, 0xe4, 0x05, 0x40, 0xed, 0x19, 0xe0, 0x07,
-    0xe6, 0x05, 0x68, 0x06, 0x48, 0xe6, 0x04, 0xe0,
-    0x07, 0x2f, 0x01, 0x6f, 0x01, 0x2f, 0x02, 0x41,
-    0x22, 0x41, 0x02, 0x0f, 0x01, 0x2f, 0x0c, 0x81,
-    0xaf, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f, 0x61,
-    0x0f, 0x02, 0x61, 0x02, 0x65, 0x02, 0x2f, 0x22,
-    0x21, 0x8c, 0x3f, 0x42, 0x0f, 0x0c, 0x2f, 0x02,
-    0x0f, 0xeb, 0x08, 0xea, 0x1b, 0x3f, 0x6a, 0x0b,
-    0x2f, 0x60, 0x8c, 0x8f, 0x2c, 0x6f, 0x0c, 0x2f,
-    0x0c, 0x2f, 0x0c, 0xcf, 0x0c, 0xef, 0x17, 0x2c,
-    0x2f, 0x0c, 0x0f, 0x0c, 0xef, 0x17, 0xec, 0x80,
-    0x84, 0xef, 0x00, 0x12, 0x13, 0x12, 0x13, 0xef,
-    0x0c, 0x2c, 0xcf, 0x12, 0x13, 0xef, 0x49, 0x0c,
-    0xef, 0x16, 0xec, 0x11, 0xef, 0x20, 0xac, 0xef,
-    0x3d, 0xe0, 0x11, 0xef, 0x03, 0xe0, 0x0d, 0xeb,
-    0x34, 0xef, 0x46, 0xeb, 0x0e, 0xef, 0x80, 0x2f,
-    0x0c, 0xef, 0x01, 0x0c, 0xef, 0x2e, 0xec, 0x00,
-    0xef, 0x67, 0x0c, 0xef, 0x80, 0x70, 0x12, 0x13,
-    0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13,
-    0x12, 0x13, 0x12, 0x13, 0xeb, 0x16, 0xef, 0x24,
-    0x8c, 0x12, 0x13, 0xec, 0x17, 0x12, 0x13, 0x12,
-    0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0xec,
-    0x08, 0xef, 0x80, 0x78, 0xec, 0x7b, 0x12, 0x13,
-    0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13,
+    0x0f, 0x05, 0xab, 0xe0, 0x02, 0x06, 0x05, 0x00,
+    0xa5, 0x40, 0x45, 0x00, 0x65, 0x40, 0x25, 0x00,
+    0x05, 0x00, 0x25, 0x40, 0x25, 0x40, 0x45, 0x40,
+    0xe5, 0x04, 0x60, 0x27, 0x06, 0x27, 0x40, 0x47,
+    0x00, 0x47, 0x06, 0x20, 0x05, 0xa0, 0x07, 0xe0,
+    0x06, 0xe9, 0x02, 0x4b, 0xaf, 0x0d, 0x0f, 0x80,
+    0x06, 0x47, 0x06, 0xe5, 0x00, 0x00, 0x45, 0x00,
+    0xe5, 0x0f, 0x00, 0xe5, 0x08, 0x40, 0x05, 0x46,
+    0x67, 0x00, 0x46, 0x00, 0x66, 0xc0, 0x26, 0x00,
+    0x45, 0x80, 0x25, 0x26, 0x20, 0xe9, 0x02, 0xc0,
+    0x16, 0xcb, 0x0f, 0x05, 0x06, 0x27, 0x16, 0xe5,
+    0x00, 0x00, 0x45, 0x00, 0xe5, 0x0f, 0x00, 0xe5,
+    0x02, 0x00, 0x85, 0x20, 0x06, 0x05, 0x07, 0x06,
+    0x87, 0x00, 0x06, 0x27, 0x00, 0x27, 0x26, 0xc0,
+    0x27, 0xc0, 0x05, 0x00, 0x25, 0x26, 0x20, 0xe9,
+    0x02, 0x00, 0x25, 0xe0, 0x05, 0x26, 0x27, 0xe5,
+    0x01, 0x00, 0x45, 0x00, 0xe5, 0x21, 0x26, 0x05,
+    0x47, 0x66, 0x00, 0x47, 0x00, 0x47, 0x06, 0x05,
+    0x0f, 0x60, 0x45, 0x07, 0xcb, 0x45, 0x26, 0x20,
+    0xe9, 0x02, 0xeb, 0x01, 0x0f, 0xa5, 0x00, 0x06,
+    0x27, 0x00, 0xe5, 0x0a, 0x40, 0xe5, 0x10, 0x00,
+    0xe5, 0x01, 0x00, 0x05, 0x20, 0xc5, 0x40, 0x06,
+    0x60, 0x47, 0x46, 0x00, 0x06, 0x00, 0xe7, 0x00,
+    0xa0, 0xe9, 0x02, 0x20, 0x27, 0x16, 0xe0, 0x04,
+    0xe5, 0x28, 0x06, 0x25, 0xc6, 0x60, 0x0d, 0xa5,
+    0x04, 0xe6, 0x00, 0x16, 0xe9, 0x02, 0x36, 0xe0,
+    0x1d, 0x25, 0x00, 0x05, 0x00, 0x85, 0x00, 0xe5,
+    0x10, 0x00, 0x05, 0x00, 0xe5, 0x02, 0x06, 0x25,
+    0xe6, 0x01, 0x05, 0x20, 0x85, 0x00, 0x04, 0x00,
+    0xa6, 0x20, 0xe9, 0x02, 0x20, 0x65, 0xe0, 0x18,
+    0x05, 0x4f, 0xf6, 0x07, 0x0f, 0x16, 0x4f, 0x26,
+    0xaf, 0xe9, 0x02, 0xeb, 0x02, 0x0f, 0x06, 0x0f,
+    0x06, 0x0f, 0x06, 0x12, 0x13, 0x12, 0x13, 0x27,
+    0xe5, 0x00, 0x00, 0xe5, 0x1c, 0x60, 0xe6, 0x06,
+    0x07, 0x86, 0x16, 0x26, 0x85, 0xe6, 0x03, 0x00,
+    0xe6, 0x1c, 0x00, 0xef, 0x00, 0x06, 0xaf, 0x00,
+    0x2f, 0x96, 0x6f, 0x36, 0xe0, 0x1d, 0xe5, 0x23,
+    0x27, 0x66, 0x07, 0xa6, 0x07, 0x26, 0x27, 0x26,
+    0x05, 0xe9, 0x02, 0xb6, 0xa5, 0x27, 0x26, 0x65,
+    0x46, 0x05, 0x47, 0x25, 0xc7, 0x45, 0x66, 0xe5,
+    0x05, 0x06, 0x27, 0x26, 0xa7, 0x06, 0x05, 0x07,
+    0xe9, 0x02, 0x47, 0x06, 0x2f, 0xe1, 0x1e, 0x00,
+    0x01, 0x80, 0x01, 0x20, 0xe2, 0x23, 0x16, 0x04,
+    0x42, 0xe5, 0x80, 0xc1, 0x00, 0x65, 0x20, 0xc5,
+    0x00, 0x05, 0x00, 0x65, 0x20, 0xe5, 0x21, 0x00,
+    0x65, 0x20, 0xe5, 0x19, 0x00, 0x65, 0x20, 0xc5,
+    0x00, 0x05, 0x00, 0x65, 0x20, 0xe5, 0x07, 0x00,
+    0xe5, 0x31, 0x00, 0x65, 0x20, 0xe5, 0x3b, 0x20,
+    0x46, 0xf6, 0x01, 0xeb, 0x0c, 0x40, 0xe5, 0x08,
+    0xef, 0x02, 0xa0, 0xe1, 0x4e, 0x20, 0xa2, 0x20,
+    0x11, 0xe5, 0x81, 0xe4, 0x0f, 0x16, 0xe5, 0x09,
+    0x17, 0xe5, 0x12, 0x12, 0x13, 0x40, 0xe5, 0x43,
+    0x56, 0x4a, 0xe5, 0x00, 0xc0, 0xe5, 0x05, 0x00,
+    0x65, 0x46, 0xe0, 0x03, 0xe5, 0x0a, 0x46, 0x36,
+    0xe0, 0x01, 0xe5, 0x0a, 0x26, 0xe0, 0x04, 0xe5,
+    0x05, 0x00, 0x45, 0x00, 0x26, 0xe0, 0x04, 0xe5,
+    0x2c, 0x26, 0x07, 0xc6, 0xe7, 0x00, 0x06, 0x27,
+    0xe6, 0x03, 0x56, 0x04, 0x56, 0x0d, 0x05, 0x06,
+    0x20, 0xe9, 0x02, 0xa0, 0xeb, 0x02, 0xa0, 0xb6,
+    0x11, 0x76, 0x46, 0x1b, 0x00, 0xe9, 0x02, 0xa0,
+    0xe5, 0x1b, 0x04, 0xe5, 0x2d, 0xc0, 0x85, 0x26,
+    0xe5, 0x1a, 0x06, 0x05, 0x80, 0xe5, 0x3e, 0xe0,
+    0x02, 0xe5, 0x17, 0x00, 0x46, 0x67, 0x26, 0x47,
+    0x60, 0x27, 0x06, 0xa7, 0x46, 0x60, 0x0f, 0x40,
+    0x36, 0xe9, 0x02, 0xe5, 0x16, 0x20, 0x85, 0xe0,
+    0x03, 0xe5, 0x24, 0x60, 0xe5, 0x12, 0xa0, 0xe9,
+    0x02, 0x0b, 0x40, 0xef, 0x1a, 0xe5, 0x0f, 0x26,
+    0x27, 0x06, 0x20, 0x36, 0xe5, 0x2d, 0x07, 0x06,
+    0x07, 0xc6, 0x00, 0x06, 0x07, 0x06, 0x27, 0xe6,
+    0x00, 0xa7, 0xe6, 0x02, 0x20, 0x06, 0xe9, 0x02,
+    0xa0, 0xe9, 0x02, 0xa0, 0xd6, 0x04, 0xb6, 0x20,
+    0xe6, 0x06, 0x08, 0x26, 0xe0, 0x37, 0x66, 0x07,
+    0xe5, 0x27, 0x06, 0x07, 0x86, 0x07, 0x06, 0x87,
+    0x06, 0x27, 0xc5, 0x60, 0xe9, 0x02, 0xd6, 0xef,
+    0x02, 0xe6, 0x01, 0xef, 0x01, 0x40, 0x26, 0x07,
+    0xe5, 0x16, 0x07, 0x66, 0x27, 0x26, 0x07, 0x46,
+    0x25, 0xe9, 0x02, 0xe5, 0x24, 0x06, 0x07, 0x26,
+    0x47, 0x06, 0x07, 0x46, 0x27, 0xe0, 0x00, 0x76,
+    0xe5, 0x1c, 0xe7, 0x00, 0xe6, 0x00, 0x27, 0x26,
+    0x40, 0x96, 0xe9, 0x02, 0x40, 0x45, 0xe9, 0x02,
+    0xe5, 0x16, 0xa4, 0x36, 0xe2, 0x01, 0xc0, 0xe1,
+    0x23, 0x20, 0x41, 0xf6, 0x00, 0xe0, 0x00, 0x46,
+    0x16, 0xe6, 0x05, 0x07, 0xc6, 0x65, 0x06, 0xa5,
+    0x06, 0x25, 0x07, 0x26, 0x05, 0x80, 0xe2, 0x24,
+    0xe4, 0x37, 0xe2, 0x05, 0x04, 0xe2, 0x1a, 0xe4,
+    0x1d, 0xe6, 0x32, 0x00, 0x86, 0xff, 0x80, 0x0e,
+    0xe2, 0x00, 0xff, 0x5a, 0xe2, 0x00, 0xe1, 0x00,
+    0xa2, 0x20, 0xa1, 0x20, 0xe2, 0x00, 0xe1, 0x00,
+    0xe2, 0x00, 0xe1, 0x00, 0xa2, 0x20, 0xa1, 0x20,
+    0xe2, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
+    0x00, 0x3f, 0xc2, 0xe1, 0x00, 0xe2, 0x06, 0x20,
+    0xe2, 0x00, 0xe3, 0x00, 0xe2, 0x00, 0xe3, 0x00,
+    0xe2, 0x00, 0xe3, 0x00, 0x82, 0x00, 0x22, 0x61,
+    0x03, 0x0e, 0x02, 0x4e, 0x42, 0x00, 0x22, 0x61,
+    0x03, 0x4e, 0x62, 0x20, 0x22, 0x61, 0x00, 0x4e,
+    0xe2, 0x00, 0x81, 0x4e, 0x20, 0x42, 0x00, 0x22,
+    0x61, 0x03, 0x2e, 0x00, 0xf7, 0x03, 0x9b, 0xb1,
+    0x36, 0x14, 0x15, 0x12, 0x34, 0x15, 0x12, 0x14,
+    0xf6, 0x00, 0x18, 0x19, 0x9b, 0x17, 0xf6, 0x01,
+    0x14, 0x15, 0x76, 0x30, 0x56, 0x0c, 0x12, 0x13,
+    0xf6, 0x03, 0x0c, 0x16, 0x10, 0xf6, 0x02, 0x17,
+    0x9b, 0x00, 0xfb, 0x02, 0x0b, 0x04, 0x20, 0xab,
+    0x4c, 0x12, 0x13, 0x04, 0xeb, 0x02, 0x4c, 0x12,
+    0x13, 0x00, 0xe4, 0x05, 0x40, 0xed, 0x18, 0xe0,
+    0x08, 0xe6, 0x05, 0x68, 0x06, 0x48, 0xe6, 0x04,
+    0xe0, 0x07, 0x2f, 0x01, 0x6f, 0x01, 0x2f, 0x02,
+    0x41, 0x22, 0x41, 0x02, 0x0f, 0x01, 0x2f, 0x0c,
+    0x81, 0xaf, 0x01, 0x0f, 0x01, 0x0f, 0x01, 0x0f,
+    0x61, 0x0f, 0x02, 0x61, 0x02, 0x65, 0x02, 0x2f,
+    0x22, 0x21, 0x8c, 0x3f, 0x42, 0x0f, 0x0c, 0x2f,
+    0x02, 0x0f, 0xeb, 0x08, 0xea, 0x1b, 0x3f, 0x6a,
+    0x0b, 0x2f, 0x60, 0x8c, 0x8f, 0x2c, 0x6f, 0x0c,
+    0x2f, 0x0c, 0x2f, 0x0c, 0xcf, 0x0c, 0xef, 0x17,
+    0x2c, 0x2f, 0x0c, 0x0f, 0x0c, 0xef, 0x17, 0xec,
+    0x80, 0x84, 0xef, 0x00, 0x12, 0x13, 0x12, 0x13,
+    0xef, 0x0c, 0x2c, 0xcf, 0x12, 0x13, 0xef, 0x49,
+    0x0c, 0xef, 0x16, 0xec, 0x11, 0xef, 0x20, 0xac,
+    0xef, 0x3d, 0xe0, 0x11, 0xef, 0x03, 0xe0, 0x0d,
+    0xeb, 0x34, 0xef, 0x46, 0xeb, 0x0e, 0xef, 0x80,
+    0x2f, 0x0c, 0xef, 0x01, 0x0c, 0xef, 0x2e, 0xec,
+    0x00, 0xef, 0x67, 0x0c, 0xef, 0x80, 0x70, 0x12,
+    0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12,
+    0x13, 0x12, 0x13, 0x12, 0x13, 0xeb, 0x16, 0xef,
+    0x24, 0x8c, 0x12, 0x13, 0xec, 0x17, 0x12, 0x13,
     0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13,
-    0x12, 0x13, 0x12, 0x13, 0xec, 0x37, 0x12, 0x13,
-    0x12, 0x13, 0xec, 0x18, 0x12, 0x13, 0xec, 0x80,
-    0x7a, 0xef, 0x28, 0xec, 0x0d, 0x2f, 0xac, 0xef,
-    0x1f, 0x20, 0xef, 0x18, 0x00, 0xef, 0x61, 0xe1,
-    0x28, 0xe2, 0x28, 0x5f, 0x21, 0x22, 0xdf, 0x41,
-    0x02, 0x3f, 0x02, 0x3f, 0x82, 0x24, 0x41, 0x02,
-    0xff, 0x5a, 0x02, 0xaf, 0x7f, 0x46, 0x3f, 0x80,
-    0x76, 0x0b, 0x36, 0xe2, 0x1e, 0x00, 0x02, 0x80,
-    0x02, 0x20, 0xe5, 0x30, 0xc0, 0x04, 0x16, 0xe0,
-    0x06, 0x06, 0xe5, 0x0f, 0xe0, 0x01, 0xc5, 0x00,
-    0xc5, 0x00, 0xc5, 0x00, 0xc5, 0x00, 0xc5, 0x00,
-    0xc5, 0x00, 0xc5, 0x00, 0xc5, 0x00, 0xe6, 0x18,
-    0x36, 0x14, 0x15, 0x14, 0x15, 0x56, 0x14, 0x15,
-    0x16, 0x14, 0x15, 0xf6, 0x01, 0x11, 0x36, 0x11,
-    0x16, 0x14, 0x15, 0x36, 0x14, 0x15, 0x12, 0x13,
-    0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x96, 0x04,
-    0xf6, 0x02, 0x31, 0x76, 0x11, 0x16, 0x12, 0xf6,
-    0x05, 0x2f, 0x56, 0x12, 0x13, 0x12, 0x13, 0x12,
-    0x13, 0x12, 0x13, 0x11, 0xe0, 0x1a, 0xef, 0x12,
-    0x00, 0xef, 0x51, 0xe0, 0x04, 0xef, 0x80, 0x4e,
-    0xe0, 0x12, 0xef, 0x04, 0x60, 0x17, 0x56, 0x0f,
-    0x04, 0x05, 0x0a, 0x12, 0x13, 0x12, 0x13, 0x12,
-    0x13, 0x12, 0x13, 0x12, 0x13, 0x2f, 0x12, 0x13,
-    0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x11, 0x12,
-    0x33, 0x0f, 0xea, 0x01, 0x66, 0x27, 0x11, 0x84,
-    0x2f, 0x4a, 0x04, 0x05, 0x16, 0x2f, 0x00, 0xe5,
-    0x4e, 0x20, 0x26, 0x2e, 0x24, 0x05, 0x11, 0xe5,
-    0x52, 0x16, 0x44, 0x05, 0x80, 0xe5, 0x23, 0x00,
-    0xe5, 0x56, 0x00, 0x2f, 0x6b, 0xef, 0x02, 0xe5,
-    0x18, 0xef, 0x1c, 0xe0, 0x04, 0xe5, 0x08, 0xef,
-    0x17, 0x00, 0xeb, 0x02, 0xef, 0x16, 0xeb, 0x00,
-    0x0f, 0xeb, 0x07, 0xef, 0x18, 0xeb, 0x02, 0xef,
-    0x1f, 0xeb, 0x07, 0xef, 0x80, 0xb8, 0xe5, 0x99,
-    0x38, 0xef, 0x38, 0xe5, 0xc0, 0x11, 0x8d, 0x04,
-    0xe5, 0x83, 0xef, 0x40, 0xef, 0x2f, 0xe0, 0x01,
-    0xe5, 0x20, 0xa4, 0x36, 0xe5, 0x80, 0x84, 0x04,
-    0x56, 0xe5, 0x08, 0xe9, 0x02, 0x25, 0xe0, 0x0c,
-    0xff, 0x26, 0x05, 0x06, 0x48, 0x16, 0xe6, 0x02,
-    0x16, 0x04, 0xff, 0x14, 0x24, 0x26, 0xe5, 0x3e,
-    0xea, 0x02, 0x26, 0xb6, 0xe0, 0x00, 0xee, 0x0f,
-    0xe4, 0x01, 0x2e, 0xff, 0x06, 0x22, 0xff, 0x36,
-    0x04, 0xe2, 0x00, 0x9f, 0xff, 0x02, 0x04, 0x2e,
-    0x7f, 0x05, 0x7f, 0x22, 0xff, 0x0d, 0x61, 0x02,
-    0x81, 0x02, 0xff, 0x07, 0x41, 0x02, 0x3f, 0x80,
-    0x3f, 0x00, 0x02, 0x00, 0x02, 0x7f, 0xe0, 0x10,
-    0x44, 0x3f, 0x05, 0x24, 0x02, 0xc5, 0x06, 0x45,
-    0x06, 0x65, 0x06, 0xe5, 0x0f, 0x27, 0x26, 0x07,
-    0x6f, 0x06, 0x40, 0xab, 0x2f, 0x0d, 0x0f, 0xa0,
-    0xe5, 0x2c, 0x76, 0xe0, 0x00, 0x27, 0xe5, 0x2a,
-    0xe7, 0x08, 0x26, 0xe0, 0x00, 0x36, 0xe9, 0x02,
-    0xa0, 0xe6, 0x0a, 0xa5, 0x56, 0x05, 0x16, 0x25,
-    0x06, 0xe9, 0x02, 0xe5, 0x14, 0xe6, 0x00, 0x36,
-    0xe5, 0x0f, 0xe6, 0x03, 0x27, 0xe0, 0x03, 0x16,
-    0xe5, 0x15, 0x40, 0x46, 0x07, 0xe5, 0x27, 0x06,
-    0x27, 0x66, 0x27, 0x26, 0x47, 0xf6, 0x05, 0x00,
-    0x04, 0xe9, 0x02, 0x60, 0x36, 0x85, 0x06, 0x04,
-    0xe5, 0x01, 0xe9, 0x02, 0x85, 0x00, 0xe5, 0x21,
-    0xa6, 0x27, 0x26, 0x27, 0x26, 0xe0, 0x01, 0x45,
-    0x06, 0xe5, 0x00, 0x06, 0x07, 0x20, 0xe9, 0x02,
-    0x20, 0x76, 0xe5, 0x08, 0x04, 0xa5, 0x4f, 0x05,
-    0x07, 0x06, 0x07, 0xe5, 0x2a, 0x06, 0x05, 0x46,
-    0x25, 0x26, 0x85, 0x26, 0x05, 0x06, 0x05, 0xe0,
-    0x10, 0x25, 0x04, 0x36, 0xe5, 0x03, 0x07, 0x26,
-    0x27, 0x36, 0x05, 0x24, 0x07, 0x06, 0xe0, 0x02,
-    0xa5, 0x20, 0xa5, 0x20, 0xa5, 0xe0, 0x01, 0xc5,
-    0x00, 0xc5, 0x00, 0xe2, 0x23, 0x0e, 0x64, 0xe2,
-    0x01, 0x04, 0x2e, 0x60, 0xe2, 0x48, 0xe5, 0x1b,
-    0x27, 0x06, 0x27, 0x06, 0x27, 0x16, 0x07, 0x06,
-    0x20, 0xe9, 0x02, 0xa0, 0xe5, 0xab, 0x1c, 0xe0,
-    0x04, 0xe5, 0x0f, 0x60, 0xe5, 0x29, 0x60, 0xfc,
-    0x87, 0x78, 0xfd, 0x98, 0x78, 0xe5, 0x80, 0xe6,
-    0x20, 0xe5, 0x62, 0xe0, 0x1e, 0xc2, 0xe0, 0x04,
-    0x82, 0x80, 0x05, 0x06, 0xe5, 0x02, 0x0c, 0xe5,
-    0x05, 0x00, 0x85, 0x00, 0x05, 0x00, 0x25, 0x00,
-    0x25, 0x00, 0xe5, 0x64, 0xee, 0x09, 0xe0, 0x08,
-    0xe5, 0x80, 0xe3, 0x13, 0x12, 0xef, 0x08, 0xe5,
-    0x38, 0x20, 0xe5, 0x2e, 0xc0, 0x0f, 0xe0, 0x18,
-    0xe5, 0x04, 0x0d, 0x4f, 0xe6, 0x08, 0xd6, 0x12,
-    0x13, 0x16, 0xa0, 0xe6, 0x08, 0x16, 0x31, 0x30,
+    0xec, 0x08, 0xef, 0x80, 0x78, 0xec, 0x7b, 0x12,
+    0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12,
+    0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12,
+    0x13, 0x12, 0x13, 0x12, 0x13, 0xec, 0x37, 0x12,
+    0x13, 0x12, 0x13, 0xec, 0x18, 0x12, 0x13, 0xec,
+    0x80, 0x7a, 0xef, 0x28, 0xec, 0x0d, 0x2f, 0xac,
+    0xef, 0x1f, 0x20, 0xef, 0x18, 0x00, 0xef, 0x61,
+    0xe1, 0x27, 0x00, 0xe2, 0x27, 0x00, 0x5f, 0x21,
+    0x22, 0xdf, 0x41, 0x02, 0x3f, 0x02, 0x3f, 0x82,
+    0x24, 0x41, 0x02, 0xff, 0x5a, 0x02, 0xaf, 0x7f,
+    0x46, 0x3f, 0x80, 0x76, 0x0b, 0x36, 0xe2, 0x1e,
+    0x00, 0x02, 0x80, 0x02, 0x20, 0xe5, 0x30, 0xc0,
+    0x04, 0x16, 0xe0, 0x06, 0x06, 0xe5, 0x0f, 0xe0,
+    0x01, 0xc5, 0x00, 0xc5, 0x00, 0xc5, 0x00, 0xc5,
+    0x00, 0xc5, 0x00, 0xc5, 0x00, 0xc5, 0x00, 0xc5,
+    0x00, 0xe6, 0x18, 0x36, 0x14, 0x15, 0x14, 0x15,
+    0x56, 0x14, 0x15, 0x16, 0x14, 0x15, 0xf6, 0x01,
+    0x11, 0x36, 0x11, 0x16, 0x14, 0x15, 0x36, 0x14,
+    0x15, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12,
+    0x13, 0x96, 0x04, 0xf6, 0x02, 0x31, 0x76, 0x11,
+    0x16, 0x12, 0xf6, 0x05, 0x2f, 0x16, 0xe0, 0x25,
+    0xef, 0x12, 0x00, 0xef, 0x51, 0xe0, 0x04, 0xef,
+    0x80, 0x4e, 0xe0, 0x12, 0xef, 0x04, 0x60, 0x17,
+    0x56, 0x0f, 0x04, 0x05, 0x0a, 0x12, 0x13, 0x12,
+    0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x2f,
     0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13,
+    0x11, 0x12, 0x33, 0x0f, 0xea, 0x01, 0x66, 0x27,
+    0x11, 0x84, 0x2f, 0x4a, 0x04, 0x05, 0x16, 0x2f,
+    0x00, 0xe5, 0x4e, 0x20, 0x26, 0x2e, 0x24, 0x05,
+    0x11, 0xe5, 0x52, 0x16, 0x44, 0x05, 0x80, 0xe5,
+    0x23, 0x00, 0xe5, 0x56, 0x00, 0x2f, 0x6b, 0xef,
+    0x02, 0xe5, 0x18, 0xef, 0x1c, 0xe0, 0x04, 0xe5,
+    0x08, 0xef, 0x17, 0x00, 0xeb, 0x02, 0xef, 0x16,
+    0xeb, 0x00, 0x0f, 0xeb, 0x07, 0xef, 0x18, 0xeb,
+    0x02, 0xef, 0x1f, 0xeb, 0x07, 0xef, 0x80, 0xb8,
+    0xe5, 0x99, 0x38, 0xef, 0x38, 0xe5, 0xc0, 0x11,
+    0x75, 0x40, 0xe5, 0x0d, 0x04, 0xe5, 0x83, 0xef,
+    0x40, 0xef, 0x2f, 0xe0, 0x01, 0xe5, 0x20, 0xa4,
+    0x36, 0xe5, 0x80, 0x84, 0x04, 0x56, 0xe5, 0x08,
+    0xe9, 0x02, 0x25, 0xe0, 0x0c, 0xff, 0x26, 0x05,
+    0x06, 0x48, 0x16, 0xe6, 0x02, 0x16, 0x04, 0xff,
+    0x14, 0x24, 0x26, 0xe5, 0x3e, 0xea, 0x02, 0x26,
+    0xb6, 0xe0, 0x00, 0xee, 0x0f, 0xe4, 0x01, 0x2e,
+    0xff, 0x06, 0x22, 0xff, 0x36, 0x04, 0xe2, 0x00,
+    0x9f, 0xff, 0x02, 0x04, 0x2e, 0x7f, 0x05, 0x7f,
+    0x22, 0xff, 0x0d, 0x61, 0x02, 0x81, 0x02, 0xff,
+    0x02, 0x20, 0x5f, 0x41, 0x02, 0x3f, 0xe0, 0x22,
+    0x3f, 0x05, 0x24, 0x02, 0xc5, 0x06, 0x45, 0x06,
+    0x65, 0x06, 0xe5, 0x0f, 0x27, 0x26, 0x07, 0x6f,
+    0x06, 0x40, 0xab, 0x2f, 0x0d, 0x0f, 0xa0, 0xe5,
+    0x2c, 0x76, 0xe0, 0x00, 0x27, 0xe5, 0x2a, 0xe7,
+    0x08, 0x26, 0xe0, 0x00, 0x36, 0xe9, 0x02, 0xa0,
+    0xe6, 0x0a, 0xa5, 0x56, 0x05, 0x16, 0x25, 0x06,
+    0xe9, 0x02, 0xe5, 0x14, 0xe6, 0x00, 0x36, 0xe5,
+    0x0f, 0xe6, 0x03, 0x27, 0xe0, 0x03, 0x16, 0xe5,
+    0x15, 0x40, 0x46, 0x07, 0xe5, 0x27, 0x06, 0x27,
+    0x66, 0x27, 0x26, 0x47, 0xf6, 0x05, 0x00, 0x04,
+    0xe9, 0x02, 0x60, 0x36, 0x85, 0x06, 0x04, 0xe5,
+    0x01, 0xe9, 0x02, 0x85, 0x00, 0xe5, 0x21, 0xa6,
+    0x27, 0x26, 0x27, 0x26, 0xe0, 0x01, 0x45, 0x06,
+    0xe5, 0x00, 0x06, 0x07, 0x20, 0xe9, 0x02, 0x20,
+    0x76, 0xe5, 0x08, 0x04, 0xa5, 0x4f, 0x05, 0x07,
+    0x06, 0x07, 0xe5, 0x2a, 0x06, 0x05, 0x46, 0x25,
+    0x26, 0x85, 0x26, 0x05, 0x06, 0x05, 0xe0, 0x10,
+    0x25, 0x04, 0x36, 0xe5, 0x03, 0x07, 0x26, 0x27,
+    0x36, 0x05, 0x24, 0x07, 0x06, 0xe0, 0x02, 0xa5,
+    0x20, 0xa5, 0x20, 0xa5, 0xe0, 0x01, 0xc5, 0x00,
+    0xc5, 0x00, 0xe2, 0x23, 0x0e, 0x64, 0xe2, 0x01,
+    0x04, 0x2e, 0x60, 0xe2, 0x48, 0xe5, 0x1b, 0x27,
+    0x06, 0x27, 0x06, 0x27, 0x16, 0x07, 0x06, 0x20,
+    0xe9, 0x02, 0xa0, 0xe5, 0xab, 0x1c, 0xe0, 0x04,
+    0xe5, 0x0f, 0x60, 0xe5, 0x29, 0x60, 0xfc, 0x87,
+    0x78, 0xfd, 0x98, 0x78, 0xe5, 0x80, 0xe6, 0x20,
+    0xe5, 0x62, 0xe0, 0x1e, 0xc2, 0xe0, 0x04, 0x82,
+    0x80, 0x05, 0x06, 0xe5, 0x02, 0x0c, 0xe5, 0x05,
+    0x00, 0x85, 0x00, 0x05, 0x00, 0x25, 0x00, 0x25,
+    0x00, 0xe5, 0x64, 0xee, 0x08, 0xe0, 0x09, 0xe5,
+    0x80, 0xe3, 0x13, 0x12, 0xe0, 0x08, 0xe5, 0x38,
+    0x20, 0xe5, 0x2e, 0xe0, 0x20, 0xe5, 0x04, 0x0d,
+    0x0f, 0x20, 0xe6, 0x08, 0xd6, 0x12, 0x13, 0x16,
+    0xa0, 0xe6, 0x08, 0x16, 0x31, 0x30, 0x12, 0x13,
     0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13,
-    0x36, 0x12, 0x13, 0x76, 0x50, 0x56, 0x00, 0x76,
-    0x11, 0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x56,
-    0x0c, 0x11, 0x4c, 0x00, 0x16, 0x0d, 0x36, 0x60,
-    0x85, 0x00, 0xe5, 0x7f, 0x20, 0x1b, 0x00, 0x56,
-    0x0d, 0x56, 0x12, 0x13, 0x16, 0x0c, 0x16, 0x11,
-    0x36, 0xe9, 0x02, 0x36, 0x4c, 0x36, 0xe1, 0x12,
-    0x12, 0x16, 0x13, 0x0e, 0x10, 0x0e, 0xe2, 0x12,
-    0x12, 0x0c, 0x13, 0x0c, 0x12, 0x13, 0x16, 0x12,
-    0x13, 0x36, 0xe5, 0x02, 0x04, 0xe5, 0x25, 0x24,
-    0xe5, 0x17, 0x40, 0xa5, 0x20, 0xa5, 0x20, 0xa5,
-    0x20, 0x45, 0x40, 0x2d, 0x0c, 0x0e, 0x0f, 0x2d,
-    0x00, 0x0f, 0x6c, 0x2f, 0xe0, 0x02, 0x5b, 0x2f,
-    0x20, 0xe5, 0x04, 0x00, 0xe5, 0x12, 0x00, 0xe5,
-    0x0b, 0x00, 0x25, 0x00, 0xe5, 0x07, 0x20, 0xe5,
-    0x06, 0xe0, 0x1a, 0xe5, 0x73, 0x80, 0x56, 0x60,
-    0xeb, 0x25, 0x40, 0xef, 0x01, 0xea, 0x2d, 0x6b,
-    0xef, 0x09, 0x2b, 0x4f, 0x00, 0xef, 0x05, 0x40,
-    0x0f, 0xe0, 0x27, 0xef, 0x25, 0x06, 0xe0, 0x7a,
-    0xe5, 0x15, 0x40, 0xe5, 0x29, 0xe0, 0x07, 0x06,
-    0xeb, 0x13, 0x60, 0xe5, 0x18, 0x6b, 0xe0, 0x01,
-    0xe5, 0x0c, 0x0a, 0xe5, 0x00, 0x0a, 0x80, 0xe5,
-    0x1e, 0x86, 0x80, 0xe5, 0x16, 0x00, 0x16, 0xe5,
-    0x1c, 0x60, 0xe5, 0x00, 0x16, 0x8a, 0xe0, 0x22,
-    0xe1, 0x20, 0xe2, 0x20, 0xe5, 0x46, 0x20, 0xe9,
-    0x02, 0xa0, 0xe1, 0x1c, 0x60, 0xe2, 0x1c, 0x60,
-    0xe5, 0x20, 0xe0, 0x00, 0xe5, 0x2c, 0xe0, 0x03,
-    0x16, 0xe1, 0x03, 0x00, 0xe1, 0x07, 0x00, 0xc1,
-    0x00, 0x21, 0x00, 0xe2, 0x03, 0x00, 0xe2, 0x07,
-    0x00, 0xc2, 0x00, 0x22, 0xe0, 0x3b, 0xe5, 0x80,
-    0xaf, 0xe0, 0x01, 0xe5, 0x0e, 0xe0, 0x02, 0xe5,
-    0x00, 0xe0, 0x10, 0xa4, 0x00, 0xe4, 0x22, 0x00,
-    0xe4, 0x01, 0xe0, 0x3d, 0xa5, 0x20, 0x05, 0x00,
-    0xe5, 0x24, 0x00, 0x25, 0x40, 0x05, 0x20, 0xe5,
-    0x0f, 0x00, 0x16, 0xeb, 0x00, 0xe5, 0x0f, 0x2f,
-    0xcb, 0xe5, 0x17, 0xe0, 0x00, 0xeb, 0x01, 0xe0,
-    0x28, 0xe5, 0x0b, 0x00, 0x25, 0x80, 0x8b, 0xe5,
-    0x0e, 0xab, 0x40, 0x16, 0xe5, 0x12, 0x80, 0x16,
-    0xe0, 0x38, 0xe5, 0x30, 0x60, 0x2b, 0x25, 0xeb,
-    0x08, 0x20, 0xeb, 0x26, 0x05, 0x46, 0x00, 0x26,
-    0x80, 0x66, 0x65, 0x00, 0x45, 0x00, 0xe5, 0x15,
-    0x20, 0x46, 0x60, 0x06, 0xeb, 0x01, 0xc0, 0xf6,
-    0x01, 0xc0, 0xe5, 0x15, 0x2b, 0x16, 0xe5, 0x15,
-    0x4b, 0xe0, 0x18, 0xe5, 0x00, 0x0f, 0xe5, 0x14,
-    0x26, 0x60, 0x8b, 0xd6, 0xe0, 0x01, 0xe5, 0x2e,
-    0x40, 0xd6, 0xe5, 0x0e, 0x20, 0xeb, 0x00, 0xe5,
-    0x0b, 0x80, 0xeb, 0x00, 0xe5, 0x0a, 0xc0, 0x76,
-    0xe0, 0x04, 0xcb, 0xe0, 0x48, 0xe5, 0x41, 0xe0,
-    0x2f, 0xe1, 0x2b, 0xe0, 0x05, 0xe2, 0x2b, 0xc0,
-    0xab, 0xe5, 0x1c, 0x66, 0xe0, 0x00, 0xe9, 0x02,
-    0xe0, 0x80, 0x9e, 0xeb, 0x17, 0x00, 0xe5, 0x22,
-    0x00, 0x26, 0x11, 0x20, 0x25, 0xe0, 0x46, 0xe5,
-    0x15, 0xeb, 0x02, 0x05, 0xe0, 0x00, 0xe5, 0x0e,
-    0xe6, 0x03, 0x6b, 0x96, 0xe0, 0x0e, 0xe5, 0x0a,
-    0x66, 0x76, 0xe0, 0x1e, 0xe5, 0x0d, 0xcb, 0xe0,
-    0x0c, 0xe5, 0x0f, 0xe0, 0x01, 0x07, 0x06, 0x07,
-    0xe5, 0x2d, 0xe6, 0x07, 0xd6, 0x60, 0xeb, 0x0c,
-    0xe9, 0x02, 0x06, 0x25, 0x26, 0x05, 0xe0, 0x01,
-    0x46, 0x07, 0xe5, 0x25, 0x47, 0x66, 0x27, 0x26,
-    0x36, 0x1b, 0x76, 0x06, 0xe0, 0x02, 0x1b, 0x20,
-    0xe5, 0x11, 0xc0, 0xe9, 0x02, 0xa0, 0x46, 0xe5,
-    0x1c, 0x86, 0x07, 0xe6, 0x00, 0x00, 0xe9, 0x02,
-    0x76, 0x05, 0x27, 0x05, 0xe0, 0x00, 0xe5, 0x1b,
-    0x06, 0x36, 0x05, 0xe0, 0x01, 0x26, 0x07, 0xe5,
-    0x28, 0x47, 0xe6, 0x01, 0x27, 0x65, 0x76, 0x66,
-    0x16, 0x07, 0x06, 0xe9, 0x02, 0x05, 0x16, 0x05,
-    0x56, 0x00, 0xeb, 0x0c, 0xe0, 0x03, 0xe5, 0x0a,
-    0x00, 0xe5, 0x11, 0x47, 0x46, 0x27, 0x06, 0x07,
-    0x26, 0xb6, 0x06, 0xe0, 0x39, 0xc5, 0x00, 0x05,
-    0x00, 0x65, 0x00, 0xe5, 0x07, 0x00, 0xe5, 0x02,
-    0x16, 0xa0, 0xe5, 0x27, 0x06, 0x47, 0xe6, 0x00,
-    0x80, 0xe9, 0x02, 0xa0, 0x26, 0x27, 0x00, 0xe5,
-    0x00, 0x20, 0x25, 0x20, 0xe5, 0x0e, 0x00, 0xc5,
-    0x00, 0x25, 0x00, 0x85, 0x00, 0x26, 0x05, 0x27,
-    0x06, 0x67, 0x20, 0x27, 0x20, 0x47, 0x20, 0x05,
-    0xa0, 0x07, 0x80, 0x85, 0x27, 0x20, 0xc6, 0x40,
-    0x86, 0xe0, 0x80, 0x03, 0xe5, 0x2d, 0x47, 0xe6,
-    0x00, 0x27, 0x46, 0x07, 0x06, 0x65, 0x96, 0xe9,
-    0x02, 0x36, 0x00, 0x16, 0x06, 0x45, 0xe0, 0x16,
-    0xe5, 0x28, 0x47, 0xa6, 0x07, 0x06, 0x67, 0x26,
-    0x07, 0x26, 0x25, 0x16, 0x05, 0xe0, 0x00, 0xe9,
-    0x02, 0xe0, 0x80, 0x1e, 0xe5, 0x27, 0x47, 0x66,
-    0x20, 0x67, 0x26, 0x07, 0x26, 0xf6, 0x0f, 0x65,
-    0x26, 0xe0, 0x1a, 0xe5, 0x28, 0x47, 0xe6, 0x00,
-    0x27, 0x06, 0x07, 0x26, 0x56, 0x05, 0xe0, 0x03,
-    0xe9, 0x02, 0xa0, 0xf6, 0x05, 0xe0, 0x0b, 0xe5,
-    0x23, 0x06, 0x07, 0x06, 0x27, 0xa6, 0x07, 0x06,
-    0x05, 0x16, 0xa0, 0xe9, 0x02, 0xe0, 0x2e, 0xe5,
+    0x12, 0x13, 0x12, 0x13, 0x12, 0x13, 0x36, 0x12,
+    0x13, 0x76, 0x50, 0x56, 0x00, 0x76, 0x11, 0x12,
+    0x13, 0x12, 0x13, 0x12, 0x13, 0x56, 0x0c, 0x11,
+    0x4c, 0x00, 0x16, 0x0d, 0x36, 0x60, 0x85, 0x00,
+    0xe5, 0x7f, 0x20, 0x1b, 0x00, 0x56, 0x0d, 0x56,
+    0x12, 0x13, 0x16, 0x0c, 0x16, 0x11, 0x36, 0xe9,
+    0x02, 0x36, 0x4c, 0x36, 0xe1, 0x12, 0x12, 0x16,
+    0x13, 0x0e, 0x10, 0x0e, 0xe2, 0x12, 0x12, 0x0c,
+    0x13, 0x0c, 0x12, 0x13, 0x16, 0x12, 0x13, 0x36,
+    0xe5, 0x02, 0x04, 0xe5, 0x25, 0x24, 0xe5, 0x17,
+    0x40, 0xa5, 0x20, 0xa5, 0x20, 0xa5, 0x20, 0x45,
+    0x40, 0x2d, 0x0c, 0x0e, 0x0f, 0x2d, 0x00, 0x0f,
+    0x6c, 0x2f, 0xe0, 0x02, 0x5b, 0x2f, 0x20, 0xe5,
+    0x04, 0x00, 0xe5, 0x12, 0x00, 0xe5, 0x0b, 0x00,
+    0x25, 0x00, 0xe5, 0x07, 0x20, 0xe5, 0x06, 0xe0,
+    0x1a, 0xe5, 0x73, 0x80, 0x56, 0x60, 0xeb, 0x25,
+    0x40, 0xef, 0x01, 0xea, 0x2d, 0x6b, 0xef, 0x09,
+    0x2b, 0x4f, 0x00, 0xef, 0x05, 0x40, 0x0f, 0xe0,
+    0x27, 0xef, 0x25, 0x06, 0xe0, 0x7a, 0xe5, 0x15,
+    0x40, 0xe5, 0x29, 0xe0, 0x07, 0x06, 0xeb, 0x13,
+    0x60, 0xe5, 0x18, 0x6b, 0xe0, 0x01, 0xe5, 0x0c,
+    0x0a, 0xe5, 0x00, 0x0a, 0x80, 0xe5, 0x1e, 0x86,
+    0x80, 0xe5, 0x16, 0x00, 0x16, 0xe5, 0x1c, 0x60,
+    0xe5, 0x00, 0x16, 0x8a, 0xe0, 0x22, 0xe1, 0x20,
+    0xe2, 0x20, 0xe5, 0x46, 0x20, 0xe9, 0x02, 0xa0,
+    0xe1, 0x1c, 0x60, 0xe2, 0x1c, 0x60, 0xe5, 0x20,
+    0xe0, 0x00, 0xe5, 0x2c, 0xe0, 0x03, 0x16, 0xe0,
+    0x80, 0x08, 0xe5, 0x80, 0xaf, 0xe0, 0x01, 0xe5,
+    0x0e, 0xe0, 0x02, 0xe5, 0x00, 0xe0, 0x80, 0x10,
+    0xa5, 0x20, 0x05, 0x00, 0xe5, 0x24, 0x00, 0x25,
+    0x40, 0x05, 0x20, 0xe5, 0x0f, 0x00, 0x16, 0xeb,
+    0x00, 0xe5, 0x0f, 0x2f, 0xcb, 0xe5, 0x17, 0xe0,
+    0x00, 0xeb, 0x01, 0xe0, 0x28, 0xe5, 0x0b, 0x00,
+    0x25, 0x80, 0x8b, 0xe5, 0x0e, 0xab, 0x40, 0x16,
+    0xe5, 0x12, 0x80, 0x16, 0xe0, 0x38, 0xe5, 0x30,
+    0x60, 0x2b, 0x25, 0xeb, 0x08, 0x20, 0xeb, 0x26,
+    0x05, 0x46, 0x00, 0x26, 0x80, 0x66, 0x65, 0x00,
+    0x45, 0x00, 0xe5, 0x15, 0x20, 0x46, 0x60, 0x06,
+    0xeb, 0x01, 0xc0, 0xf6, 0x01, 0xc0, 0xe5, 0x15,
+    0x2b, 0x16, 0xe5, 0x15, 0x4b, 0xe0, 0x18, 0xe5,
+    0x00, 0x0f, 0xe5, 0x14, 0x26, 0x60, 0x8b, 0xd6,
+    0xe0, 0x01, 0xe5, 0x2e, 0x40, 0xd6, 0xe5, 0x0e,
+    0x20, 0xeb, 0x00, 0xe5, 0x0b, 0x80, 0xeb, 0x00,
+    0xe5, 0x0a, 0xc0, 0x76, 0xe0, 0x04, 0xcb, 0xe0,
+    0x48, 0xe5, 0x41, 0xe0, 0x2f, 0xe1, 0x2b, 0xe0,
+    0x05, 0xe2, 0x2b, 0xc0, 0xab, 0xe5, 0x1c, 0x66,
+    0xe0, 0x00, 0xe9, 0x02, 0xe0, 0x80, 0x9e, 0xeb,
+    0x17, 0x00, 0xe5, 0x22, 0x00, 0x26, 0x11, 0x20,
+    0x25, 0xe0, 0x46, 0xe5, 0x15, 0xeb, 0x02, 0x05,
+    0xe0, 0x00, 0xe5, 0x0e, 0xe6, 0x03, 0x6b, 0x96,
+    0xe0, 0x4e, 0xe5, 0x0d, 0xcb, 0xe0, 0x0c, 0xe5,
+    0x0f, 0xe0, 0x01, 0x07, 0x06, 0x07, 0xe5, 0x2d,
+    0xe6, 0x07, 0xd6, 0x60, 0xeb, 0x0c, 0xe9, 0x02,
+    0xe0, 0x07, 0x46, 0x07, 0xe5, 0x25, 0x47, 0x66,
+    0x27, 0x26, 0x36, 0x1b, 0x76, 0xe0, 0x03, 0x1b,
+    0x20, 0xe5, 0x11, 0xc0, 0xe9, 0x02, 0xa0, 0x46,
+    0xe5, 0x1c, 0x86, 0x07, 0xe6, 0x00, 0x00, 0xe9,
+    0x02, 0x76, 0x05, 0x27, 0x05, 0xe0, 0x00, 0xe5,
+    0x1b, 0x06, 0x36, 0x05, 0xe0, 0x01, 0x26, 0x07,
+    0xe5, 0x28, 0x47, 0xe6, 0x01, 0x27, 0x65, 0x76,
+    0x66, 0x16, 0x07, 0x06, 0xe9, 0x02, 0x05, 0x16,
+    0x05, 0x56, 0x00, 0xeb, 0x0c, 0xe0, 0x03, 0xe5,
+    0x0a, 0x00, 0xe5, 0x11, 0x47, 0x46, 0x27, 0x06,
+    0x07, 0x26, 0xb6, 0x06, 0xe0, 0x39, 0xc5, 0x00,
+    0x05, 0x00, 0x65, 0x00, 0xe5, 0x07, 0x00, 0xe5,
+    0x02, 0x16, 0xa0, 0xe5, 0x27, 0x06, 0x47, 0xe6,
+    0x00, 0x80, 0xe9, 0x02, 0xa0, 0x26, 0x27, 0x00,
+    0xe5, 0x00, 0x20, 0x25, 0x20, 0xe5, 0x0e, 0x00,
+    0xc5, 0x00, 0x25, 0x00, 0x85, 0x00, 0x26, 0x05,
+    0x27, 0x06, 0x67, 0x20, 0x27, 0x20, 0x47, 0x20,
+    0x05, 0xa0, 0x07, 0x80, 0x85, 0x27, 0x20, 0xc6,
+    0x40, 0x86, 0xe0, 0x80, 0x03, 0xe5, 0x2d, 0x47,
+    0xe6, 0x00, 0x27, 0x46, 0x07, 0x06, 0x65, 0x96,
+    0xe9, 0x02, 0x36, 0x00, 0x16, 0x06, 0x45, 0xe0,
+    0x16, 0xe5, 0x28, 0x47, 0xa6, 0x07, 0x06, 0x67,
+    0x26, 0x07, 0x26, 0x25, 0x16, 0x05, 0xe0, 0x00,
+    0xe9, 0x02, 0xe0, 0x80, 0x1e, 0xe5, 0x27, 0x47,
+    0x66, 0x20, 0x67, 0x26, 0x07, 0x26, 0xf6, 0x0f,
+    0x65, 0x26, 0xe0, 0x1a, 0xe5, 0x28, 0x47, 0xe6,
+    0x00, 0x27, 0x06, 0x07, 0x26, 0x56, 0x05, 0xe0,
+    0x03, 0xe9, 0x02, 0xa0, 0xf6, 0x05, 0xe0, 0x0b,
+    0xe5, 0x23, 0x06, 0x07, 0x06, 0x27, 0xa6, 0x07,
+    0x06, 0x05, 0xc0, 0xe9, 0x02, 0xe0, 0x2e, 0xe5,
     0x13, 0x20, 0x46, 0x27, 0x66, 0x07, 0x86, 0x60,
-    0xe9, 0x02, 0x2b, 0x56, 0x0f, 0xc5, 0xe0, 0x80,
-    0x31, 0xe5, 0x24, 0x47, 0xe6, 0x01, 0x07, 0x26,
-    0x16, 0xe0, 0x5c, 0xe1, 0x18, 0xe2, 0x18, 0xe9,
-    0x02, 0xeb, 0x01, 0xe0, 0x04, 0xe5, 0x00, 0x20,
-    0x05, 0x20, 0xe5, 0x00, 0x00, 0x25, 0x00, 0xe5,
-    0x10, 0xa7, 0x00, 0x27, 0x20, 0x26, 0x07, 0x06,
-    0x05, 0x07, 0x05, 0x07, 0x06, 0x56, 0xe0, 0x01,
-    0xe9, 0x02, 0xe0, 0x3e, 0xe5, 0x00, 0x20, 0xe5,
-    0x1f, 0x47, 0x66, 0x20, 0x26, 0x67, 0x06, 0x05,
-    0x16, 0x05, 0x07, 0xe0, 0x13, 0x05, 0xe6, 0x02,
-    0xe5, 0x20, 0xa6, 0x07, 0x05, 0x66, 0xf6, 0x00,
-    0x06, 0xe0, 0x00, 0x05, 0xa6, 0x27, 0x46, 0xe5,
-    0x26, 0xe6, 0x05, 0x07, 0x26, 0x56, 0x05, 0x96,
-    0xe0, 0x05, 0xe5, 0x41, 0xe0, 0x80, 0x7f, 0xe5,
-    0x01, 0x00, 0xe5, 0x1d, 0x07, 0xc6, 0x00, 0xa6,
-    0x07, 0x06, 0x05, 0x96, 0xe0, 0x02, 0xe9, 0x02,
-    0xeb, 0x0b, 0x40, 0x36, 0xe5, 0x16, 0x20, 0xe6,
-    0x0e, 0x00, 0x07, 0xc6, 0x07, 0x26, 0x07, 0x26,
-    0xe0, 0x41, 0xc5, 0x00, 0x25, 0x00, 0xe5, 0x1e,
-    0xa6, 0x40, 0x06, 0x00, 0x26, 0x00, 0xc6, 0x05,
-    0x06, 0xe0, 0x00, 0xe9, 0x02, 0xa0, 0xa5, 0x00,
-    0x25, 0x00, 0xe5, 0x18, 0x87, 0x00, 0x26, 0x00,
-    0x27, 0x06, 0x07, 0x06, 0x05, 0xc0, 0xe9, 0x02,
-    0xe0, 0x80, 0xae, 0xe5, 0x0b, 0x26, 0x27, 0x36,
-    0xe0, 0x80, 0x2f, 0x05, 0xe0, 0x07, 0xeb, 0x0d,
-    0xef, 0x00, 0x6d, 0xef, 0x09, 0xe0, 0x05, 0x16,
-    0xe5, 0x83, 0x12, 0xe0, 0x5e, 0xea, 0x67, 0x00,
-    0x96, 0xe0, 0x03, 0xe5, 0x80, 0x3c, 0xe0, 0x89,
-    0xc4, 0xe5, 0x59, 0x36, 0xe0, 0x05, 0xe5, 0x83,
-    0xa7, 0x00, 0xfb, 0x01, 0xe0, 0x8f, 0x3f, 0xe5,
-    0x81, 0xbf, 0xe0, 0xa1, 0x31, 0xe5, 0x81, 0xb1,
-    0xc0, 0xe5, 0x17, 0x00, 0xe9, 0x02, 0x60, 0x36,
-    0xe5, 0x47, 0x00, 0xe9, 0x02, 0xa0, 0xe5, 0x16,
-    0x20, 0x86, 0x16, 0xe0, 0x02, 0xe5, 0x28, 0xc6,
-    0x96, 0x6f, 0x64, 0x16, 0x0f, 0xe0, 0x02, 0xe9,
-    0x02, 0x00, 0xcb, 0x00, 0xe5, 0x0d, 0x80, 0xe5,
-    0x0b, 0xe0, 0x82, 0x28, 0xe1, 0x18, 0xe2, 0x18,
-    0xeb, 0x0f, 0x76, 0xe0, 0x5d, 0xe5, 0x43, 0x60,
-    0x06, 0x05, 0xe7, 0x2f, 0xc0, 0x66, 0xe4, 0x05,
-    0xe0, 0x38, 0x24, 0x16, 0x04, 0x06, 0xe0, 0x03,
-    0x27, 0xe0, 0x06, 0xe5, 0x97, 0x70, 0xe0, 0x00,
-    0xe5, 0x84, 0x4e, 0xe0, 0x22, 0xe5, 0x01, 0xe0,
-    0xa2, 0x5f, 0x64, 0x00, 0xc4, 0x00, 0x24, 0x00,
-    0xe5, 0x80, 0x9b, 0xe0, 0x25, 0x45, 0xe0, 0x09,
+    0xe9, 0x02, 0x2b, 0x56, 0x0f, 0xe0, 0x80, 0x38,
+    0xe5, 0x24, 0x47, 0xe6, 0x01, 0x07, 0x26, 0x16,
+    0xe0, 0x5c, 0xe1, 0x18, 0xe2, 0x18, 0xe9, 0x02,
+    0xeb, 0x01, 0xe0, 0x04, 0xe5, 0x00, 0x20, 0x05,
+    0x20, 0xe5, 0x00, 0x00, 0x25, 0x00, 0xe5, 0x10,
+    0xa7, 0x00, 0x27, 0x20, 0x26, 0x07, 0x06, 0x05,
+    0x07, 0x05, 0x07, 0x06, 0x56, 0xe0, 0x01, 0xe9,
+    0x02, 0xe0, 0x3e, 0xe5, 0x00, 0x20, 0xe5, 0x1f,
+    0x47, 0x66, 0x20, 0x26, 0x67, 0x06, 0x05, 0x16,
+    0x05, 0x07, 0xe0, 0x13, 0x05, 0xe6, 0x02, 0xe5,
+    0x20, 0xa6, 0x07, 0x05, 0x66, 0xf6, 0x00, 0x06,
+    0xe0, 0x00, 0x05, 0xa6, 0x27, 0x46, 0xe5, 0x26,
+    0xe6, 0x05, 0x07, 0x26, 0x56, 0x05, 0x96, 0xe0,
+    0x15, 0xe5, 0x31, 0xe0, 0x80, 0x7f, 0xe5, 0x01,
+    0x00, 0xe5, 0x1d, 0x07, 0xc6, 0x00, 0xa6, 0x07,
+    0x06, 0x05, 0x96, 0xe0, 0x02, 0xe9, 0x02, 0xeb,
+    0x0b, 0x40, 0x36, 0xe5, 0x16, 0x20, 0xe6, 0x0e,
+    0x00, 0x07, 0xc6, 0x07, 0x26, 0x07, 0x26, 0xe0,
+    0x41, 0xc5, 0x00, 0x25, 0x00, 0xe5, 0x1e, 0xa6,
+    0x40, 0x06, 0x00, 0x26, 0x00, 0xc6, 0x05, 0x06,
+    0xe0, 0x00, 0xe9, 0x02, 0xa0, 0xa5, 0x00, 0x25,
+    0x00, 0xe5, 0x18, 0x87, 0x00, 0x26, 0x00, 0x27,
+    0x06, 0x07, 0x06, 0x05, 0xc0, 0xe9, 0x02, 0xe0,
+    0x80, 0xae, 0xe5, 0x0b, 0x26, 0x27, 0x36, 0xe0,
+    0x80, 0x2f, 0x05, 0xe0, 0x07, 0xeb, 0x0d, 0xef,
+    0x00, 0x6d, 0xef, 0x09, 0xe0, 0x05, 0x16, 0xe5,
+    0x83, 0x12, 0xe0, 0x5e, 0xea, 0x67, 0x00, 0x96,
+    0xe0, 0x03, 0xe5, 0x80, 0x3c, 0xe0, 0x8a, 0x34,
+    0xe5, 0x83, 0xa7, 0x00, 0xfb, 0x01, 0xe0, 0x8f,
+    0x3f, 0xe5, 0x81, 0xbf, 0xe0, 0xa1, 0x31, 0xe5,
+    0x81, 0xb1, 0xc0, 0xe5, 0x17, 0x00, 0xe9, 0x02,
+    0x60, 0x36, 0xe0, 0x58, 0xe5, 0x16, 0x20, 0x86,
+    0x16, 0xe0, 0x02, 0xe5, 0x28, 0xc6, 0x96, 0x6f,
+    0x64, 0x16, 0x0f, 0xe0, 0x02, 0xe9, 0x02, 0x00,
+    0xcb, 0x00, 0xe5, 0x0d, 0x80, 0xe5, 0x0b, 0xe0,
+    0x82, 0x28, 0xe1, 0x18, 0xe2, 0x18, 0xeb, 0x0f,
+    0x76, 0xe0, 0x5d, 0xe5, 0x43, 0x60, 0x06, 0x05,
+    0xe7, 0x2f, 0xc0, 0x66, 0xe4, 0x05, 0xe0, 0x38,
+    0x24, 0x16, 0x04, 0x06, 0xe0, 0x03, 0x27, 0xe0,
+    0x06, 0xe5, 0x97, 0x70, 0xe0, 0x00, 0xe5, 0x84,
+    0x4e, 0xe0, 0x22, 0xe5, 0x01, 0xe0, 0xa2, 0x6f,
+    0xe5, 0x80, 0x97, 0xe0, 0x29, 0x45, 0xe0, 0x09,
     0x65, 0xe0, 0x00, 0xe5, 0x81, 0x04, 0xe0, 0x88,
     0x7c, 0xe5, 0x63, 0x80, 0xe5, 0x05, 0x40, 0xe5,
     0x01, 0xc0, 0xe5, 0x02, 0x20, 0x0f, 0x26, 0x16,
-    0x7b, 0xe0, 0x91, 0xd4, 0xe6, 0x26, 0x20, 0xe6,
-    0x0f, 0xe0, 0x01, 0xef, 0x6c, 0xe0, 0x34, 0xef,
-    0x80, 0x6e, 0xe0, 0x02, 0xef, 0x1f, 0x20, 0xef,
-    0x34, 0x27, 0x46, 0x4f, 0xa7, 0xfb, 0x00, 0xe6,
-    0x00, 0x2f, 0xc6, 0xef, 0x16, 0x66, 0xef, 0x35,
-    0xe0, 0x0d, 0xef, 0x3a, 0x46, 0x0f, 0xe0, 0x80,
-    0x12, 0xeb, 0x0c, 0xe0, 0x04, 0xef, 0x4f, 0xe0,
-    0x01, 0xeb, 0x11, 0xe0, 0x7f, 0xe1, 0x12, 0xe2,
-    0x12, 0xe1, 0x12, 0xc2, 0x00, 0xe2, 0x0a, 0xe1,
-    0x12, 0xe2, 0x12, 0x01, 0x00, 0x21, 0x20, 0x01,
-    0x20, 0x21, 0x20, 0x61, 0x00, 0xe1, 0x00, 0x62,
-    0x00, 0x02, 0x00, 0xc2, 0x00, 0xe2, 0x03, 0xe1,
-    0x12, 0xe2, 0x12, 0x21, 0x00, 0x61, 0x20, 0xe1,
-    0x00, 0x00, 0xc1, 0x00, 0xe2, 0x12, 0x21, 0x00,
-    0x61, 0x00, 0x81, 0x00, 0x01, 0x40, 0xc1, 0x00,
-    0xe2, 0x12, 0xe1, 0x12, 0xe2, 0x12, 0xe1, 0x12,
-    0xe2, 0x12, 0xe1, 0x12, 0xe2, 0x12, 0xe1, 0x12,
-    0xe2, 0x12, 0xe1, 0x12, 0xe2, 0x12, 0xe1, 0x12,
-    0xe2, 0x14, 0x20, 0xe1, 0x11, 0x0c, 0xe2, 0x11,
-    0x0c, 0xa2, 0xe1, 0x11, 0x0c, 0xe2, 0x11, 0x0c,
-    0xa2, 0xe1, 0x11, 0x0c, 0xe2, 0x11, 0x0c, 0xa2,
+    0x7b, 0xe0, 0x92, 0xd4, 0xef, 0x80, 0x6e, 0xe0,
+    0x02, 0xef, 0x1f, 0x20, 0xef, 0x34, 0x27, 0x46,
+    0x4f, 0xa7, 0xfb, 0x00, 0xe6, 0x00, 0x2f, 0xc6,
+    0xef, 0x16, 0x66, 0xef, 0x33, 0xe0, 0x0f, 0xef,
+    0x3a, 0x46, 0x0f, 0xe0, 0x80, 0x12, 0xeb, 0x0c,
+    0xe0, 0x04, 0xef, 0x4f, 0xe0, 0x01, 0xeb, 0x11,
+    0xe0, 0x7f, 0xe1, 0x12, 0xe2, 0x12, 0xe1, 0x12,
+    0xc2, 0x00, 0xe2, 0x0a, 0xe1, 0x12, 0xe2, 0x12,
+    0x01, 0x00, 0x21, 0x20, 0x01, 0x20, 0x21, 0x20,
+    0x61, 0x00, 0xe1, 0x00, 0x62, 0x00, 0x02, 0x00,
+    0xc2, 0x00, 0xe2, 0x03, 0xe1, 0x12, 0xe2, 0x12,
+    0x21, 0x00, 0x61, 0x20, 0xe1, 0x00, 0x00, 0xc1,
+    0x00, 0xe2, 0x12, 0x21, 0x00, 0x61, 0x00, 0x81,
+    0x00, 0x01, 0x40, 0xc1, 0x00, 0xe2, 0x12, 0xe1,
+    0x12, 0xe2, 0x12, 0xe1, 0x12, 0xe2, 0x12, 0xe1,
+    0x12, 0xe2, 0x12, 0xe1, 0x12, 0xe2, 0x12, 0xe1,
+    0x12, 0xe2, 0x12, 0xe1, 0x12, 0xe2, 0x14, 0x20,
     0xe1, 0x11, 0x0c, 0xe2, 0x11, 0x0c, 0xa2, 0xe1,
-    0x11, 0x0c, 0xe2, 0x11, 0x0c, 0xa2, 0x3f, 0x20,
-    0xe9, 0x2a, 0xef, 0x81, 0x78, 0xe6, 0x2f, 0x6f,
-    0xe6, 0x2a, 0xef, 0x00, 0x06, 0xef, 0x06, 0x06,
-    0x2f, 0x96, 0xe0, 0x07, 0x86, 0x00, 0xe6, 0x07,
-    0xe0, 0x83, 0xc8, 0xe2, 0x02, 0x05, 0xe2, 0x0c,
-    0xe0, 0x80, 0x59, 0xc6, 0x00, 0xe6, 0x09, 0x20,
-    0xc6, 0x00, 0x26, 0x00, 0x86, 0xe0, 0x80, 0x4d,
-    0xe5, 0x25, 0x40, 0xc6, 0xc4, 0x20, 0xe9, 0x02,
-    0x60, 0x05, 0x0f, 0xe0, 0x80, 0xb8, 0xe5, 0x16,
-    0x06, 0xe0, 0x09, 0xe5, 0x24, 0x66, 0xe9, 0x02,
-    0x80, 0x0d, 0xe0, 0x84, 0x58, 0xc5, 0x00, 0x65,
-    0x00, 0x25, 0x00, 0xe5, 0x07, 0x00, 0xe5, 0x80,
-    0x3d, 0x20, 0xeb, 0x01, 0xc6, 0xe0, 0x21, 0xe1,
-    0x1a, 0xe2, 0x1a, 0xc6, 0x04, 0x60, 0xe9, 0x02,
-    0x60, 0x36, 0xe0, 0x82, 0x89, 0xeb, 0x33, 0x0f,
-    0x4b, 0x0d, 0x6b, 0xe0, 0x44, 0xeb, 0x25, 0x0f,
-    0xeb, 0x07, 0xe0, 0x80, 0x3a, 0x65, 0x00, 0xe5,
-    0x13, 0x00, 0x25, 0x00, 0x05, 0x20, 0x05, 0x00,
-    0xe5, 0x02, 0x00, 0x65, 0x00, 0x05, 0x00, 0x05,
-    0xa0, 0x05, 0x60, 0x05, 0x00, 0x05, 0x00, 0x05,
-    0x00, 0x45, 0x00, 0x25, 0x00, 0x05, 0x20, 0x05,
-    0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05,
-    0x00, 0x25, 0x00, 0x05, 0x20, 0x65, 0x00, 0xc5,
-    0x00, 0x65, 0x00, 0x65, 0x00, 0x05, 0x00, 0xe5,
-    0x02, 0x00, 0xe5, 0x09, 0x80, 0x45, 0x00, 0x85,
-    0x00, 0xe5, 0x09, 0xe0, 0x2c, 0x2c, 0xe0, 0x80,
-    0x86, 0xef, 0x24, 0x60, 0xef, 0x5c, 0xe0, 0x04,
-    0xef, 0x07, 0x20, 0xef, 0x07, 0x00, 0xef, 0x07,
-    0x00, 0xef, 0x1d, 0xe0, 0x02, 0xeb, 0x05, 0xef,
-    0x80, 0x19, 0xe0, 0x30, 0xef, 0x15, 0xe0, 0x05,
-    0xef, 0x24, 0x60, 0xef, 0x01, 0xc0, 0x2f, 0xe0,
-    0x06, 0xaf, 0xe0, 0x80, 0x12, 0xef, 0x80, 0x73,
-    0x8e, 0xef, 0x82, 0x50, 0x80, 0xef, 0x08, 0x40,
+    0x11, 0x0c, 0xe2, 0x11, 0x0c, 0xa2, 0xe1, 0x11,
+    0x0c, 0xe2, 0x11, 0x0c, 0xa2, 0xe1, 0x11, 0x0c,
+    0xe2, 0x11, 0x0c, 0xa2, 0xe1, 0x11, 0x0c, 0xe2,
+    0x11, 0x0c, 0xa2, 0x3f, 0x20, 0xe9, 0x2a, 0xef,
+    0x81, 0x78, 0xe6, 0x2f, 0x6f, 0xe6, 0x2a, 0xef,
+    0x00, 0x06, 0xef, 0x06, 0x06, 0x2f, 0x96, 0xe0,
+    0x07, 0x86, 0x00, 0xe6, 0x07, 0xe0, 0x84, 0xc8,
+    0xc6, 0x00, 0xe6, 0x09, 0x20, 0xc6, 0x00, 0x26,
+    0x00, 0x86, 0xe0, 0x80, 0x4d, 0xe5, 0x25, 0x40,
+    0xc6, 0xc4, 0x20, 0xe9, 0x02, 0x60, 0x05, 0x0f,
+    0xe0, 0x80, 0xe8, 0xe5, 0x24, 0x66, 0xe9, 0x02,
+    0x80, 0x0d, 0xe0, 0x84, 0x78, 0xe5, 0x80, 0x3d,
+    0x20, 0xeb, 0x01, 0xc6, 0xe0, 0x21, 0xe1, 0x1a,
+    0xe2, 0x1a, 0xc6, 0x04, 0x60, 0xe9, 0x02, 0x60,
+    0x36, 0xe0, 0x82, 0x89, 0xeb, 0x33, 0x0f, 0x4b,
+    0x0d, 0x6b, 0xe0, 0x44, 0xeb, 0x25, 0x0f, 0xeb,
+    0x07, 0xe0, 0x80, 0x3a, 0x65, 0x00, 0xe5, 0x13,
+    0x00, 0x25, 0x00, 0x05, 0x20, 0x05, 0x00, 0xe5,
+    0x02, 0x00, 0x65, 0x00, 0x05, 0x00, 0x05, 0xa0,
+    0x05, 0x60, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00,
+    0x45, 0x00, 0x25, 0x00, 0x05, 0x20, 0x05, 0x00,
+    0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00,
+    0x25, 0x00, 0x05, 0x20, 0x65, 0x00, 0xc5, 0x00,
+    0x65, 0x00, 0x65, 0x00, 0x05, 0x00, 0xe5, 0x02,
+    0x00, 0xe5, 0x09, 0x80, 0x45, 0x00, 0x85, 0x00,
+    0xe5, 0x09, 0xe0, 0x2c, 0x2c, 0xe0, 0x80, 0x86,
+    0xef, 0x24, 0x60, 0xef, 0x5c, 0xe0, 0x04, 0xef,
+    0x07, 0x20, 0xef, 0x07, 0x00, 0xef, 0x07, 0x00,
+    0xef, 0x1d, 0xe0, 0x02, 0xeb, 0x05, 0xef, 0x80,
+    0x19, 0xe0, 0x30, 0xef, 0x15, 0xe0, 0x05, 0xef,
+    0x24, 0x60, 0xef, 0x01, 0xc0, 0x2f, 0xe0, 0x06,
+    0xaf, 0xe0, 0x80, 0x12, 0xef, 0x80, 0x73, 0x8e,
+    0xef, 0x82, 0x50, 0xe0, 0x00, 0xef, 0x05, 0x40,
     0xef, 0x05, 0x40, 0xef, 0x6c, 0xe0, 0x04, 0xef,
-    0x51, 0xc0, 0xef, 0x04, 0x60, 0x0f, 0xe0, 0x07,
-    0xef, 0x04, 0x60, 0xef, 0x30, 0xe0, 0x00, 0xef,
-    0x02, 0xa0, 0xef, 0x20, 0xe0, 0x00, 0xef, 0x16,
-    0x20, 0x2f, 0xe0, 0x46, 0xef, 0x80, 0xcc, 0xe0,
-    0x04, 0xef, 0x06, 0x20, 0x8f, 0x40, 0x8f, 0x40,
-    0xcf, 0xe0, 0x01, 0xef, 0x15, 0x40, 0xef, 0x03,
-    0x80, 0xaf, 0xe0, 0x02, 0xef, 0x02, 0xa0, 0xef,
-    0x00, 0xe0, 0x00, 0xcf, 0xe0, 0x01, 0xef, 0x80,
-    0x0b, 0x00, 0xef, 0x2f, 0xe0, 0x1d, 0xe9, 0x02,
-    0xe0, 0x83, 0x7e, 0xe5, 0xc0, 0x66, 0x58, 0xe0,
-    0x18, 0xe5, 0x8f, 0xb1, 0xc0, 0xe5, 0x80, 0x56,
-    0x20, 0xe5, 0x95, 0xfa, 0xe0, 0x06, 0xe5, 0x9c,
-    0xa9, 0xe0, 0x8b, 0x97, 0xe5, 0x81, 0x96, 0xe0,
-    0x85, 0x5a, 0xe5, 0x92, 0xc3, 0xe0, 0xca, 0xac,
-    0x2e, 0x1b, 0xe0, 0x16, 0xfb, 0x58, 0xe0, 0x78,
-    0xe6, 0x80, 0x68, 0xe0, 0xc0, 0xbd, 0x88, 0xfd,
-    0xc0, 0xbf, 0x76, 0x20, 0xfd, 0xc0, 0xbf, 0x76,
-    0x20,
+    0x51, 0xc0, 0xef, 0x04, 0xe0, 0x0c, 0xef, 0x04,
+    0x60, 0xef, 0x30, 0xe0, 0x00, 0xef, 0x02, 0xa0,
+    0xef, 0x20, 0xe0, 0x00, 0xef, 0x16, 0x20, 0x2f,
+    0xe0, 0x46, 0xef, 0x71, 0x00, 0xef, 0x4a, 0x00,
+    0xef, 0x7f, 0xe0, 0x04, 0xef, 0x06, 0x20, 0x8f,
+    0x40, 0x4f, 0x80, 0xcf, 0xe0, 0x01, 0xef, 0x11,
+    0xc0, 0xcf, 0xe0, 0x01, 0x4f, 0xe0, 0x05, 0xcf,
+    0xe0, 0x21, 0xef, 0x80, 0x0b, 0x00, 0xef, 0x2f,
+    0xe0, 0x1d, 0xe9, 0x02, 0xe0, 0x83, 0x7e, 0xe5,
+    0xc0, 0x66, 0x56, 0xe0, 0x1a, 0xe5, 0x8f, 0xad,
+    0xe0, 0x03, 0xe5, 0x80, 0x56, 0x20, 0xe5, 0x95,
+    0xfa, 0xe0, 0x06, 0xe5, 0x9c, 0xa9, 0xe0, 0x8b,
+    0x97, 0xe5, 0x81, 0x96, 0xe0, 0x85, 0x5a, 0xe5,
+    0x92, 0xc3, 0xe0, 0xca, 0xac, 0x2e, 0x1b, 0xe0,
+    0x16, 0xfb, 0x58, 0xe0, 0x78, 0xe6, 0x80, 0x68,
+    0xe0, 0xc0, 0xbd, 0x88, 0xfd, 0xc0, 0xbf, 0x76,
+    0x20, 0xfd, 0xc0, 0xbf, 0x76, 0x20,
 };
 
 typedef enum {
@@ -2835,7 +2787,6 @@ typedef enum {
     UNICODE_SCRIPT_Cuneiform,
     UNICODE_SCRIPT_Cypriot,
     UNICODE_SCRIPT_Cyrillic,
-    UNICODE_SCRIPT_Cypro_Minoan,
     UNICODE_SCRIPT_Deseret,
     UNICODE_SCRIPT_Devanagari,
     UNICODE_SCRIPT_Dives_Akuru,
@@ -2918,7 +2869,6 @@ typedef enum {
     UNICODE_SCRIPT_Old_Sogdian,
     UNICODE_SCRIPT_Old_South_Arabian,
     UNICODE_SCRIPT_Old_Turkic,
-    UNICODE_SCRIPT_Old_Uyghur,
     UNICODE_SCRIPT_Oriya,
     UNICODE_SCRIPT_Osage,
     UNICODE_SCRIPT_Osmanya,
@@ -2957,11 +2907,8 @@ typedef enum {
     UNICODE_SCRIPT_Tibetan,
     UNICODE_SCRIPT_Tifinagh,
     UNICODE_SCRIPT_Tirhuta,
-    UNICODE_SCRIPT_Tangsa,
-    UNICODE_SCRIPT_Toto,
     UNICODE_SCRIPT_Ugaritic,
     UNICODE_SCRIPT_Vai,
-    UNICODE_SCRIPT_Vithkuqi,
     UNICODE_SCRIPT_Wancho,
     UNICODE_SCRIPT_Warang_Citi,
     UNICODE_SCRIPT_Yezidi,
@@ -3000,7 +2947,6 @@ static const char unicode_script_name_table[] =
     "Cuneiform,Xsux"              "\0"
     "Cypriot,Cprt"                "\0"
     "Cyrillic,Cyrl"               "\0"
-    "Cypro_Minoan,Cpmn"           "\0"
     "Deseret,Dsrt"                "\0"
     "Devanagari,Deva"             "\0"
     "Dives_Akuru,Diak"            "\0"
@@ -3083,7 +3029,6 @@ static const char unicode_script_name_table[] =
     "Old_Sogdian,Sogo"            "\0"
     "Old_South_Arabian,Sarb"      "\0"
     "Old_Turkic,Orkh"             "\0"
-    "Old_Uyghur,Ougr"             "\0"
     "Oriya,Orya"                  "\0"
     "Osage,Osge"                  "\0"
     "Osmanya,Osma"                "\0"
@@ -3122,11 +3067,8 @@ static const char unicode_script_name_table[] =
     "Tibetan,Tibt"                "\0"
     "Tifinagh,Tfng"               "\0"
     "Tirhuta,Tirh"                "\0"
-    "Tangsa,Tnsa"                 "\0"
-    "Toto,Toto"                   "\0"
     "Ugaritic,Ugar"               "\0"
     "Vai,Vaii"                    "\0"
-    "Vithkuqi,Vith"               "\0"
     "Wancho,Wcho"                 "\0"
     "Warang_Citi,Wara"            "\0"
     "Yezidi,Yezi"                 "\0"
@@ -3134,451 +3076,437 @@ static const char unicode_script_name_table[] =
     "Zanabazar_Square,Zanb"       "\0"
 ;
 
-static const uint8_t unicode_script_table[2690] = {
-    0xc0, 0x19, 0x99, 0x46, 0x85, 0x19, 0x99, 0x46,
-    0xae, 0x19, 0x80, 0x46, 0x8e, 0x19, 0x80, 0x46,
-    0x84, 0x19, 0x96, 0x46, 0x80, 0x19, 0x9e, 0x46,
-    0x80, 0x19, 0xe1, 0x60, 0x46, 0xa6, 0x19, 0x84,
-    0x46, 0x84, 0x19, 0x81, 0x0d, 0x93, 0x19, 0xe0,
-    0x0f, 0x38, 0x83, 0x2c, 0x80, 0x19, 0x82, 0x2c,
-    0x01, 0x83, 0x2c, 0x80, 0x19, 0x80, 0x2c, 0x03,
-    0x80, 0x2c, 0x80, 0x19, 0x80, 0x2c, 0x80, 0x19,
-    0x82, 0x2c, 0x00, 0x80, 0x2c, 0x00, 0x93, 0x2c,
-    0x00, 0xbe, 0x2c, 0x8d, 0x1a, 0x8f, 0x2c, 0xe0,
-    0x24, 0x1d, 0x81, 0x38, 0xe0, 0x48, 0x1d, 0x00,
+static const uint8_t unicode_script_table[2609] = {
+    0xc0, 0x19, 0x99, 0x45, 0x85, 0x19, 0x99, 0x45,
+    0xae, 0x19, 0x80, 0x45, 0x8e, 0x19, 0x80, 0x45,
+    0x84, 0x19, 0x96, 0x45, 0x80, 0x19, 0x9e, 0x45,
+    0x80, 0x19, 0xe1, 0x60, 0x45, 0xa6, 0x19, 0x84,
+    0x45, 0x84, 0x19, 0x81, 0x0d, 0x93, 0x19, 0xe0,
+    0x0f, 0x37, 0x83, 0x2b, 0x80, 0x19, 0x82, 0x2b,
+    0x01, 0x83, 0x2b, 0x80, 0x19, 0x80, 0x2b, 0x03,
+    0x80, 0x2b, 0x80, 0x19, 0x80, 0x2b, 0x80, 0x19,
+    0x82, 0x2b, 0x00, 0x80, 0x2b, 0x00, 0x93, 0x2b,
+    0x00, 0xbe, 0x2b, 0x8d, 0x1a, 0x8f, 0x2b, 0xe0,
+    0x24, 0x1d, 0x81, 0x37, 0xe0, 0x48, 0x1d, 0x00,
     0xa5, 0x05, 0x01, 0xb1, 0x05, 0x01, 0x82, 0x05,
-    0x00, 0xb6, 0x35, 0x07, 0x9a, 0x35, 0x03, 0x85,
-    0x35, 0x0a, 0x84, 0x04, 0x80, 0x19, 0x85, 0x04,
-    0x80, 0x19, 0x8d, 0x04, 0x80, 0x19, 0x82, 0x04,
-    0x80, 0x19, 0x9f, 0x04, 0x80, 0x19, 0x89, 0x04,
-    0x8a, 0x38, 0x99, 0x04, 0x80, 0x38, 0xe0, 0x0b,
-    0x04, 0x80, 0x19, 0xa1, 0x04, 0x8d, 0x89, 0x00,
-    0xbb, 0x89, 0x01, 0x82, 0x89, 0xaf, 0x04, 0xb1,
-    0x93, 0x0d, 0xba, 0x64, 0x01, 0x82, 0x64, 0xad,
-    0x7d, 0x01, 0x8e, 0x7d, 0x00, 0x9b, 0x51, 0x01,
-    0x80, 0x51, 0x00, 0x8a, 0x89, 0x04, 0x9e, 0x04,
-    0x00, 0x81, 0x04, 0x05, 0xc9, 0x04, 0x80, 0x19,
-    0x9c, 0x04, 0xd0, 0x20, 0x83, 0x38, 0x8e, 0x20,
-    0x81, 0x19, 0x99, 0x20, 0x83, 0x0b, 0x00, 0x87,
-    0x0b, 0x01, 0x81, 0x0b, 0x01, 0x95, 0x0b, 0x00,
-    0x86, 0x0b, 0x00, 0x80, 0x0b, 0x02, 0x83, 0x0b,
-    0x01, 0x88, 0x0b, 0x01, 0x81, 0x0b, 0x01, 0x83,
-    0x0b, 0x07, 0x80, 0x0b, 0x03, 0x81, 0x0b, 0x00,
-    0x84, 0x0b, 0x01, 0x98, 0x0b, 0x01, 0x82, 0x2f,
-    0x00, 0x85, 0x2f, 0x03, 0x81, 0x2f, 0x01, 0x95,
-    0x2f, 0x00, 0x86, 0x2f, 0x00, 0x81, 0x2f, 0x00,
-    0x81, 0x2f, 0x00, 0x81, 0x2f, 0x01, 0x80, 0x2f,
-    0x00, 0x84, 0x2f, 0x03, 0x81, 0x2f, 0x01, 0x82,
-    0x2f, 0x02, 0x80, 0x2f, 0x06, 0x83, 0x2f, 0x00,
-    0x80, 0x2f, 0x06, 0x90, 0x2f, 0x09, 0x82, 0x2d,
-    0x00, 0x88, 0x2d, 0x00, 0x82, 0x2d, 0x00, 0x95,
-    0x2d, 0x00, 0x86, 0x2d, 0x00, 0x81, 0x2d, 0x00,
-    0x84, 0x2d, 0x01, 0x89, 0x2d, 0x00, 0x82, 0x2d,
-    0x00, 0x82, 0x2d, 0x01, 0x80, 0x2d, 0x0e, 0x83,
-    0x2d, 0x01, 0x8b, 0x2d, 0x06, 0x86, 0x2d, 0x00,
-    0x82, 0x72, 0x00, 0x87, 0x72, 0x01, 0x81, 0x72,
-    0x01, 0x95, 0x72, 0x00, 0x86, 0x72, 0x00, 0x81,
-    0x72, 0x00, 0x84, 0x72, 0x01, 0x88, 0x72, 0x01,
-    0x81, 0x72, 0x01, 0x82, 0x72, 0x06, 0x82, 0x72,
-    0x03, 0x81, 0x72, 0x00, 0x84, 0x72, 0x01, 0x91,
-    0x72, 0x09, 0x81, 0x90, 0x00, 0x85, 0x90, 0x02,
-    0x82, 0x90, 0x00, 0x83, 0x90, 0x02, 0x81, 0x90,
-    0x00, 0x80, 0x90, 0x00, 0x81, 0x90, 0x02, 0x81,
-    0x90, 0x02, 0x82, 0x90, 0x02, 0x8b, 0x90, 0x03,
-    0x84, 0x90, 0x02, 0x82, 0x90, 0x00, 0x83, 0x90,
-    0x01, 0x80, 0x90, 0x05, 0x80, 0x90, 0x0d, 0x94,
-    0x90, 0x04, 0x8c, 0x92, 0x00, 0x82, 0x92, 0x00,
-    0x96, 0x92, 0x00, 0x8f, 0x92, 0x01, 0x88, 0x92,
-    0x00, 0x82, 0x92, 0x00, 0x83, 0x92, 0x06, 0x81,
-    0x92, 0x00, 0x82, 0x92, 0x01, 0x80, 0x92, 0x01,
-    0x83, 0x92, 0x01, 0x89, 0x92, 0x06, 0x88, 0x92,
-    0x8c, 0x3d, 0x00, 0x82, 0x3d, 0x00, 0x96, 0x3d,
-    0x00, 0x89, 0x3d, 0x00, 0x84, 0x3d, 0x01, 0x88,
-    0x3d, 0x00, 0x82, 0x3d, 0x00, 0x83, 0x3d, 0x06,
-    0x81, 0x3d, 0x05, 0x81, 0x3d, 0x00, 0x83, 0x3d,
-    0x01, 0x89, 0x3d, 0x00, 0x81, 0x3d, 0x0c, 0x8c,
-    0x50, 0x00, 0x82, 0x50, 0x00, 0xb2, 0x50, 0x00,
-    0x82, 0x50, 0x00, 0x85, 0x50, 0x03, 0x8f, 0x50,
-    0x01, 0x99, 0x50, 0x00, 0x82, 0x83, 0x00, 0x91,
-    0x83, 0x02, 0x97, 0x83, 0x00, 0x88, 0x83, 0x00,
-    0x80, 0x83, 0x01, 0x86, 0x83, 0x02, 0x80, 0x83,
-    0x03, 0x85, 0x83, 0x00, 0x80, 0x83, 0x00, 0x87,
-    0x83, 0x05, 0x89, 0x83, 0x01, 0x82, 0x83, 0x0b,
-    0xb9, 0x94, 0x03, 0x80, 0x19, 0x9b, 0x94, 0x24,
-    0x81, 0x45, 0x00, 0x80, 0x45, 0x00, 0x84, 0x45,
-    0x00, 0x97, 0x45, 0x00, 0x80, 0x45, 0x00, 0x96,
-    0x45, 0x01, 0x84, 0x45, 0x00, 0x80, 0x45, 0x00,
-    0x85, 0x45, 0x01, 0x89, 0x45, 0x01, 0x83, 0x45,
-    0x1f, 0xc7, 0x95, 0x00, 0xa3, 0x95, 0x03, 0xa6,
-    0x95, 0x00, 0xa3, 0x95, 0x00, 0x8e, 0x95, 0x00,
-    0x86, 0x95, 0x83, 0x19, 0x81, 0x95, 0x24, 0xe0,
-    0x3f, 0x5f, 0xa5, 0x28, 0x00, 0x80, 0x28, 0x04,
-    0x80, 0x28, 0x01, 0xaa, 0x28, 0x80, 0x19, 0x83,
-    0x28, 0xe0, 0x9f, 0x31, 0xc8, 0x27, 0x00, 0x83,
-    0x27, 0x01, 0x86, 0x27, 0x00, 0x80, 0x27, 0x00,
-    0x83, 0x27, 0x01, 0xa8, 0x27, 0x00, 0x83, 0x27,
-    0x01, 0xa0, 0x27, 0x00, 0x83, 0x27, 0x01, 0x86,
-    0x27, 0x00, 0x80, 0x27, 0x00, 0x83, 0x27, 0x01,
-    0x8e, 0x27, 0x00, 0xb8, 0x27, 0x00, 0x83, 0x27,
-    0x01, 0xc2, 0x27, 0x01, 0x9f, 0x27, 0x02, 0x99,
-    0x27, 0x05, 0xd5, 0x17, 0x01, 0x85, 0x17, 0x01,
-    0xe2, 0x1f, 0x12, 0x9c, 0x67, 0x02, 0xca, 0x7c,
-    0x82, 0x19, 0x8a, 0x7c, 0x06, 0x95, 0x8a, 0x08,
-    0x80, 0x8a, 0x94, 0x33, 0x81, 0x19, 0x08, 0x93,
-    0x11, 0x0b, 0x8c, 0x8b, 0x00, 0x82, 0x8b, 0x00,
-    0x81, 0x8b, 0x0b, 0xdd, 0x41, 0x01, 0x89, 0x41,
-    0x05, 0x89, 0x41, 0x05, 0x81, 0x5c, 0x81, 0x19,
-    0x80, 0x5c, 0x80, 0x19, 0x93, 0x5c, 0x05, 0xd8,
-    0x5c, 0x06, 0xaa, 0x5c, 0x04, 0xc5, 0x12, 0x09,
-    0x9e, 0x48, 0x00, 0x8b, 0x48, 0x03, 0x8b, 0x48,
-    0x03, 0x80, 0x48, 0x02, 0x8b, 0x48, 0x9d, 0x8c,
-    0x01, 0x84, 0x8c, 0x0a, 0xab, 0x62, 0x03, 0x99,
-    0x62, 0x05, 0x8a, 0x62, 0x02, 0x81, 0x62, 0x9f,
-    0x41, 0x9b, 0x10, 0x01, 0x81, 0x10, 0xbe, 0x8d,
-    0x00, 0x9c, 0x8d, 0x01, 0x8a, 0x8d, 0x05, 0x89,
-    0x8d, 0x05, 0x8d, 0x8d, 0x01, 0x9e, 0x38, 0x30,
-    0xcc, 0x07, 0x02, 0xae, 0x07, 0x00, 0xbf, 0x87,
-    0xb3, 0x0a, 0x07, 0x83, 0x0a, 0xb7, 0x47, 0x02,
-    0x8e, 0x47, 0x02, 0x82, 0x47, 0xaf, 0x68, 0x88,
-    0x1d, 0x06, 0xaa, 0x28, 0x01, 0x82, 0x28, 0x87,
-    0x87, 0x07, 0x82, 0x38, 0x80, 0x19, 0x8c, 0x38,
-    0x80, 0x19, 0x86, 0x38, 0x83, 0x19, 0x80, 0x38,
-    0x85, 0x19, 0x80, 0x38, 0x82, 0x19, 0x81, 0x38,
-    0x80, 0x19, 0x04, 0xa5, 0x46, 0x84, 0x2c, 0x80,
-    0x1d, 0xb0, 0x46, 0x84, 0x2c, 0x83, 0x46, 0x84,
-    0x2c, 0x8c, 0x46, 0x80, 0x1d, 0xc5, 0x46, 0x80,
-    0x2c, 0xbf, 0x38, 0xe0, 0x9f, 0x46, 0x95, 0x2c,
-    0x01, 0x85, 0x2c, 0x01, 0xa5, 0x2c, 0x01, 0x85,
-    0x2c, 0x01, 0x87, 0x2c, 0x00, 0x80, 0x2c, 0x00,
-    0x80, 0x2c, 0x00, 0x80, 0x2c, 0x00, 0x9e, 0x2c,
-    0x01, 0xb4, 0x2c, 0x00, 0x8e, 0x2c, 0x00, 0x8d,
-    0x2c, 0x01, 0x85, 0x2c, 0x00, 0x92, 0x2c, 0x01,
-    0x82, 0x2c, 0x00, 0x88, 0x2c, 0x00, 0x8b, 0x19,
-    0x81, 0x38, 0xd6, 0x19, 0x00, 0x8a, 0x19, 0x80,
-    0x46, 0x01, 0x8a, 0x19, 0x80, 0x46, 0x8e, 0x19,
-    0x00, 0x8c, 0x46, 0x02, 0xa0, 0x19, 0x0e, 0xa0,
-    0x38, 0x0e, 0xa5, 0x19, 0x80, 0x2c, 0x82, 0x19,
-    0x81, 0x46, 0x85, 0x19, 0x80, 0x46, 0x9a, 0x19,
-    0x80, 0x46, 0x90, 0x19, 0xa8, 0x46, 0x82, 0x19,
-    0x03, 0xe2, 0x36, 0x19, 0x18, 0x8a, 0x19, 0x14,
-    0xe3, 0x3f, 0x19, 0xe0, 0x9f, 0x0f, 0xe2, 0x13,
-    0x19, 0x01, 0x9f, 0x19, 0x00, 0xe0, 0x08, 0x19,
-    0xdf, 0x29, 0x9f, 0x46, 0xe0, 0x13, 0x1a, 0x04,
-    0x86, 0x1a, 0xa5, 0x28, 0x00, 0x80, 0x28, 0x04,
-    0x80, 0x28, 0x01, 0xb7, 0x96, 0x06, 0x81, 0x96,
-    0x0d, 0x80, 0x96, 0x96, 0x27, 0x08, 0x86, 0x27,
-    0x00, 0x86, 0x27, 0x00, 0x86, 0x27, 0x00, 0x86,
-    0x27, 0x00, 0x86, 0x27, 0x00, 0x86, 0x27, 0x00,
-    0x86, 0x27, 0x00, 0x86, 0x27, 0x00, 0x9f, 0x1d,
-    0xdd, 0x19, 0x21, 0x99, 0x30, 0x00, 0xd8, 0x30,
-    0x0b, 0xe0, 0x75, 0x30, 0x19, 0x8b, 0x19, 0x03,
-    0x84, 0x19, 0x80, 0x30, 0x80, 0x19, 0x80, 0x30,
-    0x98, 0x19, 0x88, 0x30, 0x83, 0x38, 0x81, 0x31,
-    0x87, 0x19, 0x83, 0x30, 0x83, 0x19, 0x00, 0xd5,
-    0x36, 0x01, 0x81, 0x38, 0x81, 0x19, 0x82, 0x36,
-    0x80, 0x19, 0xd9, 0x3e, 0x81, 0x19, 0x82, 0x3e,
-    0x04, 0xaa, 0x0d, 0x00, 0xdd, 0x31, 0x00, 0x8f,
-    0x19, 0x9f, 0x0d, 0xa3, 0x19, 0x0b, 0x8f, 0x3e,
-    0x9e, 0x31, 0x00, 0xbf, 0x19, 0x9e, 0x31, 0xd0,
-    0x19, 0xae, 0x3e, 0x80, 0x19, 0xd7, 0x3e, 0xe0,
-    0x47, 0x19, 0xf0, 0x09, 0x5f, 0x30, 0xbf, 0x19,
-    0xf0, 0x41, 0x9f, 0x30, 0xe4, 0x2c, 0xa0, 0x02,
-    0xb6, 0xa0, 0x08, 0xaf, 0x4b, 0xe0, 0xcb, 0x9b,
-    0x13, 0xdf, 0x1d, 0xd7, 0x08, 0x07, 0xa1, 0x19,
-    0xe0, 0x05, 0x46, 0x82, 0x19, 0xbf, 0x46, 0x04,
-    0x81, 0x46, 0x00, 0x80, 0x46, 0x00, 0x84, 0x46,
-    0x17, 0x8d, 0x46, 0xac, 0x88, 0x02, 0x89, 0x19,
-    0x05, 0xb7, 0x78, 0x07, 0xc5, 0x7e, 0x07, 0x8b,
-    0x7e, 0x05, 0x9f, 0x20, 0xad, 0x3f, 0x80, 0x19,
-    0x80, 0x3f, 0xa3, 0x7b, 0x0a, 0x80, 0x7b, 0x9c,
-    0x31, 0x02, 0xcd, 0x3b, 0x00, 0x80, 0x19, 0x89,
-    0x3b, 0x03, 0x81, 0x3b, 0x9e, 0x5f, 0x00, 0xb6,
-    0x16, 0x08, 0x8d, 0x16, 0x01, 0x89, 0x16, 0x01,
-    0x83, 0x16, 0x9f, 0x5f, 0xc2, 0x8e, 0x17, 0x84,
-    0x8e, 0x96, 0x56, 0x09, 0x85, 0x27, 0x01, 0x85,
-    0x27, 0x01, 0x85, 0x27, 0x08, 0x86, 0x27, 0x00,
-    0x86, 0x27, 0x00, 0xaa, 0x46, 0x80, 0x19, 0x88,
-    0x46, 0x80, 0x2c, 0x83, 0x46, 0x81, 0x19, 0x03,
-    0xcf, 0x17, 0xad, 0x56, 0x01, 0x89, 0x56, 0x05,
-    0xf0, 0x1b, 0x43, 0x31, 0x0b, 0x96, 0x31, 0x03,
-    0xb0, 0x31, 0x70, 0x10, 0xa3, 0xe1, 0x0d, 0x30,
-    0x01, 0xe0, 0x09, 0x30, 0x25, 0x86, 0x46, 0x0b,
-    0x84, 0x05, 0x04, 0x99, 0x35, 0x00, 0x84, 0x35,
-    0x00, 0x80, 0x35, 0x00, 0x81, 0x35, 0x00, 0x81,
-    0x35, 0x00, 0x89, 0x35, 0xe0, 0x12, 0x04, 0x0f,
-    0xe1, 0x0a, 0x04, 0x81, 0x19, 0xcf, 0x04, 0x01,
-    0xb5, 0x04, 0x06, 0x80, 0x04, 0x1f, 0x8f, 0x04,
-    0x8f, 0x38, 0x89, 0x19, 0x05, 0x8d, 0x38, 0x81,
-    0x1d, 0xa2, 0x19, 0x00, 0x92, 0x19, 0x00, 0x83,
-    0x19, 0x03, 0x84, 0x04, 0x00, 0xe0, 0x26, 0x04,
-    0x01, 0x80, 0x19, 0x00, 0x9f, 0x19, 0x99, 0x46,
-    0x85, 0x19, 0x99, 0x46, 0x8a, 0x19, 0x89, 0x3e,
-    0x80, 0x19, 0xac, 0x3e, 0x81, 0x19, 0x9e, 0x31,
-    0x02, 0x85, 0x31, 0x01, 0x85, 0x31, 0x01, 0x85,
-    0x31, 0x01, 0x82, 0x31, 0x02, 0x86, 0x19, 0x00,
-    0x86, 0x19, 0x09, 0x84, 0x19, 0x01, 0x8b, 0x4a,
-    0x00, 0x99, 0x4a, 0x00, 0x92, 0x4a, 0x00, 0x81,
-    0x4a, 0x00, 0x8e, 0x4a, 0x01, 0x8d, 0x4a, 0x21,
-    0xe0, 0x1a, 0x4a, 0x04, 0x82, 0x19, 0x03, 0xac,
-    0x19, 0x02, 0x88, 0x19, 0xce, 0x2c, 0x00, 0x8c,
-    0x19, 0x02, 0x80, 0x2c, 0x2e, 0xac, 0x19, 0x80,
-    0x38, 0x60, 0x21, 0x9c, 0x4c, 0x02, 0xb0, 0x13,
-    0x0e, 0x80, 0x38, 0x9a, 0x19, 0x03, 0xa3, 0x6a,
-    0x08, 0x82, 0x6a, 0x9a, 0x2a, 0x04, 0xaa, 0x6c,
-    0x04, 0x9d, 0x9a, 0x00, 0x80, 0x9a, 0xa3, 0x6d,
-    0x03, 0x8d, 0x6d, 0x29, 0xcf, 0x1f, 0xaf, 0x80,
-    0x9d, 0x74, 0x01, 0x89, 0x74, 0x05, 0xa3, 0x73,
-    0x03, 0xa3, 0x73, 0x03, 0xa7, 0x25, 0x07, 0xb3,
-    0x14, 0x0a, 0x80, 0x14, 0x8a, 0x9c, 0x00, 0x8e,
-    0x9c, 0x00, 0x86, 0x9c, 0x00, 0x81, 0x9c, 0x00,
-    0x8a, 0x9c, 0x00, 0x8e, 0x9c, 0x00, 0x86, 0x9c,
-    0x00, 0x81, 0x9c, 0x42, 0xe0, 0xd6, 0x49, 0x08,
-    0x95, 0x49, 0x09, 0x87, 0x49, 0x17, 0x85, 0x46,
-    0x00, 0xa9, 0x46, 0x00, 0x88, 0x46, 0x44, 0x85,
-    0x1c, 0x01, 0x80, 0x1c, 0x00, 0xab, 0x1c, 0x00,
-    0x81, 0x1c, 0x02, 0x80, 0x1c, 0x01, 0x80, 0x1c,
-    0x95, 0x37, 0x00, 0x88, 0x37, 0x9f, 0x76, 0x9e,
-    0x60, 0x07, 0x88, 0x60, 0x2f, 0x92, 0x34, 0x00,
-    0x81, 0x34, 0x04, 0x84, 0x34, 0x9b, 0x79, 0x02,
-    0x80, 0x79, 0x99, 0x4d, 0x04, 0x80, 0x4d, 0x3f,
-    0x9f, 0x59, 0x97, 0x58, 0x03, 0x93, 0x58, 0x01,
-    0xad, 0x58, 0x83, 0x40, 0x00, 0x81, 0x40, 0x04,
-    0x87, 0x40, 0x00, 0x82, 0x40, 0x00, 0x9c, 0x40,
-    0x01, 0x82, 0x40, 0x03, 0x89, 0x40, 0x06, 0x88,
-    0x40, 0x06, 0x9f, 0x6f, 0x9f, 0x6b, 0x1f, 0xa6,
-    0x52, 0x03, 0x8b, 0x52, 0x08, 0xb5, 0x06, 0x02,
-    0x86, 0x06, 0x95, 0x3a, 0x01, 0x87, 0x3a, 0x92,
-    0x39, 0x04, 0x87, 0x39, 0x91, 0x7a, 0x06, 0x83,
-    0x7a, 0x0b, 0x86, 0x7a, 0x4f, 0xc8, 0x70, 0x36,
-    0xb2, 0x69, 0x0c, 0xb2, 0x69, 0x06, 0x85, 0x69,
-    0xa7, 0x32, 0x07, 0x89, 0x32, 0x60, 0xc5, 0x9e,
-    0x04, 0x00, 0xa9, 0x9f, 0x00, 0x82, 0x9f, 0x01,
-    0x81, 0x9f, 0x4d, 0xa7, 0x6e, 0x07, 0xa9, 0x84,
-    0x15, 0x99, 0x71, 0x25, 0x9b, 0x18, 0x13, 0x96,
-    0x26, 0x08, 0xcd, 0x0e, 0x03, 0xa3, 0x0e, 0x08,
-    0x80, 0x0e, 0xc2, 0x3c, 0x09, 0x80, 0x3c, 0x01,
-    0x98, 0x85, 0x06, 0x89, 0x85, 0x05, 0xb4, 0x15,
-    0x00, 0x91, 0x15, 0x07, 0xa6, 0x4f, 0x08, 0xdf,
-    0x7f, 0x00, 0x93, 0x83, 0x0a, 0x91, 0x42, 0x00,
-    0xab, 0x42, 0x40, 0x86, 0x5e, 0x00, 0x80, 0x5e,
-    0x00, 0x83, 0x5e, 0x00, 0x8e, 0x5e, 0x00, 0x8a,
-    0x5e, 0x05, 0xba, 0x44, 0x04, 0x89, 0x44, 0x05,
-    0x83, 0x2b, 0x00, 0x87, 0x2b, 0x01, 0x81, 0x2b,
-    0x01, 0x95, 0x2b, 0x00, 0x86, 0x2b, 0x00, 0x81,
-    0x2b, 0x00, 0x84, 0x2b, 0x00, 0x80, 0x38, 0x88,
-    0x2b, 0x01, 0x81, 0x2b, 0x01, 0x82, 0x2b, 0x01,
-    0x80, 0x2b, 0x05, 0x80, 0x2b, 0x04, 0x86, 0x2b,
-    0x01, 0x86, 0x2b, 0x02, 0x84, 0x2b, 0x60, 0x2a,
-    0xdb, 0x63, 0x00, 0x84, 0x63, 0x1d, 0xc7, 0x97,
-    0x07, 0x89, 0x97, 0x60, 0x45, 0xb5, 0x81, 0x01,
-    0xa5, 0x81, 0x21, 0xc4, 0x5b, 0x0a, 0x89, 0x5b,
-    0x05, 0x8c, 0x5c, 0x12, 0xb9, 0x8f, 0x05, 0x89,
-    0x8f, 0x35, 0x9a, 0x02, 0x01, 0x8e, 0x02, 0x03,
-    0x96, 0x02, 0x60, 0x58, 0xbb, 0x22, 0x60, 0x03,
-    0xd2, 0x9e, 0x0b, 0x80, 0x9e, 0x86, 0x21, 0x01,
-    0x80, 0x21, 0x01, 0x87, 0x21, 0x00, 0x81, 0x21,
-    0x00, 0x9d, 0x21, 0x00, 0x81, 0x21, 0x01, 0x8b,
-    0x21, 0x08, 0x89, 0x21, 0x45, 0x87, 0x61, 0x01,
-    0xad, 0x61, 0x01, 0x8a, 0x61, 0x1a, 0xc7, 0xa1,
-    0x07, 0xd2, 0x86, 0x0c, 0x8f, 0x12, 0xb8, 0x77,
-    0x60, 0xa6, 0x88, 0x0c, 0x00, 0xac, 0x0c, 0x00,
-    0x8d, 0x0c, 0x09, 0x9c, 0x0c, 0x02, 0x9f, 0x53,
-    0x01, 0x95, 0x53, 0x00, 0x8d, 0x53, 0x48, 0x86,
-    0x54, 0x00, 0x81, 0x54, 0x00, 0xab, 0x54, 0x02,
-    0x80, 0x54, 0x00, 0x81, 0x54, 0x00, 0x88, 0x54,
-    0x07, 0x89, 0x54, 0x05, 0x85, 0x2e, 0x00, 0x81,
-    0x2e, 0x00, 0xa4, 0x2e, 0x00, 0x81, 0x2e, 0x00,
-    0x85, 0x2e, 0x06, 0x89, 0x2e, 0x60, 0xd5, 0x98,
-    0x4e, 0x60, 0x56, 0x80, 0x4b, 0x0e, 0xb1, 0x90,
-    0x0c, 0x80, 0x90, 0xe3, 0x39, 0x1b, 0x60, 0x05,
-    0xe0, 0x0e, 0x1b, 0x00, 0x84, 0x1b, 0x0a, 0xe0,
-    0x63, 0x1b, 0x69, 0xeb, 0xe0, 0x02, 0x1e, 0x0c,
-    0xe3, 0xce, 0x24, 0x00, 0x88, 0x24, 0x6f, 0x66,
-    0xe1, 0xe6, 0x03, 0x70, 0x11, 0x58, 0xe1, 0xd8,
-    0x08, 0x06, 0x9e, 0x5d, 0x00, 0x89, 0x5d, 0x03,
-    0x81, 0x5d, 0xce, 0x98, 0x00, 0x89, 0x98, 0x05,
-    0x9d, 0x09, 0x01, 0x85, 0x09, 0x09, 0xc5, 0x75,
-    0x09, 0x89, 0x75, 0x00, 0x86, 0x75, 0x00, 0x94,
-    0x75, 0x04, 0x92, 0x75, 0x62, 0x4f, 0xda, 0x55,
-    0x60, 0x04, 0xca, 0x5a, 0x03, 0xb8, 0x5a, 0x06,
-    0x90, 0x5a, 0x3f, 0x80, 0x91, 0x80, 0x65, 0x81,
-    0x30, 0x80, 0x43, 0x0a, 0x81, 0x30, 0x0d, 0xf0,
-    0x07, 0x97, 0x91, 0x07, 0xe2, 0x9f, 0x91, 0xe1,
-    0x75, 0x43, 0x29, 0x88, 0x91, 0x70, 0x12, 0x86,
-    0x83, 0x3e, 0x00, 0x86, 0x3e, 0x00, 0x81, 0x3e,
-    0x00, 0x80, 0x3e, 0xe0, 0xbe, 0x36, 0x82, 0x3e,
-    0x2c, 0x82, 0x36, 0x10, 0x83, 0x3e, 0x07, 0xe1,
-    0x2b, 0x65, 0x68, 0xa3, 0xe0, 0x0a, 0x23, 0x04,
-    0x8c, 0x23, 0x02, 0x88, 0x23, 0x06, 0x89, 0x23,
-    0x01, 0x83, 0x23, 0x83, 0x19, 0x70, 0x01, 0xfb,
-    0xad, 0x38, 0x01, 0x96, 0x38, 0x08, 0xe0, 0x13,
-    0x19, 0x3b, 0xe0, 0x95, 0x19, 0x09, 0xa6, 0x19,
-    0x01, 0xbd, 0x19, 0x82, 0x38, 0x90, 0x19, 0x87,
-    0x38, 0x81, 0x19, 0x86, 0x38, 0x9d, 0x19, 0x83,
-    0x38, 0xbc, 0x19, 0x14, 0xc5, 0x2c, 0x60, 0x39,
-    0x93, 0x19, 0x0b, 0xd6, 0x19, 0x08, 0x98, 0x19,
-    0x60, 0x26, 0xd4, 0x19, 0x00, 0xc6, 0x19, 0x00,
-    0x81, 0x19, 0x01, 0x80, 0x19, 0x01, 0x81, 0x19,
-    0x01, 0x83, 0x19, 0x00, 0x8b, 0x19, 0x00, 0x80,
-    0x19, 0x00, 0x86, 0x19, 0x00, 0xc0, 0x19, 0x00,
-    0x83, 0x19, 0x01, 0x87, 0x19, 0x00, 0x86, 0x19,
-    0x00, 0x9b, 0x19, 0x00, 0x83, 0x19, 0x00, 0x84,
-    0x19, 0x00, 0x80, 0x19, 0x02, 0x86, 0x19, 0x00,
-    0xe0, 0xf3, 0x19, 0x01, 0xe0, 0xc3, 0x19, 0x01,
-    0xb1, 0x19, 0xe2, 0x2b, 0x82, 0x0e, 0x84, 0x82,
-    0x00, 0x8e, 0x82, 0x63, 0xef, 0x9e, 0x46, 0x60,
-    0x80, 0x86, 0x29, 0x00, 0x90, 0x29, 0x01, 0x86,
-    0x29, 0x00, 0x81, 0x29, 0x00, 0x84, 0x29, 0x60,
-    0x74, 0xac, 0x66, 0x02, 0x8d, 0x66, 0x01, 0x89,
-    0x66, 0x03, 0x81, 0x66, 0x60, 0xdf, 0x9e, 0x99,
-    0x10, 0xb9, 0x9d, 0x04, 0x80, 0x9d, 0x64, 0x7f,
-    0x86, 0x27, 0x00, 0x83, 0x27, 0x00, 0x81, 0x27,
-    0x00, 0x8e, 0x27, 0x00, 0xe0, 0x64, 0x57, 0x01,
-    0x8f, 0x57, 0x28, 0xcb, 0x01, 0x03, 0x89, 0x01,
-    0x03, 0x81, 0x01, 0x62, 0xb0, 0xc3, 0x19, 0x4b,
-    0xbc, 0x19, 0x60, 0x61, 0x83, 0x04, 0x00, 0x9a,
-    0x04, 0x00, 0x81, 0x04, 0x00, 0x80, 0x04, 0x01,
-    0x80, 0x04, 0x00, 0x89, 0x04, 0x00, 0x83, 0x04,
-    0x00, 0x80, 0x04, 0x00, 0x80, 0x04, 0x05, 0x80,
-    0x04, 0x03, 0x80, 0x04, 0x00, 0x80, 0x04, 0x00,
-    0x80, 0x04, 0x00, 0x82, 0x04, 0x00, 0x81, 0x04,
-    0x00, 0x80, 0x04, 0x01, 0x80, 0x04, 0x00, 0x80,
-    0x04, 0x00, 0x80, 0x04, 0x00, 0x80, 0x04, 0x00,
-    0x80, 0x04, 0x00, 0x81, 0x04, 0x00, 0x80, 0x04,
-    0x01, 0x83, 0x04, 0x00, 0x86, 0x04, 0x00, 0x83,
-    0x04, 0x00, 0x83, 0x04, 0x00, 0x80, 0x04, 0x00,
-    0x89, 0x04, 0x00, 0x90, 0x04, 0x04, 0x82, 0x04,
-    0x00, 0x84, 0x04, 0x00, 0x90, 0x04, 0x33, 0x81,
-    0x04, 0x60, 0xad, 0xab, 0x19, 0x03, 0xe0, 0x03,
-    0x19, 0x0b, 0x8e, 0x19, 0x01, 0x8e, 0x19, 0x00,
-    0x8e, 0x19, 0x00, 0xa4, 0x19, 0x09, 0xe0, 0x4d,
-    0x19, 0x37, 0x99, 0x19, 0x80, 0x36, 0x81, 0x19,
-    0x0c, 0xab, 0x19, 0x03, 0x88, 0x19, 0x06, 0x81,
-    0x19, 0x0d, 0x85, 0x19, 0x60, 0x39, 0xe3, 0x77,
-    0x19, 0x04, 0x8f, 0x19, 0x02, 0x8c, 0x19, 0x02,
-    0xe0, 0x13, 0x19, 0x0b, 0xd8, 0x19, 0x06, 0x8b,
-    0x19, 0x03, 0x80, 0x19, 0x0e, 0x8b, 0x19, 0x03,
-    0xb7, 0x19, 0x07, 0x89, 0x19, 0x05, 0xa7, 0x19,
-    0x07, 0x9d, 0x19, 0x01, 0x81, 0x19, 0x4d, 0xe0,
-    0xf3, 0x19, 0x0b, 0x8d, 0x19, 0x01, 0x84, 0x19,
-    0x02, 0x84, 0x19, 0x02, 0x86, 0x19, 0x08, 0x9c,
-    0x19, 0x02, 0x8a, 0x19, 0x04, 0x85, 0x19, 0x09,
-    0x89, 0x19, 0x05, 0x87, 0x19, 0x07, 0x86, 0x19,
-    0x08, 0xe0, 0x32, 0x19, 0x00, 0xb6, 0x19, 0x24,
-    0x89, 0x19, 0x63, 0xa5, 0xf0, 0x96, 0x7f, 0x30,
-    0x1f, 0xef, 0xd8, 0x30, 0x06, 0xe0, 0x7d, 0x30,
-    0x01, 0xf0, 0x06, 0x21, 0x30, 0x0d, 0xf0, 0x0c,
-    0xd0, 0x30, 0x6b, 0xbe, 0xe1, 0xbd, 0x30, 0x65,
-    0x81, 0xf0, 0x02, 0xea, 0x30, 0x7a, 0xdc, 0x55,
-    0x80, 0x19, 0x1d, 0xdf, 0x19, 0x60, 0x1f, 0xe0,
-    0x8f, 0x38,
+    0x00, 0xb6, 0x34, 0x07, 0x9a, 0x34, 0x03, 0x85,
+    0x34, 0x0a, 0x84, 0x04, 0x80, 0x19, 0x85, 0x04,
+    0x80, 0x19, 0x8d, 0x04, 0x80, 0x19, 0x80, 0x04,
+    0x00, 0x80, 0x04, 0x80, 0x19, 0x9f, 0x04, 0x80,
+    0x19, 0x89, 0x04, 0x8a, 0x37, 0x99, 0x04, 0x80,
+    0x37, 0xe0, 0x0b, 0x04, 0x80, 0x19, 0xa1, 0x04,
+    0x8d, 0x87, 0x00, 0xbb, 0x87, 0x01, 0x82, 0x87,
+    0xaf, 0x04, 0xb1, 0x91, 0x0d, 0xba, 0x63, 0x01,
+    0x82, 0x63, 0xad, 0x7b, 0x01, 0x8e, 0x7b, 0x00,
+    0x9b, 0x50, 0x01, 0x80, 0x50, 0x00, 0x8a, 0x87,
+    0x34, 0x94, 0x04, 0x00, 0x91, 0x04, 0x0a, 0x8e,
+    0x04, 0x80, 0x19, 0x9c, 0x04, 0xd0, 0x1f, 0x83,
+    0x37, 0x8e, 0x1f, 0x81, 0x19, 0x99, 0x1f, 0x83,
+    0x0b, 0x00, 0x87, 0x0b, 0x01, 0x81, 0x0b, 0x01,
+    0x95, 0x0b, 0x00, 0x86, 0x0b, 0x00, 0x80, 0x0b,
+    0x02, 0x83, 0x0b, 0x01, 0x88, 0x0b, 0x01, 0x81,
+    0x0b, 0x01, 0x83, 0x0b, 0x07, 0x80, 0x0b, 0x03,
+    0x81, 0x0b, 0x00, 0x84, 0x0b, 0x01, 0x98, 0x0b,
+    0x01, 0x82, 0x2e, 0x00, 0x85, 0x2e, 0x03, 0x81,
+    0x2e, 0x01, 0x95, 0x2e, 0x00, 0x86, 0x2e, 0x00,
+    0x81, 0x2e, 0x00, 0x81, 0x2e, 0x00, 0x81, 0x2e,
+    0x01, 0x80, 0x2e, 0x00, 0x84, 0x2e, 0x03, 0x81,
+    0x2e, 0x01, 0x82, 0x2e, 0x02, 0x80, 0x2e, 0x06,
+    0x83, 0x2e, 0x00, 0x80, 0x2e, 0x06, 0x90, 0x2e,
+    0x09, 0x82, 0x2c, 0x00, 0x88, 0x2c, 0x00, 0x82,
+    0x2c, 0x00, 0x95, 0x2c, 0x00, 0x86, 0x2c, 0x00,
+    0x81, 0x2c, 0x00, 0x84, 0x2c, 0x01, 0x89, 0x2c,
+    0x00, 0x82, 0x2c, 0x00, 0x82, 0x2c, 0x01, 0x80,
+    0x2c, 0x0e, 0x83, 0x2c, 0x01, 0x8b, 0x2c, 0x06,
+    0x86, 0x2c, 0x00, 0x82, 0x70, 0x00, 0x87, 0x70,
+    0x01, 0x81, 0x70, 0x01, 0x95, 0x70, 0x00, 0x86,
+    0x70, 0x00, 0x81, 0x70, 0x00, 0x84, 0x70, 0x01,
+    0x88, 0x70, 0x01, 0x81, 0x70, 0x01, 0x82, 0x70,
+    0x06, 0x82, 0x70, 0x03, 0x81, 0x70, 0x00, 0x84,
+    0x70, 0x01, 0x91, 0x70, 0x09, 0x81, 0x8e, 0x00,
+    0x85, 0x8e, 0x02, 0x82, 0x8e, 0x00, 0x83, 0x8e,
+    0x02, 0x81, 0x8e, 0x00, 0x80, 0x8e, 0x00, 0x81,
+    0x8e, 0x02, 0x81, 0x8e, 0x02, 0x82, 0x8e, 0x02,
+    0x8b, 0x8e, 0x03, 0x84, 0x8e, 0x02, 0x82, 0x8e,
+    0x00, 0x83, 0x8e, 0x01, 0x80, 0x8e, 0x05, 0x80,
+    0x8e, 0x0d, 0x94, 0x8e, 0x04, 0x8c, 0x90, 0x00,
+    0x82, 0x90, 0x00, 0x96, 0x90, 0x00, 0x8f, 0x90,
+    0x02, 0x87, 0x90, 0x00, 0x82, 0x90, 0x00, 0x83,
+    0x90, 0x06, 0x81, 0x90, 0x00, 0x82, 0x90, 0x04,
+    0x83, 0x90, 0x01, 0x89, 0x90, 0x06, 0x88, 0x90,
+    0x8c, 0x3c, 0x00, 0x82, 0x3c, 0x00, 0x96, 0x3c,
+    0x00, 0x89, 0x3c, 0x00, 0x84, 0x3c, 0x01, 0x88,
+    0x3c, 0x00, 0x82, 0x3c, 0x00, 0x83, 0x3c, 0x06,
+    0x81, 0x3c, 0x06, 0x80, 0x3c, 0x00, 0x83, 0x3c,
+    0x01, 0x89, 0x3c, 0x00, 0x81, 0x3c, 0x0c, 0x8c,
+    0x4f, 0x00, 0x82, 0x4f, 0x00, 0xb2, 0x4f, 0x00,
+    0x82, 0x4f, 0x00, 0x85, 0x4f, 0x03, 0x8f, 0x4f,
+    0x01, 0x99, 0x4f, 0x00, 0x82, 0x81, 0x00, 0x91,
+    0x81, 0x02, 0x97, 0x81, 0x00, 0x88, 0x81, 0x00,
+    0x80, 0x81, 0x01, 0x86, 0x81, 0x02, 0x80, 0x81,
+    0x03, 0x85, 0x81, 0x00, 0x80, 0x81, 0x00, 0x87,
+    0x81, 0x05, 0x89, 0x81, 0x01, 0x82, 0x81, 0x0b,
+    0xb9, 0x92, 0x03, 0x80, 0x19, 0x9b, 0x92, 0x24,
+    0x81, 0x44, 0x00, 0x80, 0x44, 0x00, 0x84, 0x44,
+    0x00, 0x97, 0x44, 0x00, 0x80, 0x44, 0x00, 0x96,
+    0x44, 0x01, 0x84, 0x44, 0x00, 0x80, 0x44, 0x00,
+    0x85, 0x44, 0x01, 0x89, 0x44, 0x01, 0x83, 0x44,
+    0x1f, 0xc7, 0x93, 0x00, 0xa3, 0x93, 0x03, 0xa6,
+    0x93, 0x00, 0xa3, 0x93, 0x00, 0x8e, 0x93, 0x00,
+    0x86, 0x93, 0x83, 0x19, 0x81, 0x93, 0x24, 0xe0,
+    0x3f, 0x5e, 0xa5, 0x27, 0x00, 0x80, 0x27, 0x04,
+    0x80, 0x27, 0x01, 0xaa, 0x27, 0x80, 0x19, 0x83,
+    0x27, 0xe0, 0x9f, 0x30, 0xc8, 0x26, 0x00, 0x83,
+    0x26, 0x01, 0x86, 0x26, 0x00, 0x80, 0x26, 0x00,
+    0x83, 0x26, 0x01, 0xa8, 0x26, 0x00, 0x83, 0x26,
+    0x01, 0xa0, 0x26, 0x00, 0x83, 0x26, 0x01, 0x86,
+    0x26, 0x00, 0x80, 0x26, 0x00, 0x83, 0x26, 0x01,
+    0x8e, 0x26, 0x00, 0xb8, 0x26, 0x00, 0x83, 0x26,
+    0x01, 0xc2, 0x26, 0x01, 0x9f, 0x26, 0x02, 0x99,
+    0x26, 0x05, 0xd5, 0x17, 0x01, 0x85, 0x17, 0x01,
+    0xe2, 0x1f, 0x12, 0x9c, 0x66, 0x02, 0xca, 0x7a,
+    0x82, 0x19, 0x8a, 0x7a, 0x06, 0x8c, 0x88, 0x00,
+    0x86, 0x88, 0x0a, 0x94, 0x32, 0x81, 0x19, 0x08,
+    0x93, 0x11, 0x0b, 0x8c, 0x89, 0x00, 0x82, 0x89,
+    0x00, 0x81, 0x89, 0x0b, 0xdd, 0x40, 0x01, 0x89,
+    0x40, 0x05, 0x89, 0x40, 0x05, 0x81, 0x5b, 0x81,
+    0x19, 0x80, 0x5b, 0x80, 0x19, 0x88, 0x5b, 0x00,
+    0x89, 0x5b, 0x05, 0xd8, 0x5b, 0x06, 0xaa, 0x5b,
+    0x04, 0xc5, 0x12, 0x09, 0x9e, 0x47, 0x00, 0x8b,
+    0x47, 0x03, 0x8b, 0x47, 0x03, 0x80, 0x47, 0x02,
+    0x8b, 0x47, 0x9d, 0x8a, 0x01, 0x84, 0x8a, 0x0a,
+    0xab, 0x61, 0x03, 0x99, 0x61, 0x05, 0x8a, 0x61,
+    0x02, 0x81, 0x61, 0x9f, 0x40, 0x9b, 0x10, 0x01,
+    0x81, 0x10, 0xbe, 0x8b, 0x00, 0x9c, 0x8b, 0x01,
+    0x8a, 0x8b, 0x05, 0x89, 0x8b, 0x05, 0x8d, 0x8b,
+    0x01, 0x90, 0x37, 0x3e, 0xcb, 0x07, 0x03, 0xac,
+    0x07, 0x02, 0xbf, 0x85, 0xb3, 0x0a, 0x07, 0x83,
+    0x0a, 0xb7, 0x46, 0x02, 0x8e, 0x46, 0x02, 0x82,
+    0x46, 0xaf, 0x67, 0x88, 0x1d, 0x06, 0xaa, 0x27,
+    0x01, 0x82, 0x27, 0x87, 0x85, 0x07, 0x82, 0x37,
+    0x80, 0x19, 0x8c, 0x37, 0x80, 0x19, 0x86, 0x37,
+    0x83, 0x19, 0x80, 0x37, 0x85, 0x19, 0x80, 0x37,
+    0x82, 0x19, 0x81, 0x37, 0x80, 0x19, 0x04, 0xa5,
+    0x45, 0x84, 0x2b, 0x80, 0x1d, 0xb0, 0x45, 0x84,
+    0x2b, 0x83, 0x45, 0x84, 0x2b, 0x8c, 0x45, 0x80,
+    0x1d, 0xc5, 0x45, 0x80, 0x2b, 0xb9, 0x37, 0x00,
+    0x84, 0x37, 0xe0, 0x9f, 0x45, 0x95, 0x2b, 0x01,
+    0x85, 0x2b, 0x01, 0xa5, 0x2b, 0x01, 0x85, 0x2b,
+    0x01, 0x87, 0x2b, 0x00, 0x80, 0x2b, 0x00, 0x80,
+    0x2b, 0x00, 0x80, 0x2b, 0x00, 0x9e, 0x2b, 0x01,
+    0xb4, 0x2b, 0x00, 0x8e, 0x2b, 0x00, 0x8d, 0x2b,
+    0x01, 0x85, 0x2b, 0x00, 0x92, 0x2b, 0x01, 0x82,
+    0x2b, 0x00, 0x88, 0x2b, 0x00, 0x8b, 0x19, 0x81,
+    0x37, 0xd6, 0x19, 0x00, 0x8a, 0x19, 0x80, 0x45,
+    0x01, 0x8a, 0x19, 0x80, 0x45, 0x8e, 0x19, 0x00,
+    0x8c, 0x45, 0x02, 0x9f, 0x19, 0x0f, 0xa0, 0x37,
+    0x0e, 0xa5, 0x19, 0x80, 0x2b, 0x82, 0x19, 0x81,
+    0x45, 0x85, 0x19, 0x80, 0x45, 0x9a, 0x19, 0x80,
+    0x45, 0x90, 0x19, 0xa8, 0x45, 0x82, 0x19, 0x03,
+    0xe2, 0x36, 0x19, 0x18, 0x8a, 0x19, 0x14, 0xe3,
+    0x3f, 0x19, 0xe0, 0x9f, 0x0f, 0xe2, 0x13, 0x19,
+    0x01, 0x9f, 0x19, 0x00, 0xe0, 0x08, 0x19, 0xae,
+    0x28, 0x00, 0xae, 0x28, 0x00, 0x9f, 0x45, 0xe0,
+    0x13, 0x1a, 0x04, 0x86, 0x1a, 0xa5, 0x27, 0x00,
+    0x80, 0x27, 0x04, 0x80, 0x27, 0x01, 0xb7, 0x94,
+    0x06, 0x81, 0x94, 0x0d, 0x80, 0x94, 0x96, 0x26,
+    0x08, 0x86, 0x26, 0x00, 0x86, 0x26, 0x00, 0x86,
+    0x26, 0x00, 0x86, 0x26, 0x00, 0x86, 0x26, 0x00,
+    0x86, 0x26, 0x00, 0x86, 0x26, 0x00, 0x86, 0x26,
+    0x00, 0x9f, 0x1d, 0xd2, 0x19, 0x2c, 0x99, 0x2f,
+    0x00, 0xd8, 0x2f, 0x0b, 0xe0, 0x75, 0x2f, 0x19,
+    0x8b, 0x19, 0x03, 0x84, 0x19, 0x80, 0x2f, 0x80,
+    0x19, 0x80, 0x2f, 0x98, 0x19, 0x88, 0x2f, 0x83,
+    0x37, 0x81, 0x30, 0x87, 0x19, 0x83, 0x2f, 0x83,
+    0x19, 0x00, 0xd5, 0x35, 0x01, 0x81, 0x37, 0x81,
+    0x19, 0x82, 0x35, 0x80, 0x19, 0xd9, 0x3d, 0x81,
+    0x19, 0x82, 0x3d, 0x04, 0xaa, 0x0d, 0x00, 0xdd,
+    0x30, 0x00, 0x8f, 0x19, 0x9f, 0x0d, 0xa3, 0x19,
+    0x0b, 0x8f, 0x3d, 0x9e, 0x30, 0x00, 0xbf, 0x19,
+    0x9e, 0x30, 0xd0, 0x19, 0xae, 0x3d, 0x80, 0x19,
+    0xd7, 0x3d, 0xe0, 0x47, 0x19, 0xf0, 0x09, 0x5f,
+    0x2f, 0xbf, 0x19, 0xf0, 0x41, 0x9c, 0x2f, 0x02,
+    0xe4, 0x2c, 0x9b, 0x02, 0xb6, 0x9b, 0x08, 0xaf,
+    0x4a, 0xe0, 0xcb, 0x97, 0x13, 0xdf, 0x1d, 0xd7,
+    0x08, 0x07, 0xa1, 0x19, 0xe0, 0x05, 0x45, 0x82,
+    0x19, 0xb4, 0x45, 0x01, 0x88, 0x45, 0x29, 0x8a,
+    0x45, 0xac, 0x86, 0x02, 0x89, 0x19, 0x05, 0xb7,
+    0x76, 0x07, 0xc5, 0x7c, 0x07, 0x8b, 0x7c, 0x05,
+    0x9f, 0x1f, 0xad, 0x3e, 0x80, 0x19, 0x80, 0x3e,
+    0xa3, 0x79, 0x0a, 0x80, 0x79, 0x9c, 0x30, 0x02,
+    0xcd, 0x3a, 0x00, 0x80, 0x19, 0x89, 0x3a, 0x03,
+    0x81, 0x3a, 0x9e, 0x5e, 0x00, 0xb6, 0x16, 0x08,
+    0x8d, 0x16, 0x01, 0x89, 0x16, 0x01, 0x83, 0x16,
+    0x9f, 0x5e, 0xc2, 0x8c, 0x17, 0x84, 0x8c, 0x96,
+    0x55, 0x09, 0x85, 0x26, 0x01, 0x85, 0x26, 0x01,
+    0x85, 0x26, 0x08, 0x86, 0x26, 0x00, 0x86, 0x26,
+    0x00, 0xaa, 0x45, 0x80, 0x19, 0x88, 0x45, 0x80,
+    0x2b, 0x83, 0x45, 0x81, 0x19, 0x03, 0xcf, 0x17,
+    0xad, 0x55, 0x01, 0x89, 0x55, 0x05, 0xf0, 0x1b,
+    0x43, 0x30, 0x0b, 0x96, 0x30, 0x03, 0xb0, 0x30,
+    0x70, 0x10, 0xa3, 0xe1, 0x0d, 0x2f, 0x01, 0xe0,
+    0x09, 0x2f, 0x25, 0x86, 0x45, 0x0b, 0x84, 0x05,
+    0x04, 0x99, 0x34, 0x00, 0x84, 0x34, 0x00, 0x80,
+    0x34, 0x00, 0x81, 0x34, 0x00, 0x81, 0x34, 0x00,
+    0x89, 0x34, 0xe0, 0x11, 0x04, 0x10, 0xe1, 0x0a,
+    0x04, 0x81, 0x19, 0x0f, 0xbf, 0x04, 0x01, 0xb5,
+    0x04, 0x27, 0x8d, 0x04, 0x01, 0x8f, 0x37, 0x89,
+    0x19, 0x05, 0x8d, 0x37, 0x81, 0x1d, 0xa2, 0x19,
+    0x00, 0x92, 0x19, 0x00, 0x83, 0x19, 0x03, 0x84,
+    0x04, 0x00, 0xe0, 0x26, 0x04, 0x01, 0x80, 0x19,
+    0x00, 0x9f, 0x19, 0x99, 0x45, 0x85, 0x19, 0x99,
+    0x45, 0x8a, 0x19, 0x89, 0x3d, 0x80, 0x19, 0xac,
+    0x3d, 0x81, 0x19, 0x9e, 0x30, 0x02, 0x85, 0x30,
+    0x01, 0x85, 0x30, 0x01, 0x85, 0x30, 0x01, 0x82,
+    0x30, 0x02, 0x86, 0x19, 0x00, 0x86, 0x19, 0x09,
+    0x84, 0x19, 0x01, 0x8b, 0x49, 0x00, 0x99, 0x49,
+    0x00, 0x92, 0x49, 0x00, 0x81, 0x49, 0x00, 0x8e,
+    0x49, 0x01, 0x8d, 0x49, 0x21, 0xe0, 0x1a, 0x49,
+    0x04, 0x82, 0x19, 0x03, 0xac, 0x19, 0x02, 0x88,
+    0x19, 0xce, 0x2b, 0x00, 0x8c, 0x19, 0x02, 0x80,
+    0x2b, 0x2e, 0xac, 0x19, 0x80, 0x37, 0x60, 0x21,
+    0x9c, 0x4b, 0x02, 0xb0, 0x13, 0x0e, 0x80, 0x37,
+    0x9a, 0x19, 0x03, 0xa3, 0x69, 0x08, 0x82, 0x69,
+    0x9a, 0x29, 0x04, 0xaa, 0x6b, 0x04, 0x9d, 0x96,
+    0x00, 0x80, 0x96, 0xa3, 0x6c, 0x03, 0x8d, 0x6c,
+    0x29, 0xcf, 0x1e, 0xaf, 0x7e, 0x9d, 0x72, 0x01,
+    0x89, 0x72, 0x05, 0xa3, 0x71, 0x03, 0xa3, 0x71,
+    0x03, 0xa7, 0x24, 0x07, 0xb3, 0x14, 0x0a, 0x80,
+    0x14, 0x60, 0x2f, 0xe0, 0xd6, 0x48, 0x08, 0x95,
+    0x48, 0x09, 0x87, 0x48, 0x60, 0x37, 0x85, 0x1c,
+    0x01, 0x80, 0x1c, 0x00, 0xab, 0x1c, 0x00, 0x81,
+    0x1c, 0x02, 0x80, 0x1c, 0x01, 0x80, 0x1c, 0x95,
+    0x36, 0x00, 0x88, 0x36, 0x9f, 0x74, 0x9e, 0x5f,
+    0x07, 0x88, 0x5f, 0x2f, 0x92, 0x33, 0x00, 0x81,
+    0x33, 0x04, 0x84, 0x33, 0x9b, 0x77, 0x02, 0x80,
+    0x77, 0x99, 0x4c, 0x04, 0x80, 0x4c, 0x3f, 0x9f,
+    0x58, 0x97, 0x57, 0x03, 0x93, 0x57, 0x01, 0xad,
+    0x57, 0x83, 0x3f, 0x00, 0x81, 0x3f, 0x04, 0x87,
+    0x3f, 0x00, 0x82, 0x3f, 0x00, 0x9c, 0x3f, 0x01,
+    0x82, 0x3f, 0x03, 0x89, 0x3f, 0x06, 0x88, 0x3f,
+    0x06, 0x9f, 0x6e, 0x9f, 0x6a, 0x1f, 0xa6, 0x51,
+    0x03, 0x8b, 0x51, 0x08, 0xb5, 0x06, 0x02, 0x86,
+    0x06, 0x95, 0x39, 0x01, 0x87, 0x39, 0x92, 0x38,
+    0x04, 0x87, 0x38, 0x91, 0x78, 0x06, 0x83, 0x78,
+    0x0b, 0x86, 0x78, 0x4f, 0xc8, 0x6f, 0x36, 0xb2,
+    0x68, 0x0c, 0xb2, 0x68, 0x06, 0x85, 0x68, 0xa7,
+    0x31, 0x07, 0x89, 0x31, 0x60, 0xc5, 0x9e, 0x04,
+    0x00, 0xa9, 0x9a, 0x00, 0x82, 0x9a, 0x01, 0x81,
+    0x9a, 0x4d, 0xa7, 0x6d, 0x07, 0xa9, 0x82, 0x55,
+    0x9b, 0x18, 0x13, 0x96, 0x25, 0x08, 0xcd, 0x0e,
+    0x03, 0x9d, 0x0e, 0x0e, 0x80, 0x0e, 0xc1, 0x3b,
+    0x0a, 0x80, 0x3b, 0x01, 0x98, 0x83, 0x06, 0x89,
+    0x83, 0x05, 0xb4, 0x15, 0x00, 0x91, 0x15, 0x07,
+    0xa6, 0x4e, 0x08, 0xdf, 0x7d, 0x00, 0x93, 0x81,
+    0x0a, 0x91, 0x41, 0x00, 0xab, 0x41, 0x40, 0x86,
+    0x5d, 0x00, 0x80, 0x5d, 0x00, 0x83, 0x5d, 0x00,
+    0x8e, 0x5d, 0x00, 0x8a, 0x5d, 0x05, 0xba, 0x43,
+    0x04, 0x89, 0x43, 0x05, 0x83, 0x2a, 0x00, 0x87,
+    0x2a, 0x01, 0x81, 0x2a, 0x01, 0x95, 0x2a, 0x00,
+    0x86, 0x2a, 0x00, 0x81, 0x2a, 0x00, 0x84, 0x2a,
+    0x00, 0x80, 0x37, 0x88, 0x2a, 0x01, 0x81, 0x2a,
+    0x01, 0x82, 0x2a, 0x01, 0x80, 0x2a, 0x05, 0x80,
+    0x2a, 0x04, 0x86, 0x2a, 0x01, 0x86, 0x2a, 0x02,
+    0x84, 0x2a, 0x60, 0x2a, 0xdb, 0x62, 0x00, 0x84,
+    0x62, 0x1d, 0xc7, 0x95, 0x07, 0x89, 0x95, 0x60,
+    0x45, 0xb5, 0x7f, 0x01, 0xa5, 0x7f, 0x21, 0xc4,
+    0x5a, 0x0a, 0x89, 0x5a, 0x05, 0x8c, 0x5b, 0x12,
+    0xb8, 0x8d, 0x06, 0x89, 0x8d, 0x35, 0x9a, 0x02,
+    0x01, 0x8e, 0x02, 0x03, 0x8f, 0x02, 0x60, 0x5f,
+    0xbb, 0x21, 0x60, 0x03, 0xd2, 0x99, 0x0b, 0x80,
+    0x99, 0x86, 0x20, 0x01, 0x80, 0x20, 0x01, 0x87,
+    0x20, 0x00, 0x81, 0x20, 0x00, 0x9d, 0x20, 0x00,
+    0x81, 0x20, 0x01, 0x8b, 0x20, 0x08, 0x89, 0x20,
+    0x45, 0x87, 0x60, 0x01, 0xad, 0x60, 0x01, 0x8a,
+    0x60, 0x1a, 0xc7, 0x9c, 0x07, 0xd2, 0x84, 0x1c,
+    0xb8, 0x75, 0x60, 0xa6, 0x88, 0x0c, 0x00, 0xac,
+    0x0c, 0x00, 0x8d, 0x0c, 0x09, 0x9c, 0x0c, 0x02,
+    0x9f, 0x52, 0x01, 0x95, 0x52, 0x00, 0x8d, 0x52,
+    0x48, 0x86, 0x53, 0x00, 0x81, 0x53, 0x00, 0xab,
+    0x53, 0x02, 0x80, 0x53, 0x00, 0x81, 0x53, 0x00,
+    0x88, 0x53, 0x07, 0x89, 0x53, 0x05, 0x85, 0x2d,
+    0x00, 0x81, 0x2d, 0x00, 0xa4, 0x2d, 0x00, 0x81,
+    0x2d, 0x00, 0x85, 0x2d, 0x06, 0x89, 0x2d, 0x60,
+    0xd5, 0x98, 0x4d, 0x60, 0x56, 0x80, 0x4a, 0x0e,
+    0xb1, 0x8e, 0x0c, 0x80, 0x8e, 0xe3, 0x39, 0x1b,
+    0x60, 0x05, 0xe0, 0x0e, 0x1b, 0x00, 0x84, 0x1b,
+    0x0a, 0xe0, 0x63, 0x1b, 0x6a, 0x5b, 0xe3, 0xce,
+    0x23, 0x00, 0x88, 0x23, 0x6f, 0x66, 0xe1, 0xe6,
+    0x03, 0x70, 0x11, 0x58, 0xe1, 0xd8, 0x08, 0x06,
+    0x9e, 0x5c, 0x00, 0x89, 0x5c, 0x03, 0x81, 0x5c,
+    0x5f, 0x9d, 0x09, 0x01, 0x85, 0x09, 0x09, 0xc5,
+    0x73, 0x09, 0x89, 0x73, 0x00, 0x86, 0x73, 0x00,
+    0x94, 0x73, 0x04, 0x92, 0x73, 0x62, 0x4f, 0xda,
+    0x54, 0x60, 0x04, 0xca, 0x59, 0x03, 0xb8, 0x59,
+    0x06, 0x90, 0x59, 0x3f, 0x80, 0x8f, 0x80, 0x64,
+    0x81, 0x19, 0x80, 0x42, 0x0a, 0x81, 0x2f, 0x0d,
+    0xf0, 0x07, 0x97, 0x8f, 0x07, 0xe2, 0x9f, 0x8f,
+    0xe1, 0x75, 0x42, 0x29, 0x88, 0x8f, 0x70, 0x12,
+    0x96, 0x80, 0x3d, 0xe0, 0xbd, 0x35, 0x30, 0x82,
+    0x35, 0x10, 0x83, 0x3d, 0x07, 0xe1, 0x2b, 0x64,
+    0x68, 0xa3, 0xe0, 0x0a, 0x22, 0x04, 0x8c, 0x22,
+    0x02, 0x88, 0x22, 0x06, 0x89, 0x22, 0x01, 0x83,
+    0x22, 0x83, 0x19, 0x70, 0x02, 0xfb, 0xe0, 0x95,
+    0x19, 0x09, 0xa6, 0x19, 0x01, 0xbd, 0x19, 0x82,
+    0x37, 0x90, 0x19, 0x87, 0x37, 0x81, 0x19, 0x86,
+    0x37, 0x9d, 0x19, 0x83, 0x37, 0xba, 0x19, 0x16,
+    0xc5, 0x2b, 0x60, 0x39, 0x93, 0x19, 0x0b, 0xd6,
+    0x19, 0x08, 0x98, 0x19, 0x60, 0x26, 0xd4, 0x19,
+    0x00, 0xc6, 0x19, 0x00, 0x81, 0x19, 0x01, 0x80,
+    0x19, 0x01, 0x81, 0x19, 0x01, 0x83, 0x19, 0x00,
+    0x8b, 0x19, 0x00, 0x80, 0x19, 0x00, 0x86, 0x19,
+    0x00, 0xc0, 0x19, 0x00, 0x83, 0x19, 0x01, 0x87,
+    0x19, 0x00, 0x86, 0x19, 0x00, 0x9b, 0x19, 0x00,
+    0x83, 0x19, 0x00, 0x84, 0x19, 0x00, 0x80, 0x19,
+    0x02, 0x86, 0x19, 0x00, 0xe0, 0xf3, 0x19, 0x01,
+    0xe0, 0xc3, 0x19, 0x01, 0xb1, 0x19, 0xe2, 0x2b,
+    0x80, 0x0e, 0x84, 0x80, 0x00, 0x8e, 0x80, 0x64,
+    0xef, 0x86, 0x28, 0x00, 0x90, 0x28, 0x01, 0x86,
+    0x28, 0x00, 0x81, 0x28, 0x00, 0x84, 0x28, 0x60,
+    0x74, 0xac, 0x65, 0x02, 0x8d, 0x65, 0x01, 0x89,
+    0x65, 0x03, 0x81, 0x65, 0x61, 0x0f, 0xb9, 0x98,
+    0x04, 0x80, 0x98, 0x64, 0x9f, 0xe0, 0x64, 0x56,
+    0x01, 0x8f, 0x56, 0x28, 0xcb, 0x01, 0x03, 0x89,
+    0x01, 0x03, 0x81, 0x01, 0x62, 0xb0, 0xc3, 0x19,
+    0x4b, 0xbc, 0x19, 0x60, 0x61, 0x83, 0x04, 0x00,
+    0x9a, 0x04, 0x00, 0x81, 0x04, 0x00, 0x80, 0x04,
+    0x01, 0x80, 0x04, 0x00, 0x89, 0x04, 0x00, 0x83,
+    0x04, 0x00, 0x80, 0x04, 0x00, 0x80, 0x04, 0x05,
+    0x80, 0x04, 0x03, 0x80, 0x04, 0x00, 0x80, 0x04,
+    0x00, 0x80, 0x04, 0x00, 0x82, 0x04, 0x00, 0x81,
+    0x04, 0x00, 0x80, 0x04, 0x01, 0x80, 0x04, 0x00,
+    0x80, 0x04, 0x00, 0x80, 0x04, 0x00, 0x80, 0x04,
+    0x00, 0x80, 0x04, 0x00, 0x81, 0x04, 0x00, 0x80,
+    0x04, 0x01, 0x83, 0x04, 0x00, 0x86, 0x04, 0x00,
+    0x83, 0x04, 0x00, 0x83, 0x04, 0x00, 0x80, 0x04,
+    0x00, 0x89, 0x04, 0x00, 0x90, 0x04, 0x04, 0x82,
+    0x04, 0x00, 0x84, 0x04, 0x00, 0x90, 0x04, 0x33,
+    0x81, 0x04, 0x60, 0xad, 0xab, 0x19, 0x03, 0xe0,
+    0x03, 0x19, 0x0b, 0x8e, 0x19, 0x01, 0x8e, 0x19,
+    0x00, 0x8e, 0x19, 0x00, 0xa4, 0x19, 0x09, 0xe0,
+    0x4d, 0x19, 0x37, 0x99, 0x19, 0x80, 0x35, 0x81,
+    0x19, 0x0c, 0xab, 0x19, 0x03, 0x88, 0x19, 0x06,
+    0x81, 0x19, 0x0d, 0x85, 0x19, 0x60, 0x39, 0xe3,
+    0x77, 0x19, 0x07, 0x8c, 0x19, 0x02, 0x8c, 0x19,
+    0x02, 0xe0, 0x13, 0x19, 0x0b, 0xd8, 0x19, 0x06,
+    0x8b, 0x19, 0x13, 0x8b, 0x19, 0x03, 0xb7, 0x19,
+    0x07, 0x89, 0x19, 0x05, 0xa7, 0x19, 0x07, 0x9d,
+    0x19, 0x01, 0x81, 0x19, 0x4d, 0xe0, 0x18, 0x19,
+    0x00, 0xd1, 0x19, 0x00, 0xe0, 0x26, 0x19, 0x0b,
+    0x8d, 0x19, 0x01, 0x84, 0x19, 0x02, 0x82, 0x19,
+    0x04, 0x86, 0x19, 0x08, 0x98, 0x19, 0x06, 0x86,
+    0x19, 0x08, 0x82, 0x19, 0x0c, 0x86, 0x19, 0x28,
+    0xe0, 0x32, 0x19, 0x00, 0xb6, 0x19, 0x24, 0x89,
+    0x19, 0x63, 0xa5, 0xf0, 0x96, 0x7d, 0x2f, 0x21,
+    0xef, 0xd4, 0x2f, 0x0a, 0xe0, 0x7d, 0x2f, 0x01,
+    0xf0, 0x06, 0x21, 0x2f, 0x0d, 0xf0, 0x0c, 0xd0,
+    0x2f, 0x6b, 0xbe, 0xe1, 0xbd, 0x2f, 0x65, 0x81,
+    0xf0, 0x02, 0xea, 0x2f, 0x7a, 0xdc, 0x55, 0x80,
+    0x19, 0x1d, 0xdf, 0x19, 0x60, 0x1f, 0xe0, 0x8f,
+    0x37,
 };
 
-static const uint8_t unicode_script_ext_table[828] = {
-    0x82, 0xc1, 0x00, 0x00, 0x01, 0x2c, 0x01, 0x00,
-    0x00, 0x01, 0x2c, 0x1c, 0x00, 0x0c, 0x01, 0x46,
-    0x80, 0x92, 0x00, 0x00, 0x02, 0x1d, 0x6c, 0x00,
-    0x02, 0x1d, 0x29, 0x01, 0x02, 0x1d, 0x46, 0x00,
-    0x02, 0x1d, 0x29, 0x81, 0x03, 0x00, 0x00, 0x06,
-    0x04, 0x64, 0x32, 0x89, 0x93, 0x9f, 0x0d, 0x00,
-    0x00, 0x06, 0x04, 0x64, 0x32, 0x89, 0x93, 0x9f,
-    0x00, 0x03, 0x04, 0x89, 0x93, 0x01, 0x00, 0x00,
-    0x07, 0x01, 0x04, 0x64, 0x32, 0x89, 0x93, 0x9f,
-    0x1f, 0x00, 0x00, 0x09, 0x01, 0x04, 0x51, 0x52,
-    0x71, 0x7a, 0x32, 0x84, 0x89, 0x09, 0x00, 0x0a,
-    0x02, 0x04, 0x89, 0x09, 0x00, 0x09, 0x03, 0x04,
-    0x93, 0x9f, 0x05, 0x00, 0x00, 0x02, 0x04, 0x89,
-    0x62, 0x00, 0x00, 0x02, 0x04, 0x32, 0x81, 0xfb,
-    0x00, 0x00, 0x0d, 0x0b, 0x20, 0x2b, 0x2d, 0x2f,
-    0x3d, 0x46, 0x50, 0x72, 0x7f, 0x90, 0x92, 0x97,
-    0x00, 0x0c, 0x0b, 0x20, 0x2b, 0x2d, 0x2f, 0x3d,
-    0x46, 0x50, 0x72, 0x90, 0x92, 0x97, 0x10, 0x00,
-    0x00, 0x14, 0x0b, 0x20, 0x22, 0x2e, 0x54, 0x2b,
-    0x2d, 0x2f, 0x3d, 0x4f, 0x50, 0x61, 0x72, 0x44,
-    0x83, 0x88, 0x8f, 0x90, 0x92, 0x97, 0x00, 0x15,
-    0x0b, 0x20, 0x22, 0x2e, 0x54, 0x2b, 0x2d, 0x2f,
-    0x3d, 0x48, 0x4f, 0x50, 0x61, 0x72, 0x44, 0x83,
-    0x88, 0x8f, 0x90, 0x92, 0x97, 0x09, 0x04, 0x20,
-    0x22, 0x3c, 0x4f, 0x75, 0x00, 0x09, 0x03, 0x0b,
-    0x15, 0x88, 0x75, 0x00, 0x09, 0x02, 0x2f, 0x5e,
-    0x75, 0x00, 0x09, 0x02, 0x2d, 0x42, 0x80, 0x75,
-    0x00, 0x0d, 0x02, 0x2b, 0x90, 0x80, 0x71, 0x00,
-    0x09, 0x02, 0x3d, 0x61, 0x82, 0xcf, 0x00, 0x09,
-    0x03, 0x15, 0x5f, 0x8c, 0x80, 0x30, 0x00, 0x00,
-    0x02, 0x28, 0x46, 0x85, 0xb8, 0x00, 0x01, 0x04,
-    0x11, 0x33, 0x8b, 0x8a, 0x80, 0x4a, 0x00, 0x01,
-    0x02, 0x5c, 0x78, 0x00, 0x00, 0x00, 0x02, 0x5c,
-    0x78, 0x84, 0x49, 0x00, 0x00, 0x04, 0x0b, 0x20,
-    0x2b, 0x3d, 0x00, 0x01, 0x20, 0x00, 0x04, 0x0b,
-    0x20, 0x2b, 0x3d, 0x00, 0x02, 0x20, 0x2b, 0x00,
-    0x01, 0x20, 0x01, 0x02, 0x0b, 0x20, 0x00, 0x02,
-    0x20, 0x7f, 0x00, 0x02, 0x0b, 0x20, 0x00, 0x02,
-    0x20, 0x7f, 0x00, 0x06, 0x20, 0x3d, 0x50, 0x72,
-    0x90, 0x92, 0x00, 0x01, 0x20, 0x01, 0x02, 0x20,
-    0x7f, 0x01, 0x01, 0x20, 0x00, 0x02, 0x20, 0x7f,
-    0x00, 0x02, 0x0b, 0x20, 0x06, 0x01, 0x20, 0x00,
-    0x02, 0x20, 0x61, 0x00, 0x02, 0x0b, 0x20, 0x01,
-    0x01, 0x20, 0x00, 0x02, 0x0b, 0x20, 0x03, 0x01,
-    0x20, 0x00, 0x08, 0x0b, 0x20, 0x2b, 0x3d, 0x61,
-    0x72, 0x92, 0x97, 0x00, 0x02, 0x20, 0x2b, 0x00,
-    0x03, 0x20, 0x2b, 0x3d, 0x01, 0x02, 0x0b, 0x20,
-    0x00, 0x01, 0x0b, 0x01, 0x02, 0x20, 0x2b, 0x00,
-    0x01, 0x61, 0x80, 0x44, 0x00, 0x01, 0x01, 0x2c,
-    0x35, 0x00, 0x00, 0x02, 0x1d, 0x89, 0x00, 0x00,
-    0x00, 0x01, 0x89, 0x81, 0xb3, 0x00, 0x00, 0x02,
-    0x46, 0x5c, 0x80, 0x3f, 0x00, 0x00, 0x03, 0x20,
-    0x2b, 0x46, 0x8c, 0xd1, 0x00, 0x00, 0x02, 0x1d,
-    0x29, 0x81, 0x3c, 0x00, 0x01, 0x06, 0x0d, 0x31,
-    0x30, 0x36, 0x3e, 0xa0, 0x00, 0x05, 0x0d, 0x31,
-    0x30, 0x36, 0x3e, 0x01, 0x00, 0x00, 0x01, 0x30,
-    0x00, 0x00, 0x09, 0x06, 0x0d, 0x31, 0x30, 0x36,
-    0x3e, 0xa0, 0x00, 0x00, 0x00, 0x05, 0x0d, 0x31,
-    0x30, 0x36, 0x3e, 0x07, 0x06, 0x0d, 0x31, 0x30,
-    0x36, 0x3e, 0xa0, 0x03, 0x05, 0x0d, 0x31, 0x30,
-    0x36, 0x3e, 0x09, 0x00, 0x03, 0x02, 0x0d, 0x30,
-    0x01, 0x00, 0x00, 0x05, 0x0d, 0x31, 0x30, 0x36,
-    0x3e, 0x04, 0x02, 0x36, 0x3e, 0x00, 0x00, 0x00,
-    0x05, 0x0d, 0x31, 0x30, 0x36, 0x3e, 0x03, 0x00,
-    0x01, 0x03, 0x30, 0x36, 0x3e, 0x01, 0x01, 0x30,
-    0x58, 0x00, 0x03, 0x02, 0x36, 0x3e, 0x02, 0x00,
-    0x00, 0x02, 0x36, 0x3e, 0x59, 0x00, 0x00, 0x06,
-    0x0d, 0x31, 0x30, 0x36, 0x3e, 0xa0, 0x00, 0x02,
-    0x36, 0x3e, 0x80, 0x12, 0x00, 0x0f, 0x01, 0x30,
-    0x1f, 0x00, 0x23, 0x01, 0x30, 0x3b, 0x00, 0x27,
-    0x01, 0x30, 0x37, 0x00, 0x30, 0x01, 0x30, 0x0e,
-    0x00, 0x0b, 0x01, 0x30, 0x32, 0x00, 0x00, 0x01,
-    0x30, 0x57, 0x00, 0x18, 0x01, 0x30, 0x09, 0x00,
-    0x04, 0x01, 0x30, 0x5f, 0x00, 0x1e, 0x01, 0x30,
-    0xc0, 0x31, 0xef, 0x00, 0x00, 0x02, 0x1d, 0x29,
-    0x80, 0x0f, 0x00, 0x07, 0x02, 0x30, 0x46, 0x80,
-    0xa7, 0x00, 0x02, 0x0e, 0x20, 0x22, 0x2d, 0x2f,
-    0x42, 0x3d, 0x3c, 0x4f, 0x50, 0x5b, 0x61, 0x44,
-    0x8f, 0x97, 0x02, 0x0d, 0x20, 0x22, 0x2d, 0x2f,
-    0x42, 0x3d, 0x3c, 0x4f, 0x5b, 0x61, 0x44, 0x8f,
-    0x97, 0x03, 0x0b, 0x20, 0x22, 0x2d, 0x2f, 0x42,
-    0x3c, 0x4f, 0x5b, 0x44, 0x8f, 0x97, 0x80, 0x36,
-    0x00, 0x00, 0x02, 0x0b, 0x20, 0x00, 0x00, 0x00,
-    0x02, 0x20, 0x90, 0x39, 0x00, 0x00, 0x03, 0x3f,
-    0x46, 0x5f, 0x80, 0x1f, 0x00, 0x00, 0x02, 0x10,
-    0x3b, 0xc0, 0x12, 0xed, 0x00, 0x01, 0x02, 0x04,
-    0x64, 0x80, 0x31, 0x00, 0x00, 0x02, 0x04, 0x93,
-    0x09, 0x00, 0x00, 0x02, 0x04, 0x93, 0x46, 0x00,
-    0x01, 0x05, 0x0d, 0x31, 0x30, 0x36, 0x3e, 0x80,
-    0x99, 0x00, 0x04, 0x06, 0x0d, 0x31, 0x30, 0x36,
-    0x3e, 0xa0, 0x09, 0x00, 0x00, 0x02, 0x36, 0x3e,
-    0x2c, 0x00, 0x01, 0x02, 0x36, 0x3e, 0x80, 0xdf,
-    0x00, 0x01, 0x03, 0x1e, 0x1c, 0x4a, 0x00, 0x02,
-    0x1c, 0x4a, 0x03, 0x00, 0x2c, 0x03, 0x1c, 0x49,
-    0x4a, 0x02, 0x00, 0x08, 0x02, 0x1c, 0x4a, 0x81,
-    0x1f, 0x00, 0x1b, 0x02, 0x04, 0x1a, 0x87, 0x75,
-    0x00, 0x00, 0x02, 0x52, 0x71, 0x87, 0x8d, 0x00,
-    0x00, 0x02, 0x2b, 0x90, 0x00, 0x00, 0x00, 0x02,
-    0x2b, 0x90, 0x36, 0x00, 0x01, 0x02, 0x2b, 0x90,
-    0x8c, 0x12, 0x00, 0x01, 0x02, 0x2b, 0x90, 0x00,
-    0x00, 0x00, 0x02, 0x2b, 0x90, 0xc0, 0x5c, 0x4b,
-    0x00, 0x03, 0x01, 0x23, 0x96, 0x3b, 0x00, 0x11,
-    0x01, 0x30, 0x9e, 0x5d, 0x00, 0x01, 0x01, 0x30,
-    0xce, 0xcd, 0x2d, 0x00,
+static const uint8_t unicode_script_ext_table[799] = {
+    0x82, 0xc1, 0x00, 0x00, 0x01, 0x2b, 0x01, 0x00,
+    0x00, 0x01, 0x2b, 0x1c, 0x00, 0x0c, 0x01, 0x45,
+    0x80, 0x92, 0x00, 0x00, 0x02, 0x1d, 0x6b, 0x00,
+    0x02, 0x1d, 0x28, 0x01, 0x02, 0x1d, 0x45, 0x00,
+    0x02, 0x1d, 0x28, 0x81, 0x03, 0x00, 0x00, 0x05,
+    0x04, 0x31, 0x87, 0x91, 0x9a, 0x0d, 0x00, 0x00,
+    0x05, 0x04, 0x31, 0x87, 0x91, 0x9a, 0x00, 0x03,
+    0x04, 0x87, 0x91, 0x01, 0x00, 0x00, 0x05, 0x04,
+    0x31, 0x87, 0x91, 0x9a, 0x1f, 0x00, 0x00, 0x08,
+    0x01, 0x04, 0x50, 0x51, 0x78, 0x31, 0x82, 0x87,
+    0x09, 0x00, 0x0a, 0x02, 0x04, 0x87, 0x09, 0x00,
+    0x09, 0x03, 0x04, 0x91, 0x9a, 0x05, 0x00, 0x00,
+    0x02, 0x04, 0x87, 0x62, 0x00, 0x00, 0x02, 0x04,
+    0x31, 0x81, 0xfb, 0x00, 0x00, 0x0d, 0x0b, 0x1f,
+    0x2a, 0x2c, 0x2e, 0x3c, 0x45, 0x4f, 0x70, 0x7d,
+    0x8e, 0x90, 0x95, 0x00, 0x0c, 0x0b, 0x1f, 0x2a,
+    0x2c, 0x2e, 0x3c, 0x45, 0x4f, 0x70, 0x8e, 0x90,
+    0x95, 0x10, 0x00, 0x00, 0x14, 0x0b, 0x1f, 0x21,
+    0x2d, 0x53, 0x2a, 0x2c, 0x2e, 0x3c, 0x4e, 0x4f,
+    0x60, 0x70, 0x43, 0x81, 0x86, 0x8d, 0x8e, 0x90,
+    0x95, 0x00, 0x15, 0x0b, 0x1f, 0x21, 0x2d, 0x53,
+    0x2a, 0x2c, 0x2e, 0x3c, 0x47, 0x4e, 0x4f, 0x60,
+    0x70, 0x43, 0x81, 0x86, 0x8d, 0x8e, 0x90, 0x95,
+    0x09, 0x04, 0x1f, 0x21, 0x3b, 0x4e, 0x75, 0x00,
+    0x09, 0x03, 0x0b, 0x15, 0x86, 0x75, 0x00, 0x09,
+    0x02, 0x2e, 0x5d, 0x75, 0x00, 0x09, 0x02, 0x2c,
+    0x41, 0x80, 0x75, 0x00, 0x0d, 0x02, 0x2a, 0x8e,
+    0x80, 0x71, 0x00, 0x09, 0x02, 0x3c, 0x60, 0x82,
+    0xcf, 0x00, 0x09, 0x03, 0x15, 0x5e, 0x8a, 0x80,
+    0x30, 0x00, 0x00, 0x02, 0x27, 0x45, 0x85, 0xb8,
+    0x00, 0x01, 0x04, 0x11, 0x32, 0x89, 0x88, 0x80,
+    0x4a, 0x00, 0x01, 0x02, 0x5b, 0x76, 0x00, 0x00,
+    0x00, 0x02, 0x5b, 0x76, 0x84, 0x49, 0x00, 0x00,
+    0x04, 0x0b, 0x1f, 0x2a, 0x3c, 0x00, 0x01, 0x1f,
+    0x00, 0x04, 0x0b, 0x1f, 0x2a, 0x3c, 0x00, 0x02,
+    0x1f, 0x2a, 0x00, 0x01, 0x1f, 0x01, 0x02, 0x0b,
+    0x1f, 0x00, 0x02, 0x1f, 0x7d, 0x00, 0x02, 0x0b,
+    0x1f, 0x00, 0x02, 0x1f, 0x7d, 0x00, 0x06, 0x1f,
+    0x3c, 0x4f, 0x70, 0x8e, 0x90, 0x00, 0x01, 0x1f,
+    0x01, 0x02, 0x1f, 0x7d, 0x01, 0x01, 0x1f, 0x00,
+    0x02, 0x1f, 0x7d, 0x00, 0x02, 0x0b, 0x1f, 0x06,
+    0x01, 0x1f, 0x00, 0x02, 0x1f, 0x60, 0x00, 0x02,
+    0x0b, 0x1f, 0x01, 0x01, 0x1f, 0x00, 0x02, 0x0b,
+    0x1f, 0x03, 0x01, 0x1f, 0x00, 0x08, 0x0b, 0x1f,
+    0x2a, 0x3c, 0x60, 0x70, 0x90, 0x95, 0x00, 0x02,
+    0x1f, 0x2a, 0x00, 0x03, 0x1f, 0x2a, 0x3c, 0x01,
+    0x02, 0x0b, 0x1f, 0x00, 0x01, 0x0b, 0x01, 0x02,
+    0x1f, 0x2a, 0x00, 0x01, 0x60, 0x80, 0x44, 0x00,
+    0x01, 0x01, 0x2b, 0x35, 0x00, 0x00, 0x02, 0x1d,
+    0x87, 0x81, 0xb5, 0x00, 0x00, 0x02, 0x45, 0x5b,
+    0x80, 0x3f, 0x00, 0x00, 0x03, 0x1f, 0x2a, 0x45,
+    0x8c, 0xd1, 0x00, 0x00, 0x02, 0x1d, 0x28, 0x81,
+    0x3c, 0x00, 0x01, 0x06, 0x0d, 0x30, 0x2f, 0x35,
+    0x3d, 0x9b, 0x00, 0x05, 0x0d, 0x30, 0x2f, 0x35,
+    0x3d, 0x01, 0x00, 0x00, 0x01, 0x2f, 0x00, 0x00,
+    0x09, 0x06, 0x0d, 0x30, 0x2f, 0x35, 0x3d, 0x9b,
+    0x00, 0x00, 0x00, 0x05, 0x0d, 0x30, 0x2f, 0x35,
+    0x3d, 0x07, 0x06, 0x0d, 0x30, 0x2f, 0x35, 0x3d,
+    0x9b, 0x03, 0x05, 0x0d, 0x30, 0x2f, 0x35, 0x3d,
+    0x09, 0x00, 0x03, 0x02, 0x0d, 0x2f, 0x01, 0x00,
+    0x00, 0x05, 0x0d, 0x30, 0x2f, 0x35, 0x3d, 0x04,
+    0x02, 0x35, 0x3d, 0x00, 0x00, 0x00, 0x05, 0x0d,
+    0x30, 0x2f, 0x35, 0x3d, 0x03, 0x00, 0x01, 0x03,
+    0x2f, 0x35, 0x3d, 0x01, 0x01, 0x2f, 0x58, 0x00,
+    0x03, 0x02, 0x35, 0x3d, 0x02, 0x00, 0x00, 0x02,
+    0x35, 0x3d, 0x59, 0x00, 0x00, 0x06, 0x0d, 0x30,
+    0x2f, 0x35, 0x3d, 0x9b, 0x00, 0x02, 0x35, 0x3d,
+    0x80, 0x12, 0x00, 0x0f, 0x01, 0x2f, 0x1f, 0x00,
+    0x23, 0x01, 0x2f, 0x3b, 0x00, 0x27, 0x01, 0x2f,
+    0x37, 0x00, 0x30, 0x01, 0x2f, 0x0e, 0x00, 0x0b,
+    0x01, 0x2f, 0x32, 0x00, 0x00, 0x01, 0x2f, 0x57,
+    0x00, 0x18, 0x01, 0x2f, 0x09, 0x00, 0x04, 0x01,
+    0x2f, 0x5f, 0x00, 0x1e, 0x01, 0x2f, 0xc0, 0x31,
+    0xef, 0x00, 0x00, 0x02, 0x1d, 0x28, 0x80, 0x0f,
+    0x00, 0x07, 0x02, 0x2f, 0x45, 0x80, 0xa7, 0x00,
+    0x02, 0x0e, 0x1f, 0x21, 0x2c, 0x2e, 0x41, 0x3c,
+    0x3b, 0x4e, 0x4f, 0x5a, 0x60, 0x43, 0x8d, 0x95,
+    0x02, 0x0d, 0x1f, 0x21, 0x2c, 0x2e, 0x41, 0x3c,
+    0x3b, 0x4e, 0x5a, 0x60, 0x43, 0x8d, 0x95, 0x03,
+    0x0b, 0x1f, 0x21, 0x2c, 0x2e, 0x41, 0x3b, 0x4e,
+    0x5a, 0x43, 0x8d, 0x95, 0x80, 0x36, 0x00, 0x00,
+    0x02, 0x0b, 0x1f, 0x00, 0x00, 0x00, 0x02, 0x1f,
+    0x8e, 0x39, 0x00, 0x00, 0x03, 0x3e, 0x45, 0x5e,
+    0x80, 0x1f, 0x00, 0x00, 0x02, 0x10, 0x3a, 0xc0,
+    0x13, 0xa1, 0x00, 0x00, 0x02, 0x04, 0x91, 0x09,
+    0x00, 0x00, 0x02, 0x04, 0x91, 0x46, 0x00, 0x01,
+    0x05, 0x0d, 0x30, 0x2f, 0x35, 0x3d, 0x80, 0x99,
+    0x00, 0x04, 0x06, 0x0d, 0x30, 0x2f, 0x35, 0x3d,
+    0x9b, 0x09, 0x00, 0x00, 0x02, 0x35, 0x3d, 0x2c,
+    0x00, 0x01, 0x02, 0x35, 0x3d, 0x80, 0xdf, 0x00,
+    0x02, 0x02, 0x1c, 0x49, 0x03, 0x00, 0x2c, 0x03,
+    0x1c, 0x48, 0x49, 0x02, 0x00, 0x08, 0x02, 0x1c,
+    0x49, 0x81, 0x1f, 0x00, 0x1b, 0x02, 0x04, 0x1a,
+    0x8f, 0x84, 0x00, 0x00, 0x02, 0x2a, 0x8e, 0x00,
+    0x00, 0x00, 0x02, 0x2a, 0x8e, 0x36, 0x00, 0x01,
+    0x02, 0x2a, 0x8e, 0x8c, 0x12, 0x00, 0x01, 0x02,
+    0x2a, 0x8e, 0x00, 0x00, 0x00, 0x02, 0x2a, 0x8e,
+    0xc0, 0x5c, 0x4b, 0x00, 0x03, 0x01, 0x22, 0x96,
+    0x3b, 0x00, 0x11, 0x01, 0x2f, 0x9e, 0x5d, 0x00,
+    0x01, 0x01, 0x2f, 0xce, 0xcd, 0x2d, 0x00,
 };
 
 static const uint8_t unicode_prop_Hyphen_table[28] = {
@@ -3616,7 +3544,7 @@ static const uint8_t unicode_prop_Other_Math_table[200] = {
     0x80, 0x89, 0x80, 0x90, 0x22, 0x04, 0x80, 0x90,
 };
 
-static const uint8_t unicode_prop_Other_Alphabetic_table[417] = {
+static const uint8_t unicode_prop_Other_Alphabetic_table[411] = {
     0x43, 0x44, 0x80, 0x42, 0x69, 0x8d, 0x00, 0x01,
     0x01, 0x00, 0xc7, 0x8a, 0xaf, 0x8c, 0x06, 0x8f,
     0x80, 0xe4, 0x33, 0x19, 0x0b, 0x80, 0xa2, 0x80,
@@ -3640,47 +3568,45 @@ static const uint8_t unicode_prop_Other_Alphabetic_table[417] = {
     0x89, 0x83, 0x46, 0x73, 0x81, 0x9d, 0x81, 0x9d,
     0x81, 0x9d, 0x81, 0xc1, 0x92, 0x40, 0xbb, 0x81,
     0xa1, 0x80, 0xf5, 0x8b, 0x83, 0x88, 0x40, 0xdd,
-    0x84, 0xb8, 0x89, 0x81, 0x93, 0xc9, 0x81, 0x8a,
-    0x82, 0xb0, 0x84, 0xaf, 0x8e, 0xbb, 0x82, 0x9d,
-    0x88, 0x09, 0xb8, 0x8a, 0xb1, 0x92, 0x41, 0xaf,
-    0x8d, 0x46, 0xc0, 0xb3, 0x48, 0xf5, 0x9f, 0x60,
-    0x78, 0x73, 0x87, 0xa1, 0x81, 0x41, 0x61, 0x07,
-    0x80, 0x96, 0x84, 0xd7, 0x81, 0xb1, 0x8f, 0x00,
-    0xb8, 0x80, 0xa5, 0x84, 0x9b, 0x8b, 0xac, 0x83,
-    0xaf, 0x8b, 0xa4, 0x80, 0xc2, 0x8d, 0x8b, 0x07,
-    0x81, 0xac, 0x82, 0xb1, 0x00, 0x11, 0x0c, 0x80,
-    0xab, 0x24, 0x80, 0x40, 0xec, 0x87, 0x60, 0x4f,
-    0x32, 0x80, 0x48, 0x56, 0x84, 0x46, 0x85, 0x10,
-    0x0c, 0x83, 0x43, 0x13, 0x83, 0x41, 0x82, 0x81,
-    0x41, 0x52, 0x82, 0xb4, 0x8d, 0xac, 0x81, 0x8c,
-    0x80, 0xac, 0x88, 0x88, 0x80, 0xbc, 0x82, 0xa3,
-    0x8b, 0x91, 0x81, 0xb8, 0x82, 0xaf, 0x8c, 0x8d,
-    0x81, 0xdb, 0x88, 0x08, 0x28, 0x40, 0x9f, 0x89,
-    0x96, 0x83, 0xb9, 0x31, 0x09, 0x81, 0x89, 0x80,
-    0x89, 0x81, 0x40, 0xd0, 0x8c, 0x02, 0xe9, 0x91,
-    0x40, 0xec, 0x31, 0x86, 0x9c, 0x81, 0xd1, 0x8e,
-    0x00, 0xe9, 0x8a, 0xe6, 0x8d, 0x41, 0x00, 0x8c,
-    0x40, 0xf6, 0x28, 0x09, 0x0a, 0x00, 0x80, 0x40,
-    0x8d, 0x31, 0x2b, 0x80, 0x9b, 0x89, 0xa9, 0x20,
-    0x83, 0x91, 0x8a, 0xad, 0x8d, 0x41, 0x96, 0x38,
-    0x86, 0xd2, 0x95, 0x80, 0x8d, 0xf9, 0x2a, 0x00,
-    0x08, 0x10, 0x02, 0x80, 0xc1, 0x20, 0x08, 0x83,
-    0x41, 0x5b, 0x83, 0x60, 0x50, 0x57, 0x00, 0xb6,
-    0x33, 0xdc, 0x81, 0x60, 0x4c, 0xab, 0x80, 0x60,
-    0x23, 0x60, 0x30, 0x90, 0x0e, 0x01, 0x04, 0x49,
-    0x1b, 0x80, 0x47, 0xe7, 0x99, 0x85, 0x99, 0x85,
-    0x99,
+    0x84, 0xb8, 0x89, 0x81, 0x93, 0xc9, 0x81, 0xbe,
+    0x84, 0xaf, 0x8e, 0xbb, 0x82, 0x9d, 0x88, 0x09,
+    0xb8, 0x8a, 0xb1, 0x92, 0x41, 0xaf, 0x8d, 0x46,
+    0xc0, 0xb3, 0x48, 0xf5, 0x9f, 0x60, 0x78, 0x73,
+    0x87, 0xa1, 0x81, 0x41, 0x61, 0x07, 0x80, 0x96,
+    0x84, 0xd7, 0x81, 0xb1, 0x8f, 0x00, 0xb8, 0x80,
+    0xa5, 0x84, 0x9b, 0x8b, 0xac, 0x83, 0xaf, 0x8b,
+    0xa4, 0x80, 0xc2, 0x8d, 0x8b, 0x07, 0x81, 0xac,
+    0x82, 0xb1, 0x00, 0x11, 0x0c, 0x80, 0xab, 0x24,
+    0x80, 0x40, 0xec, 0x87, 0x60, 0x4f, 0x32, 0x80,
+    0x48, 0x56, 0x84, 0x46, 0x85, 0x10, 0x0c, 0x83,
+    0x43, 0x13, 0x83, 0x41, 0x82, 0x81, 0x41, 0x52,
+    0x82, 0xb4, 0x8d, 0xbb, 0x80, 0xac, 0x88, 0xc6,
+    0x82, 0xa3, 0x8b, 0x91, 0x81, 0xb8, 0x82, 0xaf,
+    0x8c, 0x8d, 0x81, 0xdb, 0x88, 0x08, 0x28, 0x40,
+    0x9f, 0x89, 0x96, 0x83, 0xb9, 0x31, 0x09, 0x81,
+    0x89, 0x80, 0x89, 0x81, 0x40, 0xd0, 0x8c, 0x02,
+    0xe9, 0x91, 0x40, 0xec, 0x31, 0x86, 0x9c, 0x81,
+    0xd1, 0x8e, 0x00, 0xe9, 0x8a, 0xe6, 0x8d, 0x41,
+    0x00, 0x8c, 0x40, 0xf6, 0x28, 0x09, 0x0a, 0x00,
+    0x80, 0x40, 0x8d, 0x31, 0x2b, 0x80, 0x9b, 0x89,
+    0xa9, 0x20, 0x83, 0x91, 0x8a, 0xad, 0x8d, 0x41,
+    0x96, 0x38, 0x86, 0xd2, 0x95, 0x80, 0x8d, 0xf9,
+    0x2a, 0x00, 0x08, 0x10, 0x02, 0x80, 0xc1, 0x20,
+    0x08, 0x83, 0x41, 0x5b, 0x83, 0x60, 0x50, 0x57,
+    0x00, 0xb6, 0x33, 0xdc, 0x81, 0x60, 0x4c, 0xab,
+    0x80, 0x60, 0x23, 0x60, 0x30, 0x90, 0x0e, 0x01,
+    0x04, 0x49, 0x1b, 0x80, 0x47, 0xe7, 0x99, 0x85,
+    0x99, 0x85, 0x99,
 };
 
-static const uint8_t unicode_prop_Other_Lowercase_table[59] = {
+static const uint8_t unicode_prop_Other_Lowercase_table[51] = {
     0x40, 0xa9, 0x80, 0x8e, 0x80, 0x41, 0xf4, 0x88,
     0x31, 0x9d, 0x84, 0xdf, 0x80, 0xb3, 0x80, 0x59,
     0xb0, 0xbe, 0x8c, 0x80, 0xa1, 0xa4, 0x42, 0xb0,
     0x80, 0x8c, 0x80, 0x8f, 0x8c, 0x40, 0xd2, 0x8f,
     0x43, 0x4f, 0x99, 0x47, 0x91, 0x81, 0x60, 0x7a,
     0x1d, 0x81, 0x40, 0xd1, 0x80, 0x40, 0x86, 0x81,
-    0x43, 0x61, 0x83, 0x60, 0x5c, 0x1f, 0x01, 0x10,
-    0xa9, 0x80, 0x88,
+    0x43, 0x61, 0x83,
 };
 
 static const uint8_t unicode_prop_Other_Uppercase_table[15] = {
@@ -3717,10 +3643,10 @@ static const uint8_t unicode_prop_Other_ID_Continue_table[12] = {
     0x88, 0x46, 0x67, 0x80,
 };
 
-static const uint8_t unicode_prop_Prepended_Concatenation_Mark_table[19] = {
+static const uint8_t unicode_prop_Prepended_Concatenation_Mark_table[17] = {
     0x45, 0xff, 0x85, 0x40, 0xd6, 0x80, 0xb0, 0x80,
-    0x41, 0x7f, 0x81, 0xcf, 0x80, 0x61, 0x07, 0xd9,
-    0x80, 0x8e, 0x80,
+    0x41, 0xd1, 0x80, 0x61, 0x07, 0xd9, 0x80, 0x8e,
+    0x80,
 };
 
 static const uint8_t unicode_prop_XID_Start1_table[31] = {
@@ -3750,7 +3676,7 @@ static const uint8_t unicode_prop_Changes_When_Casefolded1_table[33] = {
     0x84,
 };
 
-static const uint8_t unicode_prop_Changes_When_NFKC_Casefolded1_table[448] = {
+static const uint8_t unicode_prop_Changes_When_NFKC_Casefolded1_table[441] = {
     0x40, 0x9f, 0x06, 0x00, 0x01, 0x00, 0x01, 0x12,
     0x10, 0x82, 0x9f, 0x80, 0xcf, 0x01, 0x80, 0x8b,
     0x07, 0x80, 0xfb, 0x01, 0x01, 0x80, 0xa5, 0x80,
@@ -3764,7 +3690,7 @@ static const uint8_t unicode_prop_Changes_When_NFKC_Casefolded1_table[448] = {
     0x03, 0x03, 0x03, 0x80, 0x8b, 0x80, 0x88, 0x00,
     0x26, 0x80, 0x90, 0x80, 0x88, 0x03, 0x03, 0x03,
     0x80, 0x8b, 0x80, 0x41, 0x41, 0x80, 0xe1, 0x81,
-    0x46, 0x52, 0x81, 0xd4, 0x84, 0x45, 0x1b, 0x10,
+    0x46, 0x52, 0x81, 0xd4, 0x83, 0x45, 0x1c, 0x10,
     0x8a, 0x80, 0x91, 0x80, 0x9b, 0x8c, 0x80, 0xa1,
     0xa4, 0x40, 0xd9, 0x80, 0x40, 0xd5, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0x3f, 0x87,
@@ -3783,30 +3709,30 @@ static const uint8_t unicode_prop_Changes_When_NFKC_Casefolded1_table[448] = {
     0x80, 0xde, 0x80, 0xb0, 0xdd, 0x82, 0x8d, 0xdf,
     0x9e, 0x80, 0xa7, 0x87, 0xae, 0x80, 0x41, 0x7f,
     0x60, 0x72, 0x9b, 0x81, 0x40, 0xd1, 0x80, 0x40,
-    0x80, 0x12, 0x81, 0x43, 0x61, 0x83, 0x88, 0x80,
-    0x60, 0x4d, 0x95, 0x41, 0x0d, 0x08, 0x00, 0x81,
-    0x89, 0x00, 0x00, 0x09, 0x82, 0xc3, 0x81, 0xe9,
-    0xa5, 0x86, 0x8b, 0x24, 0x00, 0x97, 0x04, 0x00,
-    0x01, 0x01, 0x80, 0xeb, 0xa0, 0x41, 0x6a, 0x91,
-    0xbf, 0x81, 0xb5, 0xa7, 0x8c, 0x82, 0x99, 0x95,
-    0x94, 0x81, 0x8b, 0x80, 0x92, 0x03, 0x1a, 0x00,
-    0x80, 0x40, 0x86, 0x08, 0x80, 0x9f, 0x99, 0x40,
-    0x83, 0x15, 0x0d, 0x0d, 0x0a, 0x16, 0x06, 0x80,
-    0x88, 0x47, 0x87, 0x20, 0xa9, 0x80, 0x88, 0x60,
-    0xb4, 0xe4, 0x83, 0x54, 0xb9, 0x86, 0x8d, 0x87,
-    0xbf, 0x85, 0x42, 0x3e, 0xd4, 0x80, 0xc6, 0x01,
-    0x08, 0x09, 0x0b, 0x80, 0x8b, 0x00, 0x06, 0x80,
-    0xc0, 0x03, 0x0f, 0x06, 0x80, 0x9b, 0x03, 0x04,
-    0x00, 0x16, 0x80, 0x41, 0x53, 0x81, 0x41, 0x23,
-    0x81, 0xb1, 0x55, 0xff, 0x18, 0x9a, 0x01, 0x00,
-    0x08, 0x80, 0x89, 0x03, 0x00, 0x00, 0x28, 0x18,
-    0x00, 0x00, 0x02, 0x01, 0x00, 0x08, 0x00, 0x00,
-    0x00, 0x00, 0x01, 0x00, 0x0b, 0x06, 0x03, 0x03,
-    0x00, 0x80, 0x89, 0x80, 0x90, 0x22, 0x04, 0x80,
-    0x90, 0x42, 0x43, 0x8a, 0x84, 0x9e, 0x80, 0x9f,
-    0x99, 0x82, 0xa2, 0x80, 0xee, 0x82, 0x8c, 0xab,
-    0x83, 0x88, 0x31, 0x49, 0x9d, 0x89, 0x60, 0xfc,
-    0x05, 0x42, 0x1d, 0x6b, 0x05, 0xe1, 0x4f, 0xff,
+    0x86, 0x81, 0x43, 0x61, 0x83, 0x88, 0x80, 0x60,
+    0x4d, 0x95, 0x41, 0x0d, 0x08, 0x00, 0x81, 0x89,
+    0x00, 0x00, 0x09, 0x82, 0xc3, 0x81, 0xe9, 0xa5,
+    0x86, 0x8b, 0x24, 0x00, 0x97, 0x04, 0x00, 0x01,
+    0x01, 0x80, 0xeb, 0xa0, 0x41, 0x6a, 0x91, 0xbf,
+    0x81, 0xb5, 0xa7, 0x8c, 0x82, 0x99, 0x95, 0x94,
+    0x81, 0x8b, 0x80, 0x92, 0x03, 0x1a, 0x00, 0x80,
+    0x40, 0x86, 0x08, 0x80, 0x9f, 0x99, 0x40, 0x83,
+    0x15, 0x0d, 0x0d, 0x0a, 0x16, 0x06, 0x80, 0x88,
+    0x60, 0xbc, 0xa6, 0x83, 0x54, 0xb9, 0x86, 0x8d,
+    0x87, 0xbf, 0x85, 0x42, 0x3e, 0xd4, 0x80, 0xc6,
+    0x01, 0x08, 0x09, 0x0b, 0x80, 0x8b, 0x00, 0x06,
+    0x80, 0xc0, 0x03, 0x0f, 0x06, 0x80, 0x9b, 0x03,
+    0x04, 0x00, 0x16, 0x80, 0x41, 0x53, 0x81, 0x41,
+    0x23, 0x81, 0xb1, 0x55, 0xff, 0x18, 0x9a, 0x01,
+    0x00, 0x08, 0x80, 0x89, 0x03, 0x00, 0x00, 0x28,
+    0x18, 0x00, 0x00, 0x02, 0x01, 0x00, 0x08, 0x00,
+    0x00, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x06, 0x03,
+    0x03, 0x00, 0x80, 0x89, 0x80, 0x90, 0x22, 0x04,
+    0x80, 0x90, 0x42, 0x43, 0x8a, 0x84, 0x9e, 0x80,
+    0x9f, 0x99, 0x82, 0xa2, 0x80, 0xee, 0x82, 0x8c,
+    0xab, 0x83, 0x88, 0x31, 0x49, 0x9d, 0x89, 0x60,
+    0xfc, 0x05, 0x42, 0x1d, 0x6b, 0x05, 0xe1, 0x4f,
+    0xff,
 };
 
 static const uint8_t unicode_prop_ASCII_Hex_Digit_table[5] = {
@@ -3818,14 +3744,14 @@ static const uint8_t unicode_prop_Bidi_Control_table[10] = {
     0xb6, 0x83,
 };
 
-static const uint8_t unicode_prop_Dash_table[55] = {
+static const uint8_t unicode_prop_Dash_table[53] = {
     0xac, 0x80, 0x45, 0x5b, 0x80, 0xb2, 0x80, 0x4e,
     0x40, 0x80, 0x44, 0x04, 0x80, 0x48, 0x08, 0x85,
     0xbc, 0x80, 0xa6, 0x80, 0x8e, 0x80, 0x41, 0x85,
     0x80, 0x4c, 0x03, 0x01, 0x80, 0x9e, 0x0b, 0x80,
-    0x9b, 0x80, 0x41, 0xbd, 0x80, 0x92, 0x80, 0xee,
-    0x80, 0x60, 0xcd, 0x8f, 0x81, 0xa4, 0x80, 0x89,
-    0x80, 0x40, 0xa8, 0x80, 0x4f, 0x9e, 0x80,
+    0x41, 0xda, 0x80, 0x92, 0x80, 0xee, 0x80, 0x60,
+    0xcd, 0x8f, 0x81, 0xa4, 0x80, 0x89, 0x80, 0x40,
+    0xa8, 0x80, 0x4f, 0x9e, 0x80,
 };
 
 static const uint8_t unicode_prop_Deprecated_table[23] = {
@@ -3834,59 +3760,55 @@ static const uint8_t unicode_prop_Deprecated_table[23] = {
     0x42, 0xb8, 0x81, 0x6d, 0xdc, 0xd5, 0x80,
 };
 
-static const uint8_t unicode_prop_Diacritic_table[391] = {
+static const uint8_t unicode_prop_Diacritic_table[358] = {
     0xdd, 0x00, 0x80, 0xc6, 0x05, 0x03, 0x01, 0x81,
     0x41, 0xf6, 0x40, 0x9e, 0x07, 0x25, 0x90, 0x0b,
     0x80, 0x88, 0x81, 0x40, 0xfc, 0x84, 0x40, 0xd0,
     0x80, 0xb6, 0x90, 0x80, 0x9a, 0x00, 0x01, 0x00,
     0x40, 0x85, 0x3b, 0x81, 0x40, 0x85, 0x0b, 0x0a,
     0x82, 0xc2, 0x9a, 0xda, 0x8a, 0xb9, 0x8a, 0xa1,
-    0x81, 0xfd, 0x87, 0xa8, 0x89, 0x8f, 0x9b, 0xbc,
-    0x80, 0x8f, 0x02, 0x83, 0x9b, 0x80, 0xc9, 0x80,
-    0x8f, 0x80, 0xed, 0x80, 0x8f, 0x80, 0xed, 0x80,
-    0x8f, 0x80, 0xae, 0x82, 0xbb, 0x80, 0x8f, 0x06,
-    0x80, 0xf6, 0x80, 0xed, 0x80, 0x8f, 0x80, 0xed,
-    0x80, 0x8f, 0x80, 0xec, 0x81, 0x8f, 0x80, 0xfb,
-    0x80, 0xfb, 0x28, 0x80, 0xea, 0x80, 0x8c, 0x84,
-    0xca, 0x81, 0x9a, 0x00, 0x00, 0x03, 0x81, 0xc1,
-    0x10, 0x81, 0xbd, 0x80, 0xef, 0x00, 0x81, 0xa7,
-    0x0b, 0x84, 0x98, 0x30, 0x80, 0x89, 0x81, 0x42,
-    0xc0, 0x82, 0x43, 0xb3, 0x81, 0x40, 0xb2, 0x8a,
+    0x81, 0x40, 0xc8, 0x9b, 0xbc, 0x80, 0x8f, 0x02,
+    0x83, 0x9b, 0x80, 0xc9, 0x80, 0x8f, 0x80, 0xed,
+    0x80, 0x8f, 0x80, 0xed, 0x80, 0x8f, 0x80, 0xae,
+    0x82, 0xbb, 0x80, 0x8f, 0x06, 0x80, 0xf6, 0x80,
+    0xfe, 0x80, 0xed, 0x80, 0x8f, 0x80, 0xec, 0x81,
+    0x8f, 0x80, 0xfb, 0x80, 0xfb, 0x28, 0x80, 0xea,
+    0x80, 0x8c, 0x84, 0xca, 0x81, 0x9a, 0x00, 0x00,
+    0x03, 0x81, 0xc1, 0x10, 0x81, 0xbd, 0x80, 0xef,
+    0x00, 0x81, 0xa7, 0x0b, 0x84, 0x98, 0x30, 0x80,
+    0x89, 0x81, 0x42, 0xc0, 0x82, 0x44, 0x68, 0x8a,
     0x88, 0x80, 0x41, 0x5a, 0x82, 0x41, 0x38, 0x39,
-    0x80, 0xaf, 0x8e, 0x81, 0x8a, 0xe7, 0x80, 0x8e,
-    0x80, 0xa5, 0x88, 0xb5, 0x81, 0x40, 0x89, 0x81,
-    0xbf, 0x85, 0xd1, 0x98, 0x18, 0x28, 0x0a, 0xb1,
-    0xbe, 0xd8, 0x8b, 0xa4, 0x8a, 0x41, 0xbc, 0x00,
-    0x82, 0x8a, 0x82, 0x8c, 0x82, 0x8c, 0x82, 0x8c,
-    0x81, 0x4c, 0xef, 0x82, 0x41, 0x3c, 0x80, 0x41,
-    0xf9, 0x85, 0xe8, 0x83, 0xde, 0x80, 0x60, 0x75,
-    0x71, 0x80, 0x8b, 0x08, 0x80, 0x9b, 0x81, 0xd1,
-    0x81, 0x8d, 0xa1, 0xe5, 0x82, 0xec, 0x81, 0x40,
-    0xc9, 0x80, 0x9a, 0x91, 0xb8, 0x83, 0xa3, 0x80,
-    0xde, 0x80, 0x8b, 0x80, 0xa3, 0x80, 0x40, 0x94,
-    0x82, 0xc0, 0x83, 0xb2, 0x80, 0xe3, 0x84, 0x88,
-    0x82, 0xff, 0x81, 0x60, 0x4f, 0x2f, 0x80, 0x43,
-    0x00, 0x8f, 0x41, 0x0d, 0x00, 0x80, 0xae, 0x80,
-    0xac, 0x81, 0xc2, 0x80, 0x42, 0xfb, 0x80, 0x44,
-    0x9e, 0x28, 0xa9, 0x80, 0x88, 0x43, 0x29, 0x81,
-    0x42, 0x3a, 0x85, 0x42, 0x1d, 0x8a, 0xb0, 0x83,
-    0x40, 0xbf, 0x80, 0xa8, 0x80, 0xc7, 0x81, 0xf7,
-    0x81, 0xbd, 0x80, 0xcb, 0x80, 0x88, 0x82, 0xe7,
-    0x81, 0x40, 0xb1, 0x81, 0xd0, 0x80, 0x8f, 0x80,
-    0x97, 0x32, 0x84, 0x40, 0xcc, 0x02, 0x80, 0xfa,
-    0x81, 0x40, 0xfa, 0x81, 0xfd, 0x80, 0xf5, 0x81,
-    0xf2, 0x80, 0x41, 0x0c, 0x81, 0x41, 0x01, 0x0b,
-    0x80, 0x40, 0x9b, 0x80, 0xd2, 0x80, 0x91, 0x80,
-    0xd0, 0x80, 0x41, 0xa4, 0x80, 0x41, 0x01, 0x00,
-    0x81, 0xd0, 0x80, 0x60, 0x4d, 0x57, 0x84, 0xba,
-    0x86, 0x44, 0x57, 0x90, 0xcf, 0x81, 0x60, 0x3f,
-    0xfd, 0x18, 0x30, 0x81, 0x5f, 0x00, 0xad, 0x81,
-    0x96, 0x42, 0x1f, 0x12, 0x2f, 0x39, 0x86, 0x9d,
-    0x83, 0x4f, 0x81, 0x86, 0x41, 0x76, 0x80, 0xbc,
-    0x83, 0x45, 0xdf, 0x86, 0xec, 0x10, 0x82,
+    0x80, 0xaf, 0x8d, 0xf5, 0x80, 0x8e, 0x80, 0xa5,
+    0x88, 0xb5, 0x81, 0x40, 0x89, 0x81, 0xbf, 0x85,
+    0xd1, 0x98, 0x18, 0x28, 0x0a, 0xb1, 0xbe, 0xd8,
+    0x8b, 0xa4, 0x22, 0x82, 0x41, 0xbc, 0x00, 0x82,
+    0x8a, 0x82, 0x8c, 0x82, 0x8c, 0x82, 0x8c, 0x81,
+    0x4c, 0xef, 0x82, 0x41, 0x3c, 0x80, 0x41, 0xf9,
+    0x85, 0xe8, 0x83, 0xde, 0x80, 0x60, 0x75, 0x71,
+    0x80, 0x8b, 0x08, 0x80, 0x9b, 0x81, 0xd1, 0x81,
+    0x8d, 0xa1, 0xe5, 0x82, 0xec, 0x81, 0x40, 0xc9,
+    0x80, 0x9a, 0x91, 0xb8, 0x83, 0xa3, 0x80, 0xde,
+    0x80, 0x8b, 0x80, 0xa3, 0x80, 0x40, 0x94, 0x82,
+    0xc0, 0x83, 0xb2, 0x80, 0xe3, 0x84, 0x88, 0x82,
+    0xff, 0x81, 0x60, 0x4f, 0x2f, 0x80, 0x43, 0x00,
+    0x8f, 0x41, 0x0d, 0x00, 0x80, 0xae, 0x80, 0xac,
+    0x81, 0xc2, 0x80, 0x42, 0xfb, 0x80, 0x48, 0x03,
+    0x81, 0x42, 0x3a, 0x85, 0x42, 0x1d, 0x8a, 0x41,
+    0x67, 0x81, 0xf7, 0x81, 0xbd, 0x80, 0xcb, 0x80,
+    0x88, 0x82, 0xe7, 0x81, 0x40, 0xb1, 0x81, 0xd0,
+    0x80, 0x8f, 0x80, 0x97, 0x32, 0x84, 0x40, 0xcc,
+    0x02, 0x80, 0xfa, 0x81, 0x40, 0xfa, 0x81, 0xfd,
+    0x80, 0xf5, 0x81, 0xf2, 0x80, 0x41, 0x0c, 0x81,
+    0x41, 0x01, 0x0b, 0x80, 0x40, 0x9b, 0x80, 0xd2,
+    0x80, 0x91, 0x80, 0xd0, 0x80, 0x41, 0xa4, 0x80,
+    0x41, 0x01, 0x00, 0x81, 0xd0, 0x80, 0x60, 0x4d,
+    0x57, 0x84, 0xba, 0x86, 0x44, 0x57, 0x90, 0xcf,
+    0x81, 0x60, 0x61, 0x74, 0x12, 0x2f, 0x39, 0x86,
+    0x9d, 0x83, 0x4f, 0x81, 0x86, 0x41, 0xb4, 0x83,
+    0x45, 0xdf, 0x86, 0xec, 0x10, 0x82,
 };
 
-static const uint8_t unicode_prop_Extender_table[92] = {
+static const uint8_t unicode_prop_Extender_table[89] = {
     0x40, 0xb6, 0x80, 0x42, 0x17, 0x81, 0x43, 0x6d,
     0x80, 0x41, 0xb8, 0x80, 0x43, 0x59, 0x80, 0x42,
     0xef, 0x80, 0xfe, 0x80, 0x49, 0x42, 0x80, 0xb7,
@@ -3895,10 +3817,10 @@ static const uint8_t unicode_prop_Extender_table[92] = {
     0xdc, 0x82, 0x60, 0x6f, 0x15, 0x80, 0x45, 0xf5,
     0x80, 0x43, 0xc1, 0x80, 0x95, 0x80, 0x40, 0x88,
     0x80, 0xeb, 0x80, 0x94, 0x81, 0x60, 0x54, 0x7a,
-    0x80, 0x48, 0x0f, 0x81, 0x4b, 0xd9, 0x80, 0x42,
-    0x67, 0x82, 0x44, 0xce, 0x80, 0x60, 0x50, 0xa8,
-    0x81, 0x44, 0x9b, 0x08, 0x80, 0x60, 0x71, 0x57,
-    0x81, 0x48, 0x05, 0x82,
+    0x80, 0x53, 0xeb, 0x80, 0x42, 0x67, 0x82, 0x44,
+    0xce, 0x80, 0x60, 0x50, 0xa8, 0x81, 0x44, 0x9b,
+    0x08, 0x80, 0x60, 0x71, 0x57, 0x81, 0x48, 0x05,
+    0x82,
 };
 
 static const uint8_t unicode_prop_Hex_Digit_table[12] = {
@@ -3916,12 +3838,12 @@ static const uint8_t unicode_prop_IDS_Trinary_Operator_table[4] = {
 
 static const uint8_t unicode_prop_Ideographic_table[66] = {
     0x60, 0x30, 0x05, 0x81, 0x98, 0x88, 0x8d, 0x82,
-    0x43, 0xc4, 0x59, 0xbf, 0xbf, 0x60, 0x51, 0xff,
-    0x60, 0x58, 0xff, 0x41, 0x6d, 0x81, 0xe9, 0x60,
+    0x43, 0xc4, 0x59, 0xbf, 0xbf, 0x60, 0x51, 0xfc,
+    0x60, 0x59, 0x02, 0x41, 0x6d, 0x81, 0xe9, 0x60,
     0x75, 0x09, 0x80, 0x9a, 0x57, 0xf7, 0x87, 0x44,
     0xd5, 0xa9, 0x88, 0x60, 0x24, 0x66, 0x41, 0x8b,
-    0x60, 0x4d, 0x03, 0x60, 0xa6, 0xdf, 0x9f, 0x50,
-    0x38, 0x86, 0x40, 0xdd, 0x81, 0x56, 0x81, 0x8d,
+    0x60, 0x4d, 0x03, 0x60, 0xa6, 0xdd, 0xa1, 0x50,
+    0x34, 0x8a, 0x40, 0xdd, 0x81, 0x56, 0x81, 0x8d,
     0x5d, 0x30, 0x4c, 0x1e, 0x42, 0x1d, 0x45, 0xe1,
     0x53, 0x4a,
 };
@@ -3979,35 +3901,34 @@ static const uint8_t unicode_prop_Regional_Indicator_table[4] = {
     0x61, 0xf1, 0xe5, 0x99,
 };
 
-static const uint8_t unicode_prop_Sentence_Terminal_table[194] = {
+static const uint8_t unicode_prop_Sentence_Terminal_table[188] = {
     0xa0, 0x80, 0x8b, 0x80, 0x8f, 0x80, 0x45, 0x48,
-    0x80, 0x40, 0x92, 0x82, 0x40, 0xb3, 0x80, 0xaa,
+    0x80, 0x40, 0x93, 0x81, 0x40, 0xb3, 0x80, 0xaa,
     0x82, 0x40, 0xf5, 0x80, 0xbc, 0x00, 0x02, 0x81,
     0x41, 0x24, 0x81, 0x46, 0xe3, 0x81, 0x43, 0x15,
     0x03, 0x81, 0x43, 0x04, 0x80, 0x40, 0xc5, 0x81,
     0x40, 0xcb, 0x04, 0x80, 0x41, 0x39, 0x81, 0x41,
-    0x61, 0x83, 0x40, 0xad, 0x09, 0x81, 0x9c, 0x81,
-    0x40, 0xbb, 0x81, 0xc0, 0x81, 0x43, 0xbb, 0x81,
-    0x88, 0x82, 0x4d, 0xe3, 0x80, 0x8c, 0x80, 0x95,
-    0x81, 0x41, 0xac, 0x80, 0x60, 0x74, 0xfb, 0x80,
-    0x41, 0x0d, 0x81, 0x40, 0xe2, 0x02, 0x80, 0x41,
-    0x7d, 0x81, 0xd5, 0x81, 0xde, 0x80, 0x40, 0x97,
-    0x81, 0x40, 0x92, 0x82, 0x40, 0x8f, 0x81, 0x40,
-    0xf8, 0x80, 0x60, 0x52, 0x65, 0x02, 0x81, 0x40,
-    0xa8, 0x80, 0x8b, 0x80, 0x8f, 0x80, 0xc0, 0x80,
-    0x4a, 0xf3, 0x81, 0x44, 0xfc, 0x84, 0xab, 0x83,
-    0x40, 0xbc, 0x81, 0xf4, 0x83, 0xfe, 0x82, 0x40,
-    0x80, 0x0d, 0x80, 0x8f, 0x81, 0xd7, 0x08, 0x81,
-    0xeb, 0x80, 0x41, 0xa0, 0x81, 0x41, 0x74, 0x0c,
-    0x8e, 0xe8, 0x81, 0x40, 0xf8, 0x82, 0x42, 0x04,
-    0x00, 0x80, 0x40, 0xfa, 0x81, 0xd6, 0x81, 0x41,
-    0xa3, 0x81, 0x42, 0xb3, 0x81, 0x60, 0x4b, 0x74,
-    0x81, 0x40, 0x84, 0x80, 0xc0, 0x81, 0x8a, 0x80,
-    0x43, 0x52, 0x80, 0x60, 0x4e, 0x05, 0x80, 0x5d,
-    0xe7, 0x80,
+    0x61, 0x83, 0x40, 0xad, 0x09, 0x81, 0x40, 0xda,
+    0x81, 0xc0, 0x81, 0x43, 0xbb, 0x81, 0x88, 0x82,
+    0x4d, 0xe3, 0x80, 0x8c, 0x80, 0x41, 0xc4, 0x80,
+    0x60, 0x74, 0xfb, 0x80, 0x41, 0x0d, 0x81, 0x40,
+    0xe2, 0x02, 0x80, 0x41, 0x7d, 0x81, 0xd5, 0x81,
+    0xde, 0x80, 0x40, 0x97, 0x81, 0x40, 0x92, 0x82,
+    0x40, 0x8f, 0x81, 0x40, 0xf8, 0x80, 0x60, 0x52,
+    0x65, 0x02, 0x81, 0x40, 0xa8, 0x80, 0x8b, 0x80,
+    0x8f, 0x80, 0xc0, 0x80, 0x4a, 0xf3, 0x81, 0x44,
+    0xfc, 0x84, 0x40, 0xec, 0x81, 0xf4, 0x83, 0xfe,
+    0x82, 0x40, 0x80, 0x0d, 0x80, 0x8f, 0x81, 0xd7,
+    0x08, 0x81, 0xeb, 0x80, 0x41, 0xa0, 0x81, 0x41,
+    0x74, 0x0c, 0x8e, 0xe8, 0x81, 0x40, 0xf8, 0x82,
+    0x42, 0x04, 0x00, 0x80, 0x40, 0xfa, 0x81, 0xd6,
+    0x81, 0x41, 0xa3, 0x81, 0x42, 0xb3, 0x81, 0x60,
+    0x4b, 0x74, 0x81, 0x40, 0x84, 0x80, 0xc0, 0x81,
+    0x8a, 0x80, 0x43, 0x52, 0x80, 0x60, 0x4e, 0x05,
+    0x80, 0x5d, 0xe7, 0x80,
 };
 
-static const uint8_t unicode_prop_Soft_Dotted_table[74] = {
+static const uint8_t unicode_prop_Soft_Dotted_table[71] = {
     0xe8, 0x81, 0x40, 0xc3, 0x80, 0x41, 0x18, 0x80,
     0x9d, 0x80, 0xb3, 0x80, 0x93, 0x80, 0x41, 0x3f,
     0x80, 0xe1, 0x00, 0x80, 0x59, 0x08, 0x80, 0xb2,
@@ -4016,56 +3937,55 @@ static const uint8_t unicode_prop_Soft_Dotted_table[74] = {
     0x4b, 0x31, 0x80, 0x61, 0xa7, 0xa4, 0x81, 0xb1,
     0x81, 0xb1, 0x81, 0xb1, 0x81, 0xb1, 0x81, 0xb1,
     0x81, 0xb1, 0x81, 0xb1, 0x81, 0xb1, 0x81, 0xb1,
-    0x81, 0xb1, 0x81, 0xb1, 0x81, 0xb1, 0x81, 0x48,
-    0x85, 0x80,
+    0x81, 0xb1, 0x81, 0xb1, 0x81, 0xb1, 0x81,
 };
 
-static const uint8_t unicode_prop_Terminal_Punctuation_table[246] = {
+static const uint8_t unicode_prop_Terminal_Punctuation_table[241] = {
     0xa0, 0x80, 0x89, 0x00, 0x80, 0x8a, 0x0a, 0x80,
     0x43, 0x3d, 0x07, 0x80, 0x42, 0x00, 0x80, 0xb8,
-    0x80, 0xc7, 0x80, 0x8d, 0x00, 0x82, 0x40, 0xb3,
+    0x80, 0xc7, 0x80, 0x8d, 0x01, 0x81, 0x40, 0xb3,
     0x80, 0xaa, 0x8a, 0x00, 0x40, 0xea, 0x81, 0xb5,
     0x8e, 0x9e, 0x80, 0x41, 0x04, 0x81, 0x44, 0xf3,
     0x81, 0x40, 0xab, 0x03, 0x85, 0x41, 0x36, 0x81,
     0x43, 0x14, 0x87, 0x43, 0x04, 0x80, 0xfb, 0x82,
     0xc6, 0x81, 0x40, 0x9c, 0x12, 0x80, 0xa6, 0x19,
     0x81, 0x41, 0x39, 0x81, 0x41, 0x61, 0x83, 0x40,
-    0xad, 0x08, 0x82, 0x9c, 0x81, 0x40, 0xbb, 0x84,
-    0xbd, 0x81, 0x43, 0xbb, 0x81, 0x88, 0x82, 0x4d,
-    0xe3, 0x80, 0x8c, 0x03, 0x80, 0x89, 0x00, 0x0a,
-    0x81, 0x41, 0xab, 0x81, 0x60, 0x74, 0xfa, 0x81,
-    0x41, 0x0c, 0x82, 0x40, 0xe2, 0x84, 0x41, 0x7d,
-    0x81, 0xd5, 0x81, 0xde, 0x80, 0x40, 0x96, 0x82,
-    0x40, 0x92, 0x82, 0xfe, 0x80, 0x8f, 0x81, 0x40,
-    0xf8, 0x80, 0x60, 0x52, 0x63, 0x10, 0x83, 0x40,
-    0xa8, 0x80, 0x89, 0x00, 0x80, 0x8a, 0x0a, 0x80,
-    0xc0, 0x01, 0x80, 0x44, 0x39, 0x80, 0xaf, 0x80,
-    0x44, 0x85, 0x80, 0x40, 0xc6, 0x80, 0x41, 0x35,
-    0x81, 0x40, 0x97, 0x85, 0xc3, 0x85, 0xd8, 0x83,
-    0x43, 0xb7, 0x84, 0xab, 0x83, 0x40, 0xbc, 0x86,
-    0xef, 0x83, 0xfe, 0x82, 0x40, 0x80, 0x0d, 0x80,
-    0x8f, 0x81, 0xd7, 0x84, 0xeb, 0x80, 0x41, 0xa0,
-    0x82, 0x8b, 0x81, 0x41, 0x65, 0x1a, 0x8e, 0xe8,
-    0x81, 0x40, 0xf8, 0x82, 0x42, 0x04, 0x00, 0x80,
-    0x40, 0xfa, 0x81, 0xd6, 0x0b, 0x81, 0x41, 0x9d,
-    0x82, 0xac, 0x80, 0x42, 0x84, 0x81, 0x45, 0x76,
-    0x84, 0x60, 0x45, 0xf8, 0x81, 0x40, 0x84, 0x80,
-    0xc0, 0x82, 0x89, 0x80, 0x43, 0x51, 0x81, 0x60,
-    0x4e, 0x05, 0x80, 0x5d, 0xe6, 0x83,
+    0xad, 0x08, 0x82, 0x40, 0xda, 0x84, 0xbd, 0x81,
+    0x43, 0xbb, 0x81, 0x88, 0x82, 0x4d, 0xe3, 0x80,
+    0x8c, 0x03, 0x80, 0x89, 0x00, 0x81, 0x41, 0xb0,
+    0x81, 0x60, 0x74, 0xfa, 0x81, 0x41, 0x0c, 0x82,
+    0x40, 0xe2, 0x84, 0x41, 0x7d, 0x81, 0xd5, 0x81,
+    0xde, 0x80, 0x40, 0x96, 0x82, 0x40, 0x92, 0x82,
+    0xfe, 0x80, 0x8f, 0x81, 0x40, 0xf8, 0x80, 0x60,
+    0x52, 0x63, 0x10, 0x83, 0x40, 0xa8, 0x80, 0x89,
+    0x00, 0x80, 0x8a, 0x0a, 0x80, 0xc0, 0x01, 0x80,
+    0x44, 0x39, 0x80, 0xaf, 0x80, 0x44, 0x85, 0x80,
+    0x40, 0xc6, 0x80, 0x41, 0x35, 0x81, 0x40, 0x97,
+    0x85, 0xc3, 0x85, 0xd8, 0x83, 0x43, 0xb7, 0x84,
+    0x40, 0xec, 0x86, 0xef, 0x83, 0xfe, 0x82, 0x40,
+    0x80, 0x0d, 0x80, 0x8f, 0x81, 0xd7, 0x84, 0xeb,
+    0x80, 0x41, 0xa0, 0x82, 0x8b, 0x81, 0x41, 0x65,
+    0x1a, 0x8e, 0xe8, 0x81, 0x40, 0xf8, 0x82, 0x42,
+    0x04, 0x00, 0x80, 0x40, 0xfa, 0x81, 0xd6, 0x0b,
+    0x81, 0x41, 0x9d, 0x82, 0xac, 0x80, 0x42, 0x84,
+    0x81, 0x45, 0x76, 0x84, 0x60, 0x45, 0xf8, 0x81,
+    0x40, 0x84, 0x80, 0xc0, 0x82, 0x89, 0x80, 0x43,
+    0x51, 0x81, 0x60, 0x4e, 0x05, 0x80, 0x5d, 0xe6,
+    0x83,
 };
 
 static const uint8_t unicode_prop_Unified_Ideograph_table[42] = {
     0x60, 0x33, 0xff, 0x59, 0xbf, 0xbf, 0x60, 0x51,
-    0xff, 0x60, 0x5a, 0x0d, 0x08, 0x00, 0x81, 0x89,
+    0xfc, 0x60, 0x5a, 0x10, 0x08, 0x00, 0x81, 0x89,
     0x00, 0x00, 0x09, 0x82, 0x61, 0x05, 0xd5, 0x60,
-    0xa6, 0xdf, 0x9f, 0x50, 0x38, 0x86, 0x40, 0xdd,
+    0xa6, 0xdd, 0xa1, 0x50, 0x34, 0x8a, 0x40, 0xdd,
     0x81, 0x56, 0x81, 0x8d, 0x5d, 0x30, 0x54, 0x1e,
     0x53, 0x4a,
 };
 
-static const uint8_t unicode_prop_Variation_Selector_table[13] = {
-    0x58, 0x0a, 0x10, 0x80, 0x60, 0xe5, 0xef, 0x8f,
-    0x6d, 0x02, 0xef, 0x40, 0xef,
+static const uint8_t unicode_prop_Variation_Selector_table[12] = {
+    0x58, 0x0a, 0x82, 0x60, 0xe5, 0xf1, 0x8f, 0x6d,
+    0x02, 0xef, 0x40, 0xef,
 };
 
 static const uint8_t unicode_prop_White_Space_table[22] = {
@@ -4074,7 +3994,7 @@ static const uint8_t unicode_prop_White_Space_table[22] = {
     0x80, 0xae, 0x80, 0x4f, 0x9f, 0x80,
 };
 
-static const uint8_t unicode_prop_Bidi_Mirrored_table[173] = {
+static const uint8_t unicode_prop_Bidi_Mirrored_table[171] = {
     0xa7, 0x81, 0x91, 0x00, 0x80, 0x9b, 0x00, 0x80,
     0x9c, 0x00, 0x80, 0xac, 0x80, 0x8e, 0x80, 0x4e,
     0x7d, 0x83, 0x47, 0x5c, 0x81, 0x49, 0x9b, 0x81,
@@ -4092,14 +4012,14 @@ static const uint8_t unicode_prop_Bidi_Mirrored_table[173] = {
     0x09, 0x0b, 0xaa, 0x0f, 0x80, 0xa7, 0x20, 0x00,
     0x14, 0x22, 0x18, 0x14, 0x00, 0x40, 0xff, 0x80,
     0x42, 0x02, 0x1a, 0x08, 0x81, 0x8d, 0x09, 0x89,
-    0xaa, 0x87, 0x41, 0xaa, 0x89, 0x0f, 0x60, 0xce,
-    0x3c, 0x2c, 0x81, 0x40, 0xa1, 0x81, 0x91, 0x00,
-    0x80, 0x9b, 0x00, 0x80, 0x9c, 0x00, 0x00, 0x08,
-    0x81, 0x60, 0xd7, 0x76, 0x80, 0xb8, 0x80, 0xb8,
-    0x80, 0xb8, 0x80, 0xb8, 0x80,
+    0x41, 0xdd, 0x89, 0x0f, 0x60, 0xce, 0x3c, 0x2c,
+    0x81, 0x40, 0xa1, 0x81, 0x91, 0x00, 0x80, 0x9b,
+    0x00, 0x80, 0x9c, 0x00, 0x00, 0x08, 0x81, 0x60,
+    0xd7, 0x76, 0x80, 0xb8, 0x80, 0xb8, 0x80, 0xb8,
+    0x80, 0xb8, 0x80,
 };
 
-static const uint8_t unicode_prop_Emoji_table[239] = {
+static const uint8_t unicode_prop_Emoji_table[238] = {
     0xa2, 0x05, 0x04, 0x89, 0xee, 0x03, 0x80, 0x5f,
     0x8c, 0x80, 0x8b, 0x80, 0x40, 0xd7, 0x80, 0x95,
     0x80, 0xd9, 0x85, 0x8e, 0x81, 0x41, 0x6e, 0x81,
@@ -4125,11 +4045,11 @@ static const uint8_t unicode_prop_Emoji_table[239] = {
     0xbe, 0x8a, 0x28, 0x97, 0x31, 0x0f, 0x8b, 0x01,
     0x19, 0x03, 0x81, 0x8c, 0x09, 0x07, 0x81, 0x88,
     0x04, 0x82, 0x8b, 0x17, 0x11, 0x00, 0x03, 0x05,
-    0x02, 0x05, 0xd5, 0xaf, 0xc5, 0x27, 0x0a, 0x84,
-    0x88, 0x10, 0x01, 0x10, 0x81, 0x89, 0x40, 0xe2,
-    0x8b, 0x18, 0x41, 0x1a, 0xae, 0x80, 0x89, 0x80,
-    0x40, 0xb8, 0xef, 0x22, 0x22, 0x86, 0x88, 0x9c,
-    0x82, 0x8a, 0x25, 0x89, 0x89, 0x2f, 0x3e,
+    0x02, 0x05, 0xd5, 0xaf, 0xc5, 0x27, 0x0a, 0x3d,
+    0x10, 0x01, 0x10, 0x81, 0x89, 0x40, 0xe2, 0x8b,
+    0x41, 0x1f, 0xae, 0x80, 0x89, 0x80, 0xb1, 0x80,
+    0xd1, 0x80, 0xb2, 0xef, 0x22, 0x14, 0x86, 0x88,
+    0x98, 0x36, 0x88, 0x82, 0x8c, 0x86,
 };
 
 static const uint8_t unicode_prop_Emoji_Component_table[28] = {
@@ -4143,7 +4063,7 @@ static const uint8_t unicode_prop_Emoji_Modifier_table[4] = {
     0x61, 0xf3, 0xfa, 0x84,
 };
 
-static const uint8_t unicode_prop_Emoji_Modifier_Base_table[71] = {
+static const uint8_t unicode_prop_Emoji_Modifier_Base_table[66] = {
     0x60, 0x26, 0x1c, 0x80, 0x40, 0xda, 0x80, 0x8f,
     0x83, 0x61, 0xcc, 0x76, 0x80, 0xbb, 0x11, 0x01,
     0x82, 0xf4, 0x09, 0x8a, 0x94, 0x92, 0x10, 0x1a,
@@ -4152,10 +4072,10 @@ static const uint8_t unicode_prop_Emoji_Modifier_Base_table[71] = {
     0xd2, 0x80, 0x8f, 0x82, 0x88, 0x80, 0x8a, 0x80,
     0x42, 0x3e, 0x01, 0x07, 0x3d, 0x80, 0x88, 0x89,
     0x0a, 0xb7, 0x80, 0xbc, 0x08, 0x08, 0x80, 0x90,
-    0x10, 0x8c, 0x40, 0xe4, 0x82, 0xa9, 0x86,
+    0x10, 0x8c,
 };
 
-static const uint8_t unicode_prop_Emoji_Presentation_table[145] = {
+static const uint8_t unicode_prop_Emoji_Presentation_table[144] = {
     0x60, 0x23, 0x19, 0x81, 0x40, 0xcc, 0x1a, 0x01,
     0x80, 0x42, 0x08, 0x81, 0x94, 0x81, 0xb1, 0x8b,
     0xaa, 0x80, 0x92, 0x80, 0x8c, 0x07, 0x81, 0x90,
@@ -4170,11 +4090,10 @@ static const uint8_t unicode_prop_Emoji_Presentation_table[145] = {
     0x1c, 0x8b, 0x90, 0x10, 0x82, 0xc6, 0x00, 0x80,
     0x40, 0xba, 0x81, 0xbe, 0x8c, 0x18, 0x97, 0x91,
     0x80, 0x99, 0x81, 0x8c, 0x80, 0xd5, 0xd4, 0xaf,
-    0xc5, 0x28, 0x12, 0x0a, 0x22, 0x8a, 0x0e, 0x88,
-    0x40, 0xe2, 0x8b, 0x18, 0x41, 0x1a, 0xae, 0x80,
-    0x89, 0x80, 0x40, 0xb8, 0xef, 0x22, 0x22, 0x86,
-    0x88, 0x9c, 0x82, 0x8a, 0x25, 0x89, 0x89, 0x2f,
-    0x3e,
+    0xc5, 0x28, 0x12, 0x0a, 0x92, 0x0e, 0x88, 0x40,
+    0xe2, 0x8b, 0x41, 0x1f, 0xae, 0x80, 0x89, 0x80,
+    0xb1, 0x80, 0xd1, 0x80, 0xb2, 0xef, 0x22, 0x14,
+    0x86, 0x88, 0x98, 0x36, 0x88, 0x82, 0x8c, 0x86,
 };
 
 static const uint8_t unicode_prop_Extended_Pictographic_table[156] = {
@@ -4203,7 +4122,7 @@ static const uint8_t unicode_prop_Extended_Pictographic_table[156] = {
 static const uint8_t unicode_prop_Default_Ignorable_Code_Point_table[51] = {
     0x40, 0xac, 0x80, 0x42, 0xa0, 0x80, 0x42, 0xcb,
     0x80, 0x4b, 0x41, 0x81, 0x46, 0x52, 0x81, 0xd4,
-    0x84, 0x47, 0xfa, 0x84, 0x99, 0x84, 0xb0, 0x8f,
+    0x83, 0x47, 0xfb, 0x84, 0x99, 0x84, 0xb0, 0x8f,
     0x50, 0xf3, 0x80, 0x60, 0xcc, 0x9a, 0x8f, 0x40,
     0xee, 0x80, 0x40, 0x9f, 0x80, 0xce, 0x88, 0x60,
     0xbc, 0xa6, 0x83, 0x54, 0xce, 0x87, 0x6c, 0x2e,
diff --git a/quickjs-atom.h b/quickjs-atom.h
index 4c22794..1a899a4 100644
--- a/quickjs-atom.h
+++ b/quickjs-atom.h
@@ -55,6 +55,8 @@ DEF(finally, "finally")
 DEF(function, "function")
 DEF(debugger, "debugger")
 DEF(with, "with")
+DEF(__file__, "__FILE__")
+DEF(__dir__, "__DIR__")
 /* FutureReservedWord */
 DEF(class, "class")
 DEF(const, "const")
@@ -79,6 +81,7 @@ DEF(await, "await")
 DEF(empty_string, "")
 /* identifiers */
 DEF(length, "length")
+DEF(tag, "tag")
 DEF(fileName, "fileName")
 DEF(lineNumber, "lineNumber")
 DEF(message, "message")
@@ -224,6 +227,9 @@ DEF(BigDecimal, "BigDecimal")
 DEF(OperatorSet, "OperatorSet")
 DEF(Operators, "Operators")
 #endif
+#ifdef CONFIG_JSX
+DEF(JSX, "JSX")
+#endif
 DEF(Map, "Map")
 DEF(Set, "Set") /* Map + 1 */
 DEF(WeakMap, "WeakMap") /* Map + 2 */
@@ -270,4 +276,7 @@ DEF(Symbol_asyncIterator, "Symbol.asyncIterator")
 DEF(Symbol_operatorSet, "Symbol.operatorSet")
 #endif
     
+DEF(Symbol_tag, "Symbol.tag")
+
+    
 #endif /* DEF */
diff --git a/quickjs-libc.c b/quickjs-libc.c
index e180dd0..1ca63cd 100644
--- a/quickjs-libc.c
+++ b/quickjs-libc.c
@@ -28,20 +28,30 @@
 #include <inttypes.h>
 #include <string.h>
 #include <assert.h>
-#include <unistd.h>
 #include <errno.h>
 #include <fcntl.h>
-#include <sys/time.h>
 #include <time.h>
 #include <signal.h>
 #include <limits.h>
 #include <sys/stat.h>
-#include <dirent.h>
 #if defined(_WIN32)
-#include <windows.h>
-#include <conio.h>
-#include <utime.h>
+  #include <windows.h>
+  #include <conio.h>
+  #include <io.h>
+  #include <fcntl.h>
+  #include <sys/types.h>
+  #include <sys/stat.h>
+  #include <sys/utime.h>
+  #include "win/dirent.h"
+  #ifndef PATH_MAX
+    #define PATH_MAX MAX_PATH
+  #endif
+  #define popen _popen
+  #define pclose _pclose
 #else
+  #include <dirent.h>
+  #include <unistd.h>
+  #include <sys/time.h>
 #include <dlfcn.h>
 #include <termios.h>
 #include <sys/ioctl.h>
@@ -458,7 +468,7 @@ static JSModuleDef *js_module_loader_so(JSContext *ctx,
                                         const char *module_name)
 {
     JS_ThrowReferenceError(ctx, "shared library modules are not supported yet");
-    return NULL;
+              return NULL;
 }
 #else
 static JSModuleDef *js_module_loader_so(JSContext *ctx,
@@ -2552,6 +2562,16 @@ static JSValue js_os_stat(JSContext *ctx, JSValueConst this_val,
         JS_DefinePropertyValueStr(ctx, obj, "ctime",
                                   JS_NewInt64(ctx, timespec_to_ms(&st.st_ctimespec)),
                                   JS_PROP_C_W_E);
+#elif defined(ANDROID)
+        JS_DefinePropertyValueStr(ctx, obj, "atime",
+          JS_NewInt64(ctx, timespec_to_ms(&st.st_atime)),
+          JS_PROP_C_W_E);
+        JS_DefinePropertyValueStr(ctx, obj, "mtime",
+          JS_NewInt64(ctx, timespec_to_ms(&st.st_mtime)),
+          JS_PROP_C_W_E);
+        JS_DefinePropertyValueStr(ctx, obj, "ctime",
+          JS_NewInt64(ctx, timespec_to_ms(&st.st_ctime)),
+          JS_PROP_C_W_E);
 #else
         JS_DefinePropertyValueStr(ctx, obj, "atime",
                                   JS_NewInt64(ctx, timespec_to_ms(&st.st_atim)),
@@ -3092,6 +3112,22 @@ static JSValue js_os_kill(JSContext *ctx, JSValueConst this_val,
     return JS_NewInt32(ctx, ret);
 }
 
+/* sleep(delay_ms) */
+/*static JSValue js_os_sleep(JSContext *ctx, JSValueConst this_val,
+                          int argc, JSValueConst *argv)
+{
+    int64_t delay;
+    struct timespec ts;
+    int ret;
+    
+    if (JS_ToInt64(ctx, &delay, argv[0]))
+        return JS_EXCEPTION;
+    ts.tv_sec = delay / 1000;
+    ts.tv_nsec = (delay % 1000) * 1000000;
+    ret = js_get_errno(nanosleep(&ts, NULL));
+    return JS_NewInt32(ctx, ret);
+}*/
+
 /* dup(fd) */
 static JSValue js_os_dup(JSContext *ctx, JSValueConst this_val,
                          int argc, JSValueConst *argv)
diff --git a/quickjs-opcode.h b/quickjs-opcode.h
index c731a14..a0919b6 100644
--- a/quickjs-opcode.h
+++ b/quickjs-opcode.h
@@ -260,6 +260,9 @@ DEF(is_undefined_or_null, 1, 1, 1, none)
 DEF(      mul_pow10, 1, 2, 1, none)
 DEF(       math_mod, 1, 2, 1, none)
 #endif
+#ifdef CONFIG_DEBUGGER
+DEF(line_num, 5, 0, 0, u32) /* emitted in phase 1 and kept if running under debugger */
+#endif
 /* must be the last non short and non temporary opcode */
 DEF(            nop, 1, 0, 0, none) 
 
@@ -283,7 +286,9 @@ def(scope_put_private_field, 7, 1, 1, atom_u16) /* obj value ->, emitted in phas
 
 def( set_class_name, 5, 1, 1, u32) /* emitted in phase 1, removed in phase 2 */
     
+#ifndef CONFIG_DEBUGGER
 def(       line_num, 5, 0, 0, u32) /* emitted in phase 1, removed in phase 3 */
+#endif
 
 #if SHORT_OPCODES
 DEF(    push_minus1, 1, 0, 1, none_int)
diff --git a/quickjs-version.h b/quickjs-version.h
new file mode 100644
index 0000000..77be639
--- /dev/null
+++ b/quickjs-version.h
@@ -0,0 +1 @@
+#define QUICKJS_VERSION "2021-03-27"
\ No newline at end of file
diff --git a/quickjs.c b/quickjs.c
index 7916013..eb6642b 100644
--- a/quickjs.c
+++ b/quickjs.c
@@ -1,8 +1,8 @@
 /*
  * QuickJS Javascript Engine
- * 
- * Copyright (c) 2017-2021 Fabrice Bellard
- * Copyright (c) 2017-2021 Charlie Gordon
+ *
+ * Copyright (c) 2017-2020 Fabrice Bellard
+ * Copyright (c) 2017-2020 Charlie Gordon
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -28,16 +28,18 @@
 #include <inttypes.h>
 #include <string.h>
 #include <assert.h>
-#include <sys/time.h>
 #include <time.h>
 #include <fenv.h>
 #include <math.h>
 #if defined(__APPLE__)
 #include <malloc/malloc.h>
+#include <sys/time.h>
 #elif defined(__linux__)
 #include <malloc.h>
+#include <sys/time.h>
 #elif defined(__FreeBSD__)
 #include <malloc_np.h>
+#include <sys/time.h>
 #endif
 
 #include "cutils.h"
@@ -50,7 +52,7 @@
 
 #define OPTIMIZE         1
 #define SHORT_OPCODES    1
-#if defined(EMSCRIPTEN)
+#if defined(EMSCRIPTEN) || defined(_MSC_VER)
 #define DIRECT_DISPATCH  0
 #else
 #define DIRECT_DISPATCH  1
@@ -69,11 +71,11 @@
 
 /* define to include Atomics.* operations which depend on the OS
    threads */
-#if !defined(EMSCRIPTEN)
+#if !defined(EMSCRIPTEN) && !defined(_MSC_VER)
 #define CONFIG_ATOMICS
 #endif
 
-#if !defined(EMSCRIPTEN)
+#if !defined(EMSCRIPTEN) && !defined(_MSC_VER)
 /* enable stack limitation */
 #define CONFIG_STACK_CHECK
 #endif
@@ -196,7 +198,7 @@ typedef enum JSErrorEnum {
     JS_URI_ERROR,
     JS_INTERNAL_ERROR,
     JS_AGGREGATE_ERROR,
-    
+
     JS_NATIVE_ERROR_COUNT, /* number of different NativeError objects */
 } JSErrorEnum;
 
@@ -259,7 +261,7 @@ struct JSRuntime {
        by the garbage collector) */
     struct list_head gc_obj_list;
     /* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */
-    struct list_head gc_zero_ref_count_list; 
+    struct list_head gc_zero_ref_count_list;
     struct list_head tmp_obj_list; /* used during GC */
     JSGCPhaseEnum gc_phase : 8;
     size_t malloc_gc_threshold;
@@ -270,7 +272,7 @@ struct JSRuntime {
     uintptr_t stack_size; /* in bytes, 0 if no limit */
     uintptr_t stack_top;
     uintptr_t stack_limit; /* lower stack limit */
-    
+
     JSValue current_exception;
     /* true if inside an out of memory error, to avoid recursing */
     BOOL in_out_of_memory : 8;
@@ -282,7 +284,7 @@ struct JSRuntime {
 
     JSHostPromiseRejectionTracker *host_promise_rejection_tracker;
     void *host_promise_rejection_tracker_opaque;
-    
+
     struct list_head job_list; /* list of JSJobEntry.link */
 
     JSModuleNormalizeFunc *module_normalize_func;
@@ -292,7 +294,7 @@ struct JSRuntime {
     BOOL can_block : 8; /* TRUE if Atomics.wait can block */
     /* used to allocate, free and clone SharedArrayBuffers */
     JSSharedArrayBufferFunctions sab_funcs;
-    
+
     /* Shape hash table */
     int shape_hash_bits;
     int shape_hash_size;
@@ -333,8 +335,12 @@ typedef struct JSStackFrame {
     int arg_count;
     int js_mode; /* 0 or JS_MODE_MATH for C functions */
     /* only used in generators. Current stack pointer value. NULL if
-       the function is running. */ 
+       the function is running. */
     JSValue *cur_sp;
+#ifdef CONFIG_DEBUGGER
+    JSValue* pthis;   /* reference to this value, needed by debugger to report 'this' */
+#endif // CONFIG_DEBUGGER
+
 } JSStackFrame;
 
 typedef enum {
@@ -367,9 +373,9 @@ typedef struct JSVarRef {
 
             /* 0 : the JSVarRef is on the stack. header.link is an element
                of JSStackFrame.var_ref_list.
-               1 : the JSVarRef is detached. header.link has the normal meanning 
+               1 : the JSVarRef is detached. header.link has the normal meanning
             */
-            uint8_t is_detached : 1; 
+            uint8_t is_detached : 1;
             uint8_t is_arg : 1;
             uint16_t var_idx; /* index of the corresponding function variable on
                                  the stack */
@@ -455,7 +461,12 @@ struct JSContext {
     /* if NULL, eval is not supported */
     JSValue (*eval_internal)(JSContext *ctx, JSValueConst this_obj,
                              const char *input, size_t input_len,
-                             const char *filename, int flags, int scope_idx);
+                             const char *filename, int flags, int scope_idx, int line_no);
+#ifdef CONFIG_DEBUGGER
+    JSDebuggerCheckLineNoF* debugger_check_line_no;
+    BOOL                    debugger_enabled;
+#endif
+
     void *user_opaque;
 };
 
@@ -801,7 +812,7 @@ struct JSModuleDef {
     BOOL eval_mark : 8; /* temporary use during js_evaluate_module() */
     /* true if evaluation yielded an exception. It is saved in
        eval_exception */
-    BOOL eval_has_exception : 8; 
+    BOOL eval_has_exception : 8;
     JSValue eval_exception;
     JSValue meta_obj; /* for import.meta */
 };
@@ -863,13 +874,52 @@ struct JSShape {
     JSShapeProperty prop[0]; /* prop_size elements */
 };
 
+#ifdef CONFIG_STORAGE
+  
+struct JSStorage;
+struct JSPersitentBlock {
+  struct JSStorage* storage;
+  uint32_t oid; /* dybase object id */
+  JS_PERSISTENT_STATUS status;
+};
+
+int js_load_persistent_object(JSContext *ctx, JSValueConst obj);
+int js_free_persistent_object(JSRuntime *rt, JSValueConst obj);
+
+#define MARK_MODIFIED_OBJ(p) \
+  if (p->persistent) \
+    p->persistent->status = JS_PERSISTENT_MODIFIED;
+
+#define MARK_MODIFIED_VALUE(obj) \
+  if (JS_VALUE_GET_TAG(obj) == JS_TAG_OBJECT) { \
+    JSObject *p = JS_VALUE_GET_OBJ(obj); \
+    MARK_MODIFIED_OBJ(p); \
+  }
+
+#define PRELOAD_PERSISTENT_OBJ(p) \
+    if (p->persistent && (p->persistent->status == JS_PERSISTENT_DORMANT)) \
+      js_load_persistent_object(ctx, JS_MKPTR(JS_TAG_OBJECT, p));
+
+#define PRELOAD_PERSISTENT_VALUE(obj) \
+  if (JS_VALUE_GET_TAG(obj) == JS_TAG_OBJECT) { \
+    JSObject *p = JS_VALUE_GET_OBJ(obj); \
+    PRELOAD_PERSISTENT_OBJ(p); \
+  }
+
+#else 
+#define MARK_MODIFIED_OBJ(p);
+#define MARK_MODIFIED_VALUE(obj);
+#define PRELOAD_PERSISTENT_OBJ(p);
+#define PRELOAD_PERSISTENT_VALUE(p);
+#endif // CONFIG_STORAGE
+
 struct JSObject {
     union {
         JSGCObjectHeader header;
         struct {
             int __gc_ref_count; /* corresponds to header.ref_count */
             uint8_t __gc_mark; /* corresponds to header.mark/gc_obj_type */
-            
+
             uint8_t extensible : 1;
             uint8_t free_mark : 1; /* only used when freeing objects with cycles */
             uint8_t is_exotic : 1; /* TRUE if object has exotic property handlers */
@@ -929,7 +979,7 @@ struct JSObject {
                 struct JSTypedArray *typed_array; /* JS_CLASS_UINT8C_ARRAY..JS_CLASS_FLOAT64_ARRAY */
             } u1;
             union {
-                JSValue *values;        /* JS_CLASS_ARRAY, JS_CLASS_ARGUMENTS */ 
+                JSValue *values;        /* JS_CLASS_ARRAY, JS_CLASS_ARGUMENTS */
                 void *ptr;              /* JS_CLASS_UINT8C_ARRAY..JS_CLASS_FLOAT64_ARRAY */
                 int8_t *int8_ptr;       /* JS_CLASS_INT8_ARRAY */
                 uint8_t *uint8_ptr;     /* JS_CLASS_UINT8_ARRAY, JS_CLASS_UINT8C_ARRAY */
@@ -948,6 +998,10 @@ struct JSObject {
         JSValue object_data;    /* for JS_SetObjectData(): 8/16/16 bytes */
     } u;
     /* byte sizes: 40/48/72 */
+#ifdef CONFIG_STORAGE
+    struct JSPersitentBlock* persistent; /* persistence data, used only for JS_CLASS_OBJECT  */
+#endif 
+
 };
 enum {
     __JS_ATOM_NULL = JS_ATOM_NULL,
@@ -1021,7 +1075,7 @@ static __exception int JS_ToArrayLengthFree(JSContext *ctx, uint32_t *plen,
                                             JSValue val, BOOL is_array_ctor);
 static JSValue JS_EvalObject(JSContext *ctx, JSValueConst this_obj,
                              JSValueConst val, int flags, int scope_idx);
-JSValue __attribute__((format(printf, 2, 3))) JS_ThrowInternalError(JSContext *ctx, const char *fmt, ...);
+JSValue  __js_printf_like(2, 3) JS_ThrowInternalError(JSContext *ctx, const char *fmt, ...);
 static __maybe_unused void JS_DumpAtoms(JSRuntime *rt);
 static __maybe_unused void JS_DumpString(JSRuntime *rt,
                                                   const JSString *p);
@@ -1187,7 +1241,7 @@ static void js_async_function_resolve_mark(JSRuntime *rt, JSValueConst val,
                                            JS_MarkFunc *mark_func);
 static JSValue JS_EvalInternal(JSContext *ctx, JSValueConst this_obj,
                                const char *input, size_t input_len,
-                               const char *filename, int flags, int scope_idx);
+                               const char *filename, int flags, int scope_idx, int line_no);
 static void js_free_module_def(JSContext *ctx, JSModuleDef *m);
 static void js_mark_module_def(JSRuntime *rt, JSModuleDef *m,
                                JS_MarkFunc *mark_func);
@@ -1248,7 +1302,7 @@ static JSValue js_instantiate_prototype(JSContext *ctx, JSObject *p, JSAtom atom
 static JSValue js_module_ns_autoinit(JSContext *ctx, JSObject *p, JSAtom atom,
                                  void *opaque);
 static JSValue JS_InstantiateFunctionListItem2(JSContext *ctx, JSObject *p,
-                                               JSAtom atom, void *opaque);
+                                          JSAtom atom, void *opaque);
 void JS_SetUncatchableError(JSContext *ctx, JSValueConst val, BOOL flag);
 
 static const JSClassExoticMethods js_arguments_exotic_methods;
@@ -1628,7 +1682,7 @@ JSRuntime *JS_NewRuntime2(const JSMallocFunctions *mf, void *opaque)
     init_list_head(&rt->gc_obj_list);
     init_list_head(&rt->gc_zero_ref_count_list);
     rt->gc_phase = JS_GC_PHASE_NONE;
-    
+
 #ifdef DUMP_LEAKS
     init_list_head(&rt->string_list);
 #endif
@@ -2205,6 +2259,13 @@ JSValue JS_GetClassProto(JSContext *ctx, JSClassID class_id)
     return JS_DupValue(ctx, ctx->class_proto[class_id]);
 }
 
+JSValue JS_GetClassName(JSContext *ctx, JSClassID class_id)
+{
+  JSRuntime *rt = ctx->rt;
+  assert(class_id < rt->class_count);
+  return JS_AtomToString(ctx,rt->class_array[class_id].class_name);
+}
+
 typedef enum JSFreeModuleEnum {
     JS_FREE_MODULE_ALL,
     JS_FREE_MODULE_NOT_RESOLVED,
@@ -2278,7 +2339,7 @@ void JS_FreeContext(JSContext *ctx)
     if (--ctx->header.ref_count > 0)
         return;
     assert(ctx->header.ref_count == 0);
-    
+
 #ifdef DUMP_ATOMS
     JS_DumpAtoms(ctx->rt);
 #endif
@@ -2496,25 +2557,25 @@ static __maybe_unused void JS_DumpString(JSRuntime *rt,
     }
     printf("%d", p->header.ref_count);
     sep = (p->header.ref_count == 1) ? '\"' : '\'';
-    putchar(sep);
+    printf("%c",sep);
     for(i = 0; i < p->len; i++) {
         if (p->is_wide_char)
             c = p->u.str16[i];
         else
             c = p->u.str8[i];
         if (c == sep || c == '\\') {
-            putchar('\\');
-            putchar(c);
+          printf("%c", '\\');
+          printf("%c",c);
         } else if (c >= ' ' && c <= 126) {
-            putchar(c);
+          printf("%c", c);
         } else if (c == '\n') {
-            putchar('\\');
-            putchar('n');
+          printf("%c", '\\');
+          printf("%c", 'n');
         } else {
             printf("\\u%04x", c);
         }
     }
-    putchar(sep);
+    printf("%c", sep);
 }
 
 static __maybe_unused void JS_DumpAtoms(JSRuntime *rt)
@@ -2611,7 +2672,7 @@ static int JS_InitAtoms(JSRuntime *rt)
     return 0;
 }
 
-static JSAtom JS_DupAtomRT(JSRuntime *rt, JSAtom v)
+JSAtom JS_DupAtomRT(JSRuntime *rt, JSAtom v)
 {
     JSAtomStruct *p;
 
@@ -2635,7 +2696,7 @@ JSAtom JS_DupAtom(JSContext *ctx, JSAtom v)
     return v;
 }
 
-static JSAtomKindEnum JS_AtomGetKind(JSContext *ctx, JSAtom v)
+JSAtomKindEnum JS_AtomGetKind(JSContext *ctx, JSAtom v)
 {
     JSRuntime *rt;
     JSAtomStruct *p;
@@ -2855,6 +2916,18 @@ static JSAtom __JS_NewAtomInit(JSRuntime *rt, const char *str, int len,
     return __JS_NewAtom(rt, p, atom_type);
 }
 
+JSAtom JS_NewAtomLenRT(JSRuntime *rt, const char *str, int len)
+{
+    return __JS_NewAtomInit(rt, str, len, JS_ATOM_TYPE_STRING);
+}
+
+JSAtom JS_NewAtomSymbolLenRT(JSRuntime *rt, const char *str, int len)
+{
+  return __JS_NewAtomInit(rt, str, len, JS_ATOM_TYPE_SYMBOL);
+}
+
+
+
 static JSAtom __JS_FindAtom(JSRuntime *rt, const char *str, size_t len,
                             int atom_type)
 {
@@ -3029,8 +3102,8 @@ static JSValue JS_NewSymbolFromAtom(JSContext *ctx, JSAtom descr,
 #define ATOM_GET_STR_BUF_SIZE 64
 
 /* Should only be used for debug. */
-static const char *JS_AtomGetStrRT(JSRuntime *rt, char *buf, int buf_size,
-                                   JSAtom atom)
+const char *JS_AtomGetStrRT(JSRuntime *rt, char *buf, int buf_size,
+                            JSAtom atom)
 {
     if (__JS_AtomIsTaggedInt(atom)) {
         snprintf(buf, buf_size, "%u", __JS_AtomToUInt32(atom));
@@ -3078,7 +3151,7 @@ static const char *JS_AtomGetStrRT(JSRuntime *rt, char *buf, int buf_size,
     return buf;
 }
 
-static const char *JS_AtomGetStr(JSContext *ctx, char *buf, int buf_size, JSAtom atom)
+const char *JS_AtomGetStr(JSContext *ctx, char *buf, int buf_size, JSAtom atom)
 {
     return JS_AtomGetStrRT(ctx->rt, buf, buf_size, atom);
 }
@@ -3122,7 +3195,7 @@ JSValue JS_AtomToString(JSContext *ctx, JSAtom atom)
 
 /* return TRUE if the atom is an array index (i.e. 0 <= index <=
    2^32-2 and return its value */
-static BOOL JS_AtomIsArrayIndex(JSContext *ctx, uint32_t *pval, JSAtom atom)
+JS_BOOL JS_AtomIsArrayIndex(JSContext *ctx, uint32_t *pval, JSAtom atom)
 {
     if (__JS_AtomIsTaggedInt(atom)) {
         *pval = __JS_AtomToUInt32(atom);
@@ -3145,6 +3218,23 @@ static BOOL JS_AtomIsArrayIndex(JSContext *ctx, uint32_t *pval, JSAtom atom)
     }
 }
 
+JS_BOOL JS_AtomIsSymbol(JSContext *ctx,JSAtom atom)
+{
+  if (__JS_AtomIsTaggedInt(atom)) {
+    return FALSE;
+  }
+  else {
+    JSRuntime *rt = ctx->rt;
+    JSAtomStruct *p;
+    uint32_t val;
+
+    assert(atom < rt->atom_size);
+    p = rt->atom_array[atom];
+    return p->atom_type != JS_ATOM_TYPE_STRING;
+  }
+}
+
+
 /* This test must be fast if atom is not a numeric index (e.g. a
    method name). Return JS_UNDEFINED if not a numeric
    index. JS_EXCEPTION can also be returned. */
@@ -3330,7 +3420,7 @@ static JSAtom js_atom_concat_str(JSContext *ctx, JSAtom name, const char *str1)
     const char *cstr;
     char *cstr2;
     size_t len, len1;
-    
+
     str = JS_AtomToString(ctx, name);
     if (JS_IsException(str))
         return JS_ATOM_NULL;
@@ -3868,7 +3958,7 @@ JSValue JS_NewStringLen(JSContext *ctx, const char *buf, size_t buf_len)
     uint32_t c;
     StringBuffer b_s, *b = &b_s;
     size_t len1;
-    
+
     p_start = (const uint8_t *)buf;
     p_end = p_start + buf_len;
     p = p_start;
@@ -4360,7 +4450,7 @@ static no_inline JSShape *js_new_shape2(JSContext *ctx, JSObject *proto,
     sh->prop_size = prop_size;
     sh->prop_count = 0;
     sh->deleted_prop_count = 0;
-    
+
     /* insert in the hash table */
     sh->hash = shape_initial_hash(proto);
     sh->is_hashed = TRUE;
@@ -4520,7 +4610,7 @@ static int compact_properties(JSContext *ctx, JSObject *p)
     uint32_t new_hash_size, i, j, new_hash_mask, new_size;
     JSShapeProperty *old_pr, *pr;
     JSProperty *prop, *new_prop;
-    
+
     sh = p->shape;
     assert(!sh->is_hashed);
 
@@ -4542,7 +4632,7 @@ static int compact_properties(JSContext *ctx, JSObject *p)
     list_del(&old_sh->header.link);
     memcpy(sh, old_sh, sizeof(JSShape));
     list_add_tail(&sh->header.link, &ctx->rt->gc_obj_list);
-    
+
     memset(prop_hash_end(sh) - new_hash_size, 0,
            sizeof(prop_hash_end(sh)[0]) * new_hash_size);
 
@@ -4571,7 +4661,7 @@ static int compact_properties(JSContext *ctx, JSObject *p)
 
     p->shape = sh;
     js_free(ctx, get_alloc_from_shape(old_sh));
-    
+
     /* reduce the size of the object properties */
     new_prop = js_realloc(ctx, p->prop, sizeof(new_prop[0]) * new_size);
     if (new_prop)
@@ -4698,7 +4788,7 @@ static __maybe_unused void JS_DumpShapes(JSRuntime *rt)
     struct list_head *el;
     JSObject *p;
     JSGCObjectHeader *gp;
-    
+
     printf("JSShapes: {\n");
     printf("%5s %4s %14s %5s %5s %s\n", "SLOT", "REFS", "PROTO", "SIZE", "COUNT", "PROPS");
     for(i = 0; i < rt->shape_hash_size; i++) {
@@ -4740,6 +4830,9 @@ static JSValue JS_NewObjectFromShape(JSContext *ctx, JSShape *sh, JSClassID clas
     p->first_weak_ref = NULL;
     p->u.opaque = NULL;
     p->shape = sh;
+#ifdef CONFIG_STORAGE
+    p->persistent = NULL;
+#endif // CONFIG_STORAGE
     p->prop = js_malloc(ctx, sizeof(JSProperty) * sh->prop_size);
     if (unlikely(!p->prop)) {
         js_free(ctx, p);
@@ -4905,6 +4998,19 @@ static int JS_SetObjectData(JSContext *ctx, JSValueConst obj, JSValue val)
     return -1;
 }
 
+__exception int JS_ThisTimeValue(JSContext *ctx, double *valp, JSValueConst this_val);
+
+JS_BOOL JS_IsDate(JSContext *ctx, JSValueConst obj, double* ms_since_1970) {
+  if (JS_GetClassID(obj, NULL) != JS_CLASS_DATE)
+    return 0;
+  double v;
+  if (JS_ThisTimeValue(ctx, &v, obj))
+    return 0;
+  if (ms_since_1970)
+    *ms_since_1970 = v;
+  return 1;
+}
+
 JSValue JS_NewObjectClass(JSContext *ctx, int class_id)
 {
     return JS_NewObjectProtoClass(ctx, ctx->class_proto[class_id], class_id);
@@ -5026,7 +5132,7 @@ static JSValue JS_NewCFunction3(JSContext *ctx, JSCFunction *func,
     JSValue func_obj;
     JSObject *p;
     JSAtom name_atom;
-    
+
     func_obj = JS_NewObjectProtoClass(ctx, proto_val, JS_CLASS_C_FUNCTION);
     if (JS_IsException(func_obj))
         return func_obj;
@@ -5399,6 +5505,11 @@ static void free_object(JSRuntime *rt, JSObject *p)
     JSShape *sh;
     JSShapeProperty *pr;
 
+#ifdef CONFIG_STORAGE
+    if (p->persistent)
+      js_free_persistent_object(rt, JS_MKPTR(JS_TAG_OBJECT, p));
+#endif
+
     p->free_mark = 1; /* used to tell the object is invalid when
                          freeing cycles */
     /* free all the fields */
@@ -5457,7 +5568,7 @@ static void free_zero_refcount(JSRuntime *rt)
 {
     struct list_head *el;
     JSGCObjectHeader *p;
-    
+
     rt->gc_phase = JS_GC_PHASE_DECREF;
     for(;;) {
         el = rt->gc_zero_ref_count_list.next;
@@ -5689,7 +5800,7 @@ static void gc_decref(JSRuntime *rt)
 {
     struct list_head *el, *el1;
     JSGCObjectHeader *p;
-    
+
     init_list_head(&rt->tmp_obj_list);
 
     /* decrement the refcount of all the children of all the GC
@@ -5736,7 +5847,7 @@ static void gc_scan(JSRuntime *rt)
         p->mark = 0; /* reset the mark for the next GC call */
         mark_children(rt, p, gc_scan_incref_child);
     }
-    
+
     /* restore the refcount of the objects to be deleted. */
     list_for_each(el, &rt->tmp_obj_list) {
         p = list_entry(el, JSGCObjectHeader, link);
@@ -5782,7 +5893,7 @@ static void gc_free_cycles(JSRuntime *rt)
         }
     }
     rt->gc_phase = JS_GC_PHASE_NONE;
-           
+
     list_for_each_safe(el, el1, &rt->gc_zero_ref_count_list) {
         p = list_entry(el, JSGCObjectHeader, link);
         assert(p->gc_obj_type == JS_GC_OBJ_TYPE_JS_OBJECT ||
@@ -6194,7 +6305,7 @@ void JS_DumpMemoryUsage(FILE *fp, const JSMemoryUsage *s, JSRuntime *rt)
 #ifdef CONFIG_BIGNUM
             "BigNum "
 #endif
-            CONFIG_VERSION " version, %d-bit, malloc limit: %"PRId64"\n\n",
+            QUICKJS_VERSION " version, %d-bit, malloc limit: %"PRId64"\n\n",
             (int)sizeof(void *) * 8, (int64_t)(ssize_t)s->malloc_limit);
 #if 1
     if (rt) {
@@ -6449,7 +6560,7 @@ static const char *get_func_name(JSContext *ctx, JSValueConst func)
     JSProperty *pr;
     JSShapeProperty *prs;
     JSValueConst val;
-    
+
     if (JS_VALUE_GET_TAG(func) != JS_TAG_OBJECT)
         return NULL;
     prs = find_own_property(&pr, JS_VALUE_GET_OBJ(func), JS_ATOM_name);
@@ -6480,7 +6591,7 @@ static void build_backtrace(JSContext *ctx, JSValueConst error_obj,
     const char *str1;
     JSObject *p;
     BOOL backtrace_barrier;
-    
+
     js_dbuf_init(ctx, &dbuf);
     if (filename) {
         dbuf_printf(&dbuf, "    at %s", filename);
@@ -6604,7 +6715,7 @@ static JSValue JS_ThrowError(JSContext *ctx, JSErrorEnum error_num,
     return JS_ThrowError2(ctx, error_num, fmt, ap, add_backtrace);
 }
 
-JSValue __attribute__((format(printf, 2, 3))) JS_ThrowSyntaxError(JSContext *ctx, const char *fmt, ...)
+JSValue __js_printf_like(2,3) JS_ThrowSyntaxError(JSContext *ctx, const char *fmt, ...)
 {
     JSValue val;
     va_list ap;
@@ -6615,7 +6726,7 @@ JSValue __attribute__((format(printf, 2, 3))) JS_ThrowSyntaxError(JSContext *ctx
     return val;
 }
 
-JSValue __attribute__((format(printf, 2, 3))) JS_ThrowTypeError(JSContext *ctx, const char *fmt, ...)
+JSValue __js_printf_like(2,3) JS_ThrowTypeError(JSContext *ctx, const char *fmt, ...)
 {
     JSValue val;
     va_list ap;
@@ -6626,7 +6737,7 @@ JSValue __attribute__((format(printf, 2, 3))) JS_ThrowTypeError(JSContext *ctx,
     return val;
 }
 
-static int __attribute__((format(printf, 3, 4))) JS_ThrowTypeErrorOrFalse(JSContext *ctx, int flags, const char *fmt, ...)
+static int __js_printf_like(3,4) JS_ThrowTypeErrorOrFalse(JSContext *ctx, int flags, const char *fmt, ...)
 {
     va_list ap;
 
@@ -6642,7 +6753,7 @@ static int __attribute__((format(printf, 3, 4))) JS_ThrowTypeErrorOrFalse(JSCont
 }
 
 /* never use it directly */
-static JSValue __attribute__((format(printf, 3, 4))) __JS_ThrowTypeErrorAtom(JSContext *ctx, JSAtom atom, const char *fmt, ...)
+static JSValue __js_printf_like(3,4) __JS_ThrowTypeErrorAtom(JSContext *ctx, JSAtom atom, const char *fmt, ...)
 {
     char buf[ATOM_GET_STR_BUF_SIZE];
     return JS_ThrowTypeError(ctx, fmt,
@@ -6650,7 +6761,7 @@ static JSValue __attribute__((format(printf, 3, 4))) __JS_ThrowTypeErrorAtom(JSC
 }
 
 /* never use it directly */
-static JSValue __attribute__((format(printf, 3, 4))) __JS_ThrowSyntaxErrorAtom(JSContext *ctx, JSAtom atom, const char *fmt, ...)
+static JSValue __js_printf_like(3,4) __JS_ThrowSyntaxErrorAtom(JSContext *ctx, JSAtom atom, const char *fmt, ...)
 {
     char buf[ATOM_GET_STR_BUF_SIZE];
     return JS_ThrowSyntaxError(ctx, fmt,
@@ -6673,7 +6784,7 @@ static int JS_ThrowTypeErrorReadOnly(JSContext *ctx, int flags, JSAtom atom)
     }
 }
 
-JSValue __attribute__((format(printf, 2, 3))) JS_ThrowReferenceError(JSContext *ctx, const char *fmt, ...)
+JSValue __js_printf_like(2,3) JS_ThrowReferenceError(JSContext *ctx, const char *fmt, ...)
 {
     JSValue val;
     va_list ap;
@@ -6684,7 +6795,7 @@ JSValue __attribute__((format(printf, 2, 3))) JS_ThrowReferenceError(JSContext *
     return val;
 }
 
-JSValue __attribute__((format(printf, 2, 3))) JS_ThrowRangeError(JSContext *ctx, const char *fmt, ...)
+JSValue __js_printf_like(2,3) JS_ThrowRangeError(JSContext *ctx, const char *fmt, ...)
 {
     JSValue val;
     va_list ap;
@@ -6695,7 +6806,7 @@ JSValue __attribute__((format(printf, 2, 3))) JS_ThrowRangeError(JSContext *ctx,
     return val;
 }
 
-JSValue __attribute__((format(printf, 2, 3))) JS_ThrowInternalError(JSContext *ctx, const char *fmt, ...)
+JSValue __js_printf_like(2,3) JS_ThrowInternalError(JSContext *ctx, const char *fmt, ...)
 {
     JSValue val;
     va_list ap;
@@ -6909,6 +7020,10 @@ static JSValueConst JS_GetPrototypePrimitive(JSContext *ctx, JSValueConst val)
     return val;
 }
 
+JSValue JS_GetPrototypeOfDate(JSContext *ctx) {
+  return JS_DupValue(ctx, ctx->class_proto[JS_CLASS_DATE]);
+}
+
 /* Return an Object, JS_NULL or JS_EXCEPTION in case of Proxy object. */
 JSValue JS_GetPrototype(JSContext *ctx, JSValueConst obj)
 {
@@ -7118,6 +7233,8 @@ JSValue JS_GetPropertyInternal(JSContext *ctx, JSValueConst obj,
         p = JS_VALUE_GET_OBJ(obj);
     }
 
+    PRELOAD_PERSISTENT_OBJ(p);
+
     for(;;) {
         prs = find_own_property(&pr, p, prop);
         if (prs) {
@@ -7320,7 +7437,7 @@ static int JS_AddBrand(JSContext *ctx, JSValueConst obj, JSValueConst home_obj)
     JSProperty *pr;
     JSValue brand;
     JSAtom brand_atom;
-    
+
     if (unlikely(JS_VALUE_GET_TAG(home_obj) != JS_TAG_OBJECT)) {
         JS_ThrowTypeErrorNotAnObject(ctx);
         return -1;
@@ -7342,7 +7459,7 @@ static int JS_AddBrand(JSContext *ctx, JSValueConst obj, JSValueConst home_obj)
         brand = JS_DupValue(ctx, pr->u.value);
     }
     brand_atom = js_symbol_to_atom(ctx, brand);
-    
+
     if (unlikely(JS_VALUE_GET_TAG(obj) != JS_TAG_OBJECT)) {
         JS_ThrowTypeErrorNotAnObject(ctx);
         JS_FreeAtom(ctx, brand_atom);
@@ -7363,7 +7480,7 @@ static int JS_CheckBrand(JSContext *ctx, JSValueConst obj, JSValueConst func)
     JSShapeProperty *prs;
     JSProperty *pr;
     JSValueConst brand;
-    
+
     /* get the home object of 'func' */
     if (unlikely(JS_VALUE_GET_TAG(func) != JS_TAG_OBJECT)) {
     not_obj:
@@ -7385,7 +7502,7 @@ static int JS_CheckBrand(JSContext *ctx, JSValueConst obj, JSValueConst func)
     /* safety check */
     if (unlikely(JS_VALUE_GET_TAG(brand) != JS_TAG_SYMBOL))
         goto not_obj;
-    
+
     /* get the brand array of 'obj' */
     if (unlikely(JS_VALUE_GET_TAG(obj) != JS_TAG_OBJECT))
         goto not_obj;
@@ -7433,7 +7550,7 @@ static int num_keys_cmp(const void *p1, const void *p2, void *opaque)
         return 1;
 }
 
-static void js_free_prop_enum(JSContext *ctx, JSPropertyEnum *tab, uint32_t len)
+void js_free_prop_enum(JSContext *ctx, JSPropertyEnum *tab, uint32_t len)
 {
     uint32_t i;
     if (tab) {
@@ -7460,7 +7577,7 @@ static int __exception JS_GetOwnPropertyNamesInternal(JSContext *ctx,
     BOOL is_enumerable, num_sorted;
     uint32_t num_key;
     JSAtomKindEnum kind;
-    
+
     /* clear pointer for consistency in case of failure */
     *ptab = NULL;
     *plen = 0;
@@ -7472,6 +7589,10 @@ static int __exception JS_GetOwnPropertyNamesInternal(JSContext *ctx,
     exotic_keys_count = 0;
     exotic_count = 0;
     tab_exotic = NULL;
+
+    PRELOAD_PERSISTENT_OBJ(p);
+
+
     sh = p->shape;
     for(i = 0, prs = get_shape_prop(sh); i < sh->prop_count; i++, prs++) {
         atom = prs->atom;
@@ -7619,8 +7740,8 @@ static int __exception JS_GetOwnPropertyNamesInternal(JSContext *ctx,
                     JS_FreeAtom(ctx, atom);
                 }
             }
-            js_free(ctx, tab_exotic);
-        }
+        js_free(ctx, tab_exotic);
+    }
     }
 
     assert(num_index == num_keys_count);
@@ -7656,6 +7777,8 @@ static int JS_GetOwnPropertyInternal(JSContext *ctx, JSPropertyDescriptor *desc,
     JSShapeProperty *prs;
     JSProperty *pr;
 
+    PRELOAD_PERSISTENT_OBJ(p);
+
 retry:
     prs = find_own_property(&pr, p, prop);
     if (prs) {
@@ -7784,6 +7907,7 @@ int JS_HasProperty(JSContext *ctx, JSValueConst obj, JSAtom prop)
                 obj1 = JS_DupValue(ctx, JS_MKPTR(JS_TAG_OBJECT, p));
                 ret = em->has_property(ctx, obj1, prop);
                 JS_FreeValue(ctx, obj1);
+                if(ret != JS_PROCEED_WITH_DEFAULT)
                 return ret;
             }
         }
@@ -8320,7 +8444,7 @@ static int JS_SetPropertyGeneric(JSContext *ctx,
     JSPropertyDescriptor desc;
     JSValue obj1;
     JSObject *p;
-    
+
     obj1 = JS_DupValue(ctx, obj);
     for(;;) {
         p = JS_VALUE_GET_OBJ(obj1);
@@ -8374,7 +8498,7 @@ static int JS_SetPropertyGeneric(JSContext *ctx,
         JS_FreeValue(ctx, val);
         return JS_ThrowTypeErrorOrFalse(ctx, flags, "receiver is not an object");
     }
-    
+
     p = JS_VALUE_GET_OBJ(this_obj);
 
     /* modify the property in this_obj if it already exists */
@@ -8451,6 +8575,8 @@ int JS_SetPropertyInternal(JSContext *ctx, JSValueConst this_obj,
         }
     }
     p = JS_VALUE_GET_OBJ(this_obj);
+    MARK_MODIFIED_OBJ(p);
+
 retry:
     prs = find_own_property(&pr, p, prop);
     if (prs) {
@@ -8749,8 +8875,8 @@ static int JS_SetPropertyValue(JSContext *ctx, JSValueConst this_obj,
                 return -1;
             if (unlikely(idx >= (uint32_t)p->u.array.count)) {
             ta_out_of_bound:
-                return JS_ThrowTypeErrorOrFalse(ctx, flags, "out-of-bound numeric index");
-            }
+                    return JS_ThrowTypeErrorOrFalse(ctx, flags, "out-of-bound numeric index");
+                }
             p->u.array.u.double_ptr[idx] = d;
             break;
         default:
@@ -8888,8 +9014,10 @@ static int JS_CreateProperty(JSContext *ctx, JSObject *p,
             const JSClassExoticMethods *em = ctx->rt->class_array[p->class_id].exotic;
             if (em) {
                 if (em->define_own_property) {
-                    return em->define_own_property(ctx, JS_MKPTR(JS_TAG_OBJECT, p),
+                    int r = em->define_own_property(ctx, JS_MKPTR(JS_TAG_OBJECT, p),
                                                    prop, val, getter, setter, flags);
+                    if (r != JS_PROCEED_WITH_DEFAULT)
+                      return r;
                 }
                 ret = JS_IsExtensible(ctx, JS_MKPTR(JS_TAG_OBJECT, p));
                 if (ret < 0)
@@ -9133,10 +9261,10 @@ int JS_DefineProperty(JSContext *ctx, JSValueConst this_obj,
                     if ((prs->flags & (JS_PROP_CONFIGURABLE | JS_PROP_WRITABLE)) == 0 &&
                         (flags & JS_PROP_HAS_VALUE)) {
                         if (!js_same_value(ctx, val, pr->u.value)) {
-                            goto not_configurable;
-                        } else {
+                        goto not_configurable;
+                    } else {
                             return TRUE;
-                        }
+                    }
                     }
                 }
                 if ((prs->flags & JS_PROP_TMASK) == JS_PROP_VARREF) {
@@ -9396,7 +9524,7 @@ static BOOL js_object_has_name(JSContext *ctx, JSValueConst obj)
     JSShapeProperty *prs;
     JSValueConst val;
     JSString *p;
-    
+
     prs = find_own_property(&pr, JS_VALUE_GET_OBJ(obj), JS_ATOM_name);
     if (!prs)
         return FALSE;
@@ -9669,7 +9797,7 @@ int JS_DeleteProperty(JSContext *ctx, JSValueConst obj, JSAtom prop, int flags)
     JSValue obj1;
     JSObject *p;
     int res;
-    
+
     obj1 = JS_ToObject(ctx, obj);
     if (JS_IsException(obj1))
         return -1;
@@ -9703,6 +9831,23 @@ int JS_DeletePropertyInt64(JSContext *ctx, JSValueConst obj, int64_t idx, int fl
     return res;
 }
 
+BOOL JS_IsFunctionOfThisRealm(JSContext *ctx, JSValueConst val)
+{
+  JSObject *p;
+  if (JS_VALUE_GET_TAG(val) != JS_TAG_OBJECT)
+    return FALSE;
+  p = JS_VALUE_GET_OBJ(val);
+  switch (p->class_id) {
+    case JS_CLASS_BYTECODE_FUNCTION:
+      return p->u.func.function_bytecode->realm == ctx;
+    case JS_CLASS_C_FUNCTION:
+      return p->u.cfunc.realm == ctx;
+    default:
+      return FALSE;
+  }
+}
+
+
 BOOL JS_IsFunction(JSContext *ctx, JSValueConst val)
 {
     JSObject *p;
@@ -9814,6 +9959,16 @@ void *JS_GetOpaque2(JSContext *ctx, JSValueConst obj, JSClassID class_id)
     return p;
 }
 
+JSClassID JS_GetClassID(JSValueConst obj, void** ppopaque) {
+  JSObject *p;
+  if (JS_VALUE_GET_TAG(obj) != JS_TAG_OBJECT)
+    return 0;
+  p = JS_VALUE_GET_OBJ(obj);
+  if(ppopaque)
+    *ppopaque = p->u.opaque;
+  return p->class_id;
+}
+
 #define HINT_STRING  0
 #define HINT_NUMBER  1
 #define HINT_NONE    2
@@ -9916,7 +10071,7 @@ static inline BOOL JS_IsHTMLDDA(JSContext *ctx, JSValueConst obj)
     p = JS_VALUE_GET_OBJ(obj);
     return p->is_HTMLDDA;
 }
-                         
+
 static int JS_ToBoolFree(JSContext *ctx, JSValue val)
 {
     uint32_t tag = JS_VALUE_GET_TAG(val);
@@ -10018,11 +10173,11 @@ static double js_strtod(const char *p, int radix, BOOL is_float)
 {
     double d;
     int c;
-    
+
     if (!is_float || radix != 10) {
         uint64_t n_max, n;
         int int_exp, is_neg;
-        
+
         is_neg = 0;
         if (*p == '-') {
             is_neg = 1;
@@ -10070,7 +10225,7 @@ static double js_strtod(const char *p, int radix, BOOL is_float)
 /* accept _ between digits as a digit separator */
 #define ATOD_ACCEPT_UNDERSCORES  (1 << 5)
 /* allow a suffix to override the type */
-#define ATOD_ACCEPT_SUFFIX    (1 << 6) 
+#define ATOD_ACCEPT_SUFFIX    (1 << 6)
 /* default type */
 #define ATOD_TYPE_MASK        (3 << 7)
 #define ATOD_TYPE_FLOAT64     (0 << 7)
@@ -10079,7 +10234,7 @@ static double js_strtod(const char *p, int radix, BOOL is_float)
 #define ATOD_TYPE_BIG_DECIMAL (3 << 7)
 /* assume bigint mode: floats are parsed as integers if no decimal
    point nor exponent */
-#define ATOD_MODE_BIGINT      (1 << 9) 
+#define ATOD_MODE_BIGINT      (1 << 9)
 /* accept -0x1 */
 #define ATOD_ACCEPT_PREFIX_AFTER_SIGN (1 << 10)
 
@@ -10109,7 +10264,7 @@ static JSValue js_string_to_bigfloat(JSContext *ctx, const char *buf,
     bf_t *a;
     int ret;
     JSValue val;
-    
+
     val = JS_NewBigFloat(ctx);
     if (JS_IsException(val))
         return val;
@@ -10135,7 +10290,7 @@ static JSValue js_string_to_bigdecimal(JSContext *ctx, const char *buf,
     bfdec_t *a;
     int ret;
     JSValue val;
-    
+
     val = JS_NewBigDecimal(ctx);
     if (JS_IsException(val))
         return val;
@@ -10169,11 +10324,11 @@ static JSValue js_atof(JSContext *ctx, const char *str, const char **pp,
     int i, j, len;
     BOOL buf_allocated = FALSE;
     JSValue val;
-    
+
     /* optional separator between digits */
     sep = (flags & ATOD_ACCEPT_UNDERSCORES) ? '_' : 256;
     has_legacy_octal = FALSE;
-    
+
     p = str;
     p_start = p;
     is_neg = 0;
@@ -10237,7 +10392,11 @@ static JSValue js_atof(JSContext *ctx, const char *str, const char **pp,
             } else
 #endif
             {
+#ifdef _MSC_VER
+                double d = INFINITY;
+#else
                 double d = 1.0 / 0.0;
+#endif
                 if (is_neg)
                     d = -d;
                 val = JS_NewFloat64(ctx, d);
@@ -10378,7 +10537,7 @@ static JSValue js_atof(JSContext *ctx, const char *str, const char **pp,
         val = JS_NewFloat64(ctx, d);
     }
 #endif
-    
+
 done:
     if (buf_allocated)
         js_free_rt(ctx->rt, buf);
@@ -10460,7 +10619,7 @@ static JSValue JS_ToNumberHintFree(JSContext *ctx, JSValue val,
             const char *str;
             const char *p;
             size_t len;
-            
+
             str = JS_ToCStringLen(ctx, &len, val);
             JS_FreeValue(ctx, val);
             if (!str)
@@ -11042,16 +11201,16 @@ static __exception int JS_ToArrayLengthFree(JSContext *ctx, uint32_t *plen,
                     return -1;
                 /* cannot recurse because val is a number */
                 if (JS_ToArrayLengthFree(ctx, &len, val, TRUE))
-                    return -1;
-            } else {
+                return -1;
+        } else {
                 /* legacy behavior: must do the conversion twice and compare */
                 if (JS_ToUint32(ctx, &len, val)) {
                     JS_FreeValue(ctx, val);
                     return -1;
                 }
-                val = JS_ToNumberFree(ctx, val);
-                if (JS_IsException(val))
-                    return -1;
+            val = JS_ToNumberFree(ctx, val);
+            if (JS_IsException(val))
+                return -1;
                 /* cannot recurse because val is a number */
                 if (JS_ToArrayLengthFree(ctx, &len1, val, FALSE))
                     return -1;
@@ -11793,7 +11952,7 @@ static __maybe_unused void JS_DumpObject(JSRuntime *rt, JSObject *p)
         }
         printf(" }");
     }
-    
+
     if (js_class_has_bytecode(p->class_id)) {
         JSFunctionBytecode *b = p->u.func.function_bytecode;
         JSVarRef **var_refs;
@@ -11980,6 +12139,39 @@ int JS_IsArray(JSContext *ctx, JSValueConst val)
     }
 }
 
+int JS_IsTuple(JSContext *ctx, JSValueConst val) {
+  /* isArray and has tag property */
+  int ret;
+  ret = JS_IsArray(ctx, val);
+  if (ret < 0)
+    return -1;
+  else if (ret > 0)
+    return JS_HasProperty(ctx, val, JS_ATOM_tag);
+  return FALSE;
+}
+
+JSValue JS_GetTupleTag(JSContext *ctx, JSValueConst this_obj)
+{
+  return JS_GetProperty(ctx, this_obj, JS_ATOM_tag);
+}
+
+/* return -1 if exception (proxy case) or TRUE/FALSE */
+int JS_IsObjectPlain(JSContext *ctx, JSValueConst val)
+{
+  JSObject *p;
+  if (JS_VALUE_GET_TAG(val) == JS_TAG_OBJECT) {
+    p = JS_VALUE_GET_OBJ(val);
+    if (unlikely(p->class_id == JS_CLASS_PROXY))
+      return !js_proxy_isArray(ctx, val);
+    else
+      return p->class_id == JS_CLASS_OBJECT;
+  }
+  else {
+    return FALSE;
+  }
+}
+
+
 static double js_pow(double a, double b)
 {
     if (unlikely(!isfinite(b)) && fabs(a) == 1) {
@@ -12085,7 +12277,7 @@ static bfdec_t *JS_ToBigDecimal(JSContext *ctx, JSValueConst val)
     uint32_t tag;
     JSBigDecimal *p;
     bfdec_t *r;
-    
+
     tag = JS_VALUE_GET_NORM_TAG(val);
     switch(tag) {
     case JS_TAG_BIG_DECIMAL:
@@ -12106,7 +12298,7 @@ static JSValue JS_StringToBigInt(JSContext *ctx, JSValue val)
     const char *str, *p;
     size_t len;
     int flags;
-    
+
     str = JS_ToCStringLen(ctx, &len, val);
     JS_FreeValue(ctx, val);
     if (!str)
@@ -12222,7 +12414,7 @@ static __maybe_unused JSValue JS_ToBigIntValueFree(JSContext *ctx, JSValue val)
     } else {
         bf_t a_s, *a, *r;
         int ret;
-        JSValue res; 
+        JSValue res;
 
         res = JS_NewBigInt(ctx);
         if (JS_IsException(res))
@@ -12324,7 +12516,7 @@ static JSValue JS_CompactBigInt1(JSContext *ctx, JSValue val,
 {
     int64_t v;
     bf_t *a;
-    
+
     if (JS_VALUE_GET_TAG(val) != JS_TAG_BIG_INT)
         return val; /* fail safe */
     a = JS_GetBigInt(val);
@@ -12452,10 +12644,10 @@ static __exception int js_call_binary_op_fallback(JSContext *ctx,
     JSOverloadableOperatorEnum ovop;
     JSObject *p;
     JSValueConst args[2];
-    
+
     if (!ctx->allow_operator_overloading)
         return 0;
-    
+
     opset2_obj = JS_UNDEFINED;
     opset1_obj = JS_GetProperty(ctx, op1, JS_ATOM_Symbol_operatorSet);
     if (JS_IsException(opset1_obj))
@@ -12484,7 +12676,7 @@ static __exception int js_call_binary_op_fallback(JSContext *ctx,
     }
 
     ovop = get_ovop_from_opcode(op);
-    
+
     if (opset1->operator_counter == opset2->operator_counter) {
         p = opset1->self_ops[ovop];
     } else if (opset1->operator_counter > opset2->operator_counter) {
@@ -12509,7 +12701,7 @@ static __exception int js_call_binary_op_fallback(JSContext *ctx,
     } else {
         new_op1 = JS_DupValue(ctx, op1);
     }
-    
+
     if (opset2->is_primitive) {
         if (is_numeric) {
             new_op2 = JS_ToNumeric(ctx, op2);
@@ -12526,7 +12718,7 @@ static __exception int js_call_binary_op_fallback(JSContext *ctx,
 
     /* XXX: could apply JS_ToPrimitive() if primitive type so that the
        operator function does not get a value object */
-    
+
     method = JS_DupValue(ctx, JS_MKPTR(JS_TAG_OBJECT, p));
     if (ovop == JS_OVOP_LESS && (op == OP_lte || op == OP_gt)) {
         args[0] = new_op2;
@@ -12637,7 +12829,7 @@ static __exception int js_call_unary_op_fallback(JSContext *ctx,
 
     if (!ctx->allow_operator_overloading)
         return 0;
-    
+
     opset1_obj = JS_GetProperty(ctx, op1, JS_ATOM_Symbol_operatorSet);
     if (JS_IsException(opset1_obj))
         goto exception;
@@ -12693,7 +12885,7 @@ static int js_unary_arith_bigint(JSContext *ctx,
     bf_t a_s, *r, *a;
     int ret, v;
     JSValue res;
-    
+
     if (op == OP_plus && !is_math_mode(ctx)) {
         JS_ThrowTypeError(ctx, "bigint argument with unary +");
         JS_FreeValue(ctx, op1);
@@ -12745,7 +12937,7 @@ static int js_unary_arith_bigfloat(JSContext *ctx,
     bf_t a_s, *r, *a;
     int ret, v;
     JSValue res;
-    
+
     if (op == OP_plus && !is_math_mode(ctx)) {
         JS_ThrowTypeError(ctx, "bigfloat argument with unary +");
         JS_FreeValue(ctx, op1);
@@ -12794,7 +12986,7 @@ static int js_unary_arith_bigdecimal(JSContext *ctx,
     bfdec_t *r, *a;
     int ret, v;
     JSValue res;
-    
+
     if (op == OP_plus && !is_math_mode(ctx)) {
         JS_ThrowTypeError(ctx, "bigdecimal argument with unary +");
         JS_FreeValue(ctx, op1);
@@ -12954,7 +13146,7 @@ static no_inline int js_not_slow(JSContext *ctx, JSValue *sp)
 {
     JSValue op1, val;
     int ret;
-    
+
     op1 = sp[-1];
     if (JS_IsObject(op1)) {
         ret = js_call_unary_op_fallback(ctx, &val, op1, OP_not);
@@ -12991,7 +13183,7 @@ static int js_binary_arith_bigfloat(JSContext *ctx, OPCodeEnum op,
     bf_t a_s, b_s, *r, *a, *b;
     int ret;
     JSValue res;
-    
+
     res = JS_NewBigFloat(ctx);
     if (JS_IsException(res)) {
         JS_FreeValue(ctx, op1);
@@ -13052,7 +13244,7 @@ static int js_binary_arith_bigint(JSContext *ctx, OPCodeEnum op,
     bf_t a_s, b_s, *r, *a, *b;
     int ret;
     JSValue res;
-    
+
     res = JS_NewBigInt(ctx);
     if (JS_IsException(res))
         goto fail;
@@ -13239,7 +13431,7 @@ static int js_binary_arith_bigdecimal(JSContext *ctx, OPCodeEnum op,
     if (JS_IsException(res))
         goto fail;
     r = JS_GetBigDecimal(res);
-    
+
     a = JS_ToBigDecimal(ctx, op1);
     if (!a)
         goto fail;
@@ -13666,7 +13858,7 @@ static int js_compare_bigfloat(JSContext *ctx, OPCodeEnum op,
 {
     bf_t a_s, b_s, *a, *b;
     int res;
-    
+
     a = JS_ToBigFloat(ctx, &a_s, op1);
     if (!a) {
         JS_FreeValue(ctx, op2);
@@ -13728,7 +13920,7 @@ static int js_compare_bigdecimal(JSContext *ctx, OPCodeEnum op,
     }
     a = JS_ToBigDecimal(ctx, op1);
     b = JS_ToBigDecimal(ctx, op2);
-    
+
     switch(op) {
     case OP_lt:
         res = bfdec_cmp_lt(a, b); /* if NaN return false */
@@ -14117,7 +14309,7 @@ static JSValue js_mul_pow10_to_float64(JSContext *ctx, const bf_t *a,
     bf_t r_s, *r = &r_s;
     double d;
     int ret;
-    
+
     /* always convert to Float64 */
     bf_init(ctx->bf_ctx, r);
     ret = bf_mul_pow_radix(r, a, 10, exponent,
@@ -14839,7 +15031,7 @@ static __exception int js_operator_typeof(JSContext *ctx, JSValueConst op1)
         {
             JSObject *p;
             p = JS_VALUE_GET_OBJ(op1);
-            if (unlikely(p->is_HTMLDDA)) 
+            if (unlikely(p->is_HTMLDDA))
                 atom = JS_ATOM_undefined;
             else if (JS_IsFunction(ctx, op1))
                 atom = JS_ATOM_function;
@@ -14987,6 +15179,50 @@ static JSValue js_build_arguments(JSContext *ctx, int argc, JSValueConst *argv)
     return val;
 }
 
+/**/
+JSValue JS_NewFastArray(JSContext *ctx, int argc, JSValueConst *argv)
+{
+  JSValue val, *tab;
+  JSProperty *pr;
+  JSObject *p;
+  int i;
+
+  val = JS_NewObjectProtoClass(ctx, ctx->class_proto[JS_CLASS_OBJECT], JS_CLASS_ARRAY);
+  if (JS_IsException(val))
+    return val;
+  p = JS_VALUE_GET_OBJ(val);
+
+  /* add the length field (cannot fail) */
+  pr = add_property(ctx, p, JS_ATOM_length,
+    JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE);
+  pr->u.value = JS_NewInt32(ctx, argc);
+
+  /* initialize the fast array part */
+  tab = NULL;
+  if (argc > 0) {
+    tab = js_malloc(ctx, sizeof(tab[0]) * argc);
+    if (!tab) {
+      JS_FreeValue(ctx, val);
+      return JS_EXCEPTION;
+    }
+    for (i = 0; i < argc; i++) {
+      tab[i] = JS_DupValue(ctx, argv[i]);
+    }
+  }
+  p->u.array.u.values = tab;
+  p->u.array.count = argc;
+
+  JS_DefinePropertyValue(ctx, val, JS_ATOM_Symbol_iterator,
+    JS_DupValue(ctx, ctx->array_proto_values),
+    JS_PROP_CONFIGURABLE | JS_PROP_WRITABLE);
+  return val;
+}
+
+BOOL JS_GetFastArray(JSContext *ctx, JSValueConst obj, JSValue **arrpp, uint32_t *countp) {
+  return js_get_fast_array(ctx, obj, arrpp, countp);
+}
+
+
 #define GLOBAL_VAR_OFFSET 0x40000000
 #define ARGUMENT_VAR_OFFSET 0x20000000
 
@@ -15123,7 +15359,7 @@ static JSValue build_for_in_iterator(JSContext *ctx, JSValue obj)
         if (js_poll_interrupts(ctx)) {
             JS_FreeValue(ctx, obj1);
             goto fail;
-        }
+    }
     }
 
     p = JS_VALUE_GET_OBJ(obj);
@@ -15560,7 +15796,7 @@ static __exception int js_append_enumerate(JSContext *ctx, JSValue *sp)
     int is_array_iterator;
     JSValue *arrp;
     uint32_t i, count32, pos;
-    
+
     if (JS_VALUE_GET_TAG(sp[-2]) != JS_TAG_INT) {
         JS_ThrowInternalError(ctx, "invalid index for append");
         return -1;
@@ -15634,7 +15870,7 @@ exception:
     return -1;
 }
 
-static __exception int JS_CopyDataProperties(JSContext *ctx,
+__exception int JS_CopyDataProperties(JSContext *ctx,
                                              JSValueConst target,
                                              JSValueConst source,
                                              JSValueConst excluded,
@@ -15648,7 +15884,7 @@ static __exception int JS_CopyDataProperties(JSContext *ctx,
     int ret, gpn_flags;
     JSPropertyDescriptor desc;
     BOOL is_enumerable;
-    
+
     if (JS_VALUE_GET_TAG(source) != JS_TAG_OBJECT)
         return 0;
 
@@ -15669,7 +15905,7 @@ static __exception int JS_CopyDataProperties(JSContext *ctx,
     if (JS_GetOwnPropertyNamesInternal(ctx, &tab_atom, &tab_atom_count, p,
                                        gpn_flags))
         return -1;
-    
+
     for (i = 0; i < tab_atom_count; i++) {
         if (pexcl) {
             ret = JS_GetOwnPropertyInternal(ctx, NULL, pexcl, tab_atom[i].atom);
@@ -16032,7 +16268,7 @@ static JSValue js_call_c_function(JSContext *ctx, JSValueConst func_obj,
     sf->prev_frame = prev_sf;
     rt->current_stack_frame = sf;
     ctx = p->u.cfunc.realm; /* change the current realm */
-    
+
 #ifdef CONFIG_BIGNUM
     /* we only propagate the bignum mode as some runtime functions
        test it */
@@ -16179,6 +16415,16 @@ static JSValue js_call_bound_function(JSContext *ctx, JSValueConst func_obj,
     }
 }
 
+JS_BOOL JS_AreFunctionsOfSameOrigin(JSContext *ctx, JSValue f1, JSValue f2) {
+  if (!JS_IsFunction(ctx, f1)) return 0;
+  if (!JS_IsFunction(ctx, f2)) return 0;
+
+  JSObject *p1 = JS_VALUE_GET_OBJ(f1);
+  JSObject *p2 = JS_VALUE_GET_OBJ(f2);
+  
+  return p1->u.func.function_bytecode == p2->u.func.function_bytecode; /* what about native functions ? */
+}
+
 /* argument of OP_special_object */
 typedef enum {
     OP_SPECIAL_OBJECT_ARGUMENTS,
@@ -16210,6 +16456,10 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
     JSVarRef **var_refs;
     size_t alloca_size;
 
+#ifdef CONFIG_DEBUGGER
+    sf->pthis = &this_obj;
+#endif
+
 #if !DIRECT_DISPATCH
 #define SWITCH(pc)      switch (opcode = *pc++)
 #define CASE(op)        case op
@@ -16220,7 +16470,7 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
 #define DEF(id, size, n_pop, n_push, f) && case_OP_ ## id,
 #if SHORT_OPCODES
 #define def(id, size, n_pop, n_push, f)
-#else                                                     
+#else
 #define def(id, size, n_pop, n_push, f) && case_default,
 #endif
 #include "quickjs-opcode.h"
@@ -16314,7 +16564,7 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
     sf->prev_frame = rt->current_stack_frame;
     rt->current_stack_frame = sf;
     ctx = b->realm; /* set the current realm */
-    
+
  restart:
     for(;;) {
         int call_argc;
@@ -16764,7 +17014,7 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
             JS_FreeValue(ctx, sp[-1]);
             sp -= 2;
             BREAK;
-            
+
         CASE(OP_throw):
             JS_Throw(ctx, *--sp);
             goto exception;
@@ -17501,8 +17751,8 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
                         ret = JS_CallFree(ctx, method, sp[-4],
                                           0, NULL);
                     } else {
-                        ret = JS_CallFree(ctx, method, sp[-4],
-                                          1, (JSValueConst *)(sp - 1));
+                    ret = JS_CallFree(ctx, method, sp[-4],
+                                      1, (JSValueConst *)(sp - 1));
                     }
                     if (JS_IsException(ret))
                         goto exception;
@@ -17579,7 +17829,7 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
             {
                 JSAtom atom;
                 JSValue val;
-                
+
                 atom = get_u32(pc);
                 pc += 4;
                 val = JS_NewSymbolFromAtom(ctx, atom, JS_ATOM_TYPE_PRIVATE);
@@ -17588,7 +17838,7 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
                 *sp++ = val;
             }
             BREAK;
-            
+
         CASE(OP_get_private_field):
             {
                 JSValue val;
@@ -17741,7 +17991,7 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
             {
                 int class_flags;
                 JSAtom atom;
-                
+
                 atom = get_u32(pc);
                 class_flags = pc[4];
                 pc += 5;
@@ -18607,6 +18857,17 @@ static JSValue JS_CallInternal(JSContext *caller_ctx, JSValueConst func_obj,
 
         CASE(OP_nop):
             BREAK;
+
+#ifdef CONFIG_DEBUGGER
+        CASE(OP_line_num) : {
+              uint32_t line_num = get_u32(pc);
+              pc += 4;
+              if (caller_ctx == ctx && caller_ctx->debugger_check_line_no && b->has_debug && b->debug.filename) {
+                caller_ctx->debugger_check_line_no(caller_ctx, b->debug.filename, line_num, pc);
+              }
+            }
+            BREAK;
+#endif
         CASE(OP_is_undefined_or_null):
             if (JS_VALUE_GET_TAG(sp[-1]) == JS_TAG_UNDEFINED ||
                 JS_VALUE_GET_TAG(sp[-1]) == JS_TAG_NULL) {
@@ -18731,7 +18992,7 @@ static JSContext *JS_GetFunctionRealm(JSContext *ctx, JSValueConst func_obj)
 {
     JSObject *p;
     JSContext *realm;
-    
+
     if (JS_VALUE_GET_TAG(func_obj) != JS_TAG_OBJECT)
         return ctx;
     p = JS_VALUE_GET_OBJ(func_obj);
@@ -18780,7 +19041,7 @@ static JSValue js_create_from_ctor(JSContext *ctx, JSValueConst ctor,
 {
     JSValue proto, obj;
     JSContext *realm;
-    
+
     if (JS_IsUndefined(ctor)) {
         proto = JS_DupValue(ctx, ctx->class_proto[class_id]);
     } else {
@@ -18947,7 +19208,7 @@ static void async_func_free(JSRuntime *rt, JSAsyncFunctionState *s)
 
     /* close the closure variables. */
     close_var_refs(rt, sf);
-    
+
     if (sf->arg_buf) {
         /* cannot free the function if it is running */
         assert(sf->cur_sp != NULL);
@@ -19849,6 +20110,8 @@ enum {
     TOK_FUNCTION,
     TOK_DEBUGGER,
     TOK_WITH,
+    TOK___FILE__,
+    TOK___DIR__,
     /* FutureReservedWord */
     TOK_CLASS,
     TOK_CONST,
@@ -20003,7 +20266,7 @@ typedef struct JSFunctionDef {
     int this_active_func_var_idx; /* variable containg the 'this.active_func' value, -1 if none */
     int home_object_var_idx;
     BOOL need_home_object;
-    
+
     int scope_level;    /* index into fd->scopes if the current lexical scope */
     int scope_first;    /* index into vd->vars of first lexically scoped variable */
     int scope_size;     /* allocated size of fd->scopes array */
@@ -20020,7 +20283,7 @@ typedef struct JSFunctionDef {
     int last_opcode_pos; /* -1 if no last opcode */
     int last_opcode_line_num;
     BOOL use_short_opcodes; /* true if short opcodes are used in byte_code */
-    
+
     LabelSlot *label_slots;
     int label_size; /* allocated size for label_slots[] */
     int label_count;
@@ -20100,6 +20363,9 @@ typedef struct JSParseState {
     BOOL is_module; /* parsing a module */
     BOOL allow_html_comments;
     BOOL ext_json; /* true if accepting JSON superset */
+#ifdef CONFIG_JSX
+    BOOL allow_web_name_token; /* HTML and CSS tokens that accept '-' as part of the nmtoken */
+#endif
 } JSParseState;
 
 typedef struct JSOpCode {
@@ -20230,12 +20496,12 @@ static void __attribute((unused)) dump_token(JSParseState *s,
     }
 }
 
-int __attribute__((format(printf, 2, 3))) js_parse_error(JSParseState *s, const char *fmt, ...)
+int __js_printf_like(2,3) js_parse_error(JSParseState *s, const char *fmt, ...)
 {
     JSContext *ctx = s->ctx;
     va_list ap;
     int backtrace_flags;
-    
+
     va_start(ap, fmt);
     JS_ThrowError2(ctx, JS_SYNTAX_ERROR, fmt, ap, FALSE);
     va_end(ap);
@@ -20345,6 +20611,13 @@ static __exception int js_parse_string(JSParseState *s, int sep,
     uint32_t c;
     StringBuffer b_s, *b = &b_s;
 
+    int multiline_str =
+#ifdef CONFIG_JSX
+      sep == '`' || sep == '<';
+#else
+      sep == '`';
+#endif
+
     /* string */
     if (string_buffer_init(s->ctx, b, 32))
         goto fail;
@@ -20358,19 +20631,31 @@ static __exception int js_parse_string(JSParseState *s, int sep,
                     js_parse_error(s, "invalid character in a JSON string");
                 goto fail;
             }
-            if (sep == '`') {
+            if (multiline_str) {
                 if (c == '\r') {
                     if (p[1] == '\n')
                         p++;
                     c = '\n';
                 }
+#ifdef CONFIG_JSX
+                if(c == '\n' && sep == '<')
+                  s->line_num++;
+#endif
                 /* do not update s->line_num */
             } else if (c == '\n' || c == '\r')
                 goto invalid_char;
         }
         p++;
+#ifdef CONFIG_JSX
+        if ((c == '{' || c == '<') && sep == '<') {
+           /* expr start */
+           --p;
+           break;
+        } else 
+#endif
         if (c == sep)
-            break;
+          break;
+
         if (c == '$' && *p == '{' && sep == '`') {
             /* template start or middle part */
             p++;
@@ -20585,7 +20870,7 @@ static __exception int ident_realloc(JSContext *ctx, char **pbuf, size_t *psize,
 {
     char *buf, *new_buf;
     size_t size, new_size;
-    
+
     buf = *pbuf;
     size = *psize;
     if (size >= (SIZE_MAX / 3) * 2)
@@ -20615,7 +20900,7 @@ static JSAtom parse_ident(JSParseState *s, const uint8_t **pp,
     char ident_buf[128], *buf;
     size_t ident_size, ident_pos;
     JSAtom atom;
-    
+
     p = *pp;
     buf = ident_buf;
     ident_size = sizeof(ident_buf);
@@ -20624,7 +20909,7 @@ static JSAtom parse_ident(JSParseState *s, const uint8_t **pp,
         buf[ident_pos++] = '#';
     for(;;) {
         p1 = p;
-        
+
         if (c < 128) {
             buf[ident_pos++] = c;
         } else {
@@ -20637,6 +20922,9 @@ static JSAtom parse_ident(JSParseState *s, const uint8_t **pp,
         } else if (c >= 128) {
             c = unicode_from_utf8(p, UTF8_CHAR_LEN_MAX, &p1);
         }
+#ifdef CONFIG_JSX
+        if (c == '-' && s->allow_web_name_token) {;} else 
+#endif
         if (!lre_js_is_ident_next(c))
             break;
         p = p1;
@@ -20662,11 +20950,11 @@ static __exception int next_token(JSParseState *s)
     int c;
     BOOL ident_has_escape;
     JSAtom atom;
-    
+
     if (js_check_stack_overflow(s->ctx->rt, 0)) {
         return js_parse_error(s, "stack overflow");
     }
-    
+
     free_token(s, &s->token);
 
     p = s->last_ptr = s->buf_ptr;
@@ -20793,14 +21081,14 @@ static __exception int next_token(JSParseState *s)
     case 'm': case 'n': case 'o': case 'p':
     case 'q': case 'r': case 's': case 't':
     case 'u': case 'v': case 'w': case 'x':
-    case 'y': case 'z': 
+    case 'y': case 'z':
     case 'A': case 'B': case 'C': case 'D':
     case 'E': case 'F': case 'G': case 'H':
     case 'I': case 'J': case 'K': case 'L':
     case 'M': case 'N': case 'O': case 'P':
     case 'Q': case 'R': case 'S': case 'T':
     case 'U': case 'V': case 'W': case 'X':
-    case 'Y': case 'Z': 
+    case 'Y': case 'Z':
     case '_':
     case '$':
         /* identifier */
@@ -20839,6 +21127,10 @@ static __exception int next_token(JSParseState *s)
         }
         break;
     case '#':
+#ifdef CONFIG_JSX
+        if (s->allow_web_name_token) goto def_token;
+#endif // CONFIG_JSX
+
         /* private name */
         {
             const uint8_t *p1;
@@ -20884,7 +21176,7 @@ static __exception int next_token(JSParseState *s)
         goto parse_number;
     case '1': case '2': case '3': case '4':
     case '5': case '6': case '7': case '8':
-    case '9': 
+    case '9':
         /* number */
     parse_number:
         {
@@ -21142,7 +21434,7 @@ static __exception int next_token(JSParseState *s)
             case CP_LS:
                 /* XXX: should avoid incrementing line_number, but
                    needed to handle HTML comments */
-                goto line_terminator; 
+                goto line_terminator;
             default:
                 if (lre_is_space(c)) {
                     goto redo;
@@ -21177,7 +21469,7 @@ static JSAtom json_parse_ident(JSParseState *s, const uint8_t **pp, int c)
     char ident_buf[128], *buf;
     size_t ident_size, ident_pos;
     JSAtom atom;
-    
+
     p = *pp;
     buf = ident_buf;
     ident_size = sizeof(ident_buf);
@@ -21209,11 +21501,11 @@ static __exception int json_next_token(JSParseState *s)
     const uint8_t *p;
     int c;
     JSAtom atom;
-    
+
     if (js_check_stack_overflow(s->ctx->rt, 0)) {
         return js_parse_error(s, "stack overflow");
     }
-    
+
     free_token(s, &s->token);
 
     p = s->last_ptr = s->buf_ptr;
@@ -21323,14 +21615,14 @@ static __exception int json_next_token(JSParseState *s)
     case 'm': case 'n': case 'o': case 'p':
     case 'q': case 'r': case 's': case 't':
     case 'u': case 'v': case 'w': case 'x':
-    case 'y': case 'z': 
+    case 'y': case 'z':
     case 'A': case 'B': case 'C': case 'D':
     case 'E': case 'F': case 'G': case 'H':
     case 'I': case 'J': case 'K': case 'L':
     case 'M': case 'N': case 'O': case 'P':
     case 'Q': case 'R': case 'S': case 'T':
     case 'U': case 'V': case 'W': case 'X':
-    case 'Y': case 'Z': 
+    case 'Y': case 'Z':
     case '_':
     case '$':
         /* identifier : only pure ascii characters are accepted */
@@ -21357,7 +21649,7 @@ static __exception int json_next_token(JSParseState *s)
         goto parse_number;
     case '1': case '2': case '3': case '4':
     case '5': case '6': case '7': case '8':
-    case '9': 
+    case '9':
         /* number */
     parse_number:
         {
@@ -21405,7 +21697,7 @@ static int simple_next_token(const uint8_t **pp, BOOL no_line_terminator)
 {
     const uint8_t *p;
     uint32_t c;
-    
+
     /* skip spaces and comments */
     p = *pp;
     for (;;) {
@@ -21636,7 +21928,7 @@ static int emit_goto(JSParseState *s, int opcode, int label)
 static int cpool_add(JSParseState *s, JSValue val)
 {
     JSFunctionDef *fd = s->cur_func;
-    
+
     if (js_resize_array(s->ctx, (void *)&fd->cpool, sizeof(fd->cpool[0]),
                         &fd->cpool_size, fd->cpool_count + 1))
         return -1;
@@ -21959,7 +22251,7 @@ static JSGlobalVar *add_global_var(JSContext *ctx, JSFunctionDef *s,
     hf->is_lexical = FALSE;
     hf->is_const = FALSE;
     hf->scope_level = s->scope_level;
-    hf->var_name = JS_DupAtom(ctx, name);
+        hf->var_name = JS_DupAtom(ctx, name);
     return hf;
 }
 
@@ -22022,7 +22314,7 @@ static int define_var(JSParseState *s, JSFunctionDef *fd, JSAtom name,
         if (find_var_in_child_scope(ctx, fd, name, fd->scope_level) >= 0) {
             return js_parse_error(s, "invalid redefinition of a variable");
         }
-        
+
         if (fd->is_global_var) {
             JSGlobalVar *hf;
             hf = find_global_var(fd, name);
@@ -22031,7 +22323,7 @@ static int define_var(JSParseState *s, JSFunctionDef *fd, JSAtom name,
                 return js_parse_error(s, "invalid redefinition of global identifier");
             }
         }
-        
+
         if (fd->is_eval &&
             (fd->eval_type == JS_EVAL_TYPE_GLOBAL ||
              fd->eval_type == JS_EVAL_TYPE_MODULE) &&
@@ -22302,7 +22594,7 @@ static int __exception js_parse_property_name(JSParseState *s,
     BOOL is_non_reserved_ident;
     JSAtom name;
     int prop_type;
-    
+
     prop_type = PROP_TYPE_IDENT;
     if (allow_method) {
         if (token_is_pseudo_keyword(s, JS_ATOM_get)
@@ -22467,8 +22759,8 @@ static BOOL is_regexp_allowed(int tok)
     }
 }
 
-#define SKIP_HAS_SEMI       (1 << 0)
-#define SKIP_HAS_ELLIPSIS   (1 << 1)
+#define SKIP_HAS_SEMI      (1 << 0)
+#define SKIP_HAS_ELLIPSIS  (1 << 1)
 #define SKIP_HAS_ASSIGNMENT (1 << 2)
 
 /* XXX: improve speed with early bailout */
@@ -22528,7 +22820,7 @@ static int js_parse_skip_parens_token(JSParseState *s, int *pbits, BOOL no_line_
                 if (level >= sizeof(state))
                     goto done;
                 state[level++] = '`';
-            } 
+            }
             break;
         case TOK_EOF:
             goto done;
@@ -22545,7 +22837,7 @@ static int js_parse_skip_parens_token(JSParseState *s, int *pbits, BOOL no_line_
         case '=':
             bits |= SKIP_HAS_ASSIGNMENT;
             break;
-            
+
         case TOK_DIV_ASSIGN:
             tok_len = 2;
             goto parse_regexp;
@@ -22765,6 +23057,11 @@ static __exception int js_parse_object_literal(JSParseState *s)
 /* forbid the exponentiation operator in js_parse_unary() */
 #define PF_POW_FORBIDDEN (1 << 4) 
 
+#ifdef CONFIG_OBJECT_LITERAL_CALL
+#define PF_ACCEPT_LCURLY (1 << 5)
+#endif
+
+
 static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags);
 
 static __exception int js_parse_left_hand_side_expr(JSParseState *s)
@@ -22782,7 +23079,7 @@ static __exception int js_parse_class_default_ctor(JSParseState *s,
     int ret, line_num;
     JSParseFunctionEnum func_type;
     const uint8_t *saved_buf_end;
-    
+
     js_parse_get_pos(s, &pos);
     if (has_super) {
         /* spec change: no argument evaluation */
@@ -22829,7 +23126,7 @@ static int find_private_class_field(JSContext *ctx, JSFunctionDef *fd,
 static void emit_class_field_init(JSParseState *s)
 {
     int label_next;
-    
+
     emit_op(s, OP_scope_get_var);
     emit_atom(s, JS_ATOM_class_fields_init);
     emit_u16(s, s->cur_func->scope_level);
@@ -22837,13 +23134,13 @@ static void emit_class_field_init(JSParseState *s)
     /* no need to call the class field initializer if not defined */
     emit_op(s, OP_dup);
     label_next = emit_goto(s, OP_if_false, -1);
-    
+
     emit_op(s, OP_scope_get_var);
     emit_atom(s, JS_ATOM_this);
     emit_u16(s, 0);
-    
+
     emit_op(s, OP_swap);
-    
+
     emit_op(s, OP_call_method);
     emit_u16(s, 0);
 
@@ -22868,29 +23165,29 @@ static __exception int emit_class_init_start(JSParseState *s,
                                              ClassFieldsDef *cf)
 {
     int label_add_brand;
-    
+
     cf->fields_init_fd = js_parse_function_class_fields_init(s);
     if (!cf->fields_init_fd)
         return -1;
 
     s->cur_func = cf->fields_init_fd;
-    
+
     /* XXX: would be better to add the code only if needed, maybe in a
        later pass */
     emit_op(s, OP_push_false); /* will be patched later */
     cf->brand_push_pos = cf->fields_init_fd->last_opcode_pos;
     label_add_brand = emit_goto(s, OP_if_false, -1);
-    
+
     emit_op(s, OP_scope_get_var);
     emit_atom(s, JS_ATOM_this);
     emit_u16(s, 0);
-    
+
     emit_op(s, OP_scope_get_var);
     emit_atom(s, JS_ATOM_home_object);
     emit_u16(s, 0);
-    
+
     emit_op(s, OP_add_brand);
-    
+
     emit_label(s, label_add_brand);
 
     s->cur_func = s->cur_func->parent;
@@ -22907,7 +23204,7 @@ static __exception int add_brand(JSParseState *s, ClassFieldsDef *cf)
         }
         /* patch the start of the function to enable the OP_add_brand code */
         cf->fields_init_fd->byte_code.buf[cf->brand_push_pos] = OP_push_true;
-        
+
         cf->has_brand = TRUE;
     }
     return 0;
@@ -22916,11 +23213,11 @@ static __exception int add_brand(JSParseState *s, ClassFieldsDef *cf)
 static void emit_class_init_end(JSParseState *s, ClassFieldsDef *cf)
 {
     int cpool_idx;
-        
+
     s->cur_func = cf->fields_init_fd;
     emit_op(s, OP_return_undef);
     s->cur_func = s->cur_func->parent;
-    
+
     cpool_idx = cpool_add(s, JS_NULL);
     cf->fields_init_fd->parent_cpool_idx = cpool_idx;
     emit_op(s, OP_fclosure);
@@ -22943,7 +23240,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
     const uint8_t *class_start_ptr = s->token.ptr;
     const uint8_t *start_ptr;
     ClassFieldsDef class_fields[2];
-        
+
     /* classes are parsed and executed in strict mode */
     saved_js_mode = fd->js_mode;
     fd->js_mode |= JS_MODE_STRICT;
@@ -23006,7 +23303,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
     } else {
         class_name1 = class_name;
     }
-    
+
     emit_op(s, OP_define_class);
     emit_atom(s, class_name1);
     emit_u8(s, class_flags);
@@ -23018,7 +23315,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
         cf->computed_fields_count = 0;
         cf->has_brand = FALSE;
     }
-    
+
     ctor_fd = NULL;
     while (s->token.val != '}') {
         if (s->token.val == ';') {
@@ -23048,7 +23345,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
         }
         is_private = prop_type & PROP_TYPE_PRIVATE;
         prop_type &= ~PROP_TYPE_PRIVATE;
-        
+
         if ((name == JS_ATOM_constructor && !is_static &&
              prop_type != PROP_TYPE_IDENT) ||
             (name == JS_ATOM_prototype && is_static) ||
@@ -23094,7 +23391,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
                 if (is_set) {
                     JSAtom setter_name;
                     int ret;
-                    
+
                     setter_name = get_private_setter_name(ctx, name);
                     if (setter_name == JS_ATOM_NULL)
                         goto fail;
@@ -23120,7 +23417,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
         } else if (prop_type == PROP_TYPE_IDENT && s->token.val != '(') {
             ClassFieldsDef *cf = &class_fields[is_static];
             JSAtom field_var_name = JS_ATOM_NULL;
-            
+
             /* class field */
 
             /* XXX: spec: not consistent with method name checks */
@@ -23128,7 +23425,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
                 js_parse_error(s, "invalid field name");
                 goto fail;
             }
-            
+
             if (is_private) {
                 if (find_private_class_field(ctx, fd, name,
                                              fd->scope_level) >= 0) {
@@ -23178,7 +23475,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
                 emit_atom(s, name);
                 emit_u16(s, s->cur_func->scope_level);
             }
-            
+
             if (s->token.val == '=') {
                 if (next_token(s))
                     goto fail;
@@ -23205,7 +23502,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
         } else {
             JSParseFunctionEnum func_type;
             JSFunctionKindEnum func_kind;
-            
+
             func_type = JS_PARSE_FUNC_METHOD;
             func_kind = JS_FUNC_NORMAL;
             if (prop_type == PROP_TYPE_STAR) {
@@ -23297,7 +23594,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
     {
         ClassFieldsDef *cf = &class_fields[0];
         int var_idx;
-        
+
         var_idx = define_var(s, fd, JS_ATOM_class_fields_init,
                              JS_VAR_DEF_CONST);
         if (var_idx < 0)
@@ -23324,7 +23621,7 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
         emit_u16(s, 0);
         emit_op(s, OP_drop);
     }
-    
+
     if (class_name != JS_ATOM_NULL) {
         /* store the class name in the scoped class name variable (it
            is independent from the class statement variable
@@ -23374,6 +23671,8 @@ static __exception int js_parse_class(JSParseState *s, BOOL is_class_expr,
     return -1;
 }
 
+static BOOL is_label(JSParseState *s);
+
 static __exception int js_parse_array_literal(JSParseState *s)
 {
     uint32_t idx;
@@ -23383,6 +23682,17 @@ static __exception int js_parse_array_literal(JSParseState *s)
         return -1;
     /* small regular arrays are created on the stack */
     idx = 0;
+
+    JSValue tag = JS_UNINITIALIZED;
+
+    if (s->token.val == TOK_IDENT && is_label(s)) {
+      tag = JS_AtomToString(s->ctx, s->token.u.ident.atom);
+      if (next_token(s))
+        return -1;
+      if (next_token(s))
+        return -1;
+    }
+
     while (s->token.val != ']' && idx < 32) {
         if (s->token.val == ',' || s->token.val == TOK_ELLIPSIS)
             break;
@@ -23496,7 +23806,13 @@ static __exception int js_parse_array_literal(JSParseState *s)
     } else {
         emit_op(s, OP_drop);    /* array length - array */
     }
-done:
+  done:
+    if (!JS_IsUninitialized(tag)) {
+      emit_push_const(s, tag, 0);
+      JS_FreeValue(s->ctx, tag);
+      emit_op(s, OP_define_field);
+      emit_atom(s, JS_ATOM_tag);
+    }
     return js_parse_expect(s, ']');
 }
 
@@ -23728,7 +24044,7 @@ static void put_lvalue(JSParseState *s, int opcode, int scope,
     default:
         break;
     }
-    
+
     switch(opcode) {
     case OP_scope_get_var:  /* val -- */
         assert(special == PUT_LVALUE_NOKEEP ||
@@ -23782,7 +24098,7 @@ static __exception int js_define_var(JSParseState *s, JSAtom name, int tok)
 {
     JSFunctionDef *fd = s->cur_func;
     JSVarDefEnum var_def_type;
-    
+
     if (name == JS_ATOM_yield && fd->func_kind == JS_FUNC_GENERATOR) {
         return js_parse_error(s, "yield is a reserved identifier");
     }
@@ -23893,7 +24209,7 @@ static int js_parse_destructuring_element(JSParseState *s, int tok, int is_arg,
     JSAtom prop_name, var_name;
     int opcode, scope, tok1, skip_bits;
     BOOL has_initializer;
-    
+
     if (has_ellipsis < 0) {
         /* pre-parse destructuration target for spread detection */
         js_parse_skip_parens_token(s, &skip_bits, FALSE);
@@ -24214,6 +24530,8 @@ static int js_parse_destructuring_element(JSParseState *s, int tok, int is_arg,
                         goto var_error;
                     opcode = OP_scope_get_var;
                     scope = s->cur_func->scope_level;
+                    label_lvalue = -1;
+                    depth_lvalue = 0;
                 } else {
                     if (js_parse_left_hand_side_expr(s))
                         return -1;
@@ -24326,13 +24644,17 @@ static void optional_chain_test(JSParseState *s, int *poptional_chaining_label,
     emit_label(s, label_next);
 }
 
+#ifdef CONFIG_JSX
+#include "quickjs-jsx.h"
+#endif
+
 /* allowed parse_flags: PF_POSTFIX_CALL, PF_ARROW_FUNC */
 static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags)
 {
     FuncCallType call_type;
     int optional_chaining_label;
     BOOL accept_lparen = (parse_flags & PF_POSTFIX_CALL) != 0;
-    
+
     call_type = FUNC_CALL_NORMAL;
     switch(s->token.val) {
     case TOK_NUMBER:
@@ -24388,7 +24710,7 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags)
         if (next_token(s))
             return -1;
         break;
-        
+
     case TOK_DIV_ASSIGN:
         s->buf_ptr -= 2;
         goto parse_regexp;
@@ -24472,6 +24794,33 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags)
             return -1;
         emit_op(s, OP_push_true);
         break;
+    case TOK___FILE__:
+      if (next_token(s))
+        return -1;
+      {
+        JSValue filename = JS_NewString(s->ctx, s->filename);
+        emit_push_const(s, filename, 0);
+        JS_FreeValue(s->ctx, filename);
+      }
+      break;
+    case TOK___DIR__:
+      if (next_token(s))
+        return -1;
+      {
+        int n = 0;
+        const char* pc = s->filename;
+        for (int i = 0; *pc; ++i, ++pc) {
+          if (*pc == '/') { n = i; }
+#ifdef _WIN32
+          else if (*pc == '\\') { n = i; }
+#endif // _WIN32
+          else if (*pc == '?' || *pc == '#') break;
+        }
+        JSValue dir = JS_NewStringLen(s->ctx, s->filename, n + 1);
+        emit_push_const(s, dir, 0);
+        JS_FreeValue(s->ctx, dir);
+      }
+      break;
     case TOK_IDENT:
         {
             JSAtom name;
@@ -24500,8 +24849,8 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags)
                         return -1;
                 } else if ((parse_flags & PF_ARROW_FUNC) &&
                            ((s->token.val == '(' &&
-                             js_parse_skip_parens_token(s, NULL, TRUE) == TOK_ARROW) ||
-                            (s->token.val == TOK_IDENT && !s->token.u.ident.is_reserved &&
+                            js_parse_skip_parens_token(s, NULL, TRUE) == TOK_ARROW) ||
+                           (s->token.val == TOK_IDENT && !s->token.u.ident.is_reserved &&
                              peek_token(s, TRUE) == TOK_ARROW))) {
                     if (js_parse_function_decl(s, JS_PARSE_FUNC_ARROW,
                                                JS_FUNC_ASYNC, JS_ATOM_NULL,
@@ -24545,6 +24894,12 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags)
             }
         }
         break;
+#ifdef CONFIG_JSX
+    case '<':
+        if (js_parse_jsx_expr(s,0))
+          return -1;
+        break;
+#endif
     case TOK_NEW:
         if (next_token(s))
             return -1;
@@ -24630,7 +24985,10 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags)
     for(;;) {
         JSFunctionDef *fd = s->cur_func;
         BOOL has_optional_chain = FALSE;
-        
+#ifdef CONFIG_OBJECT_LITERAL_CALL
+        BOOL object_literal_call = FALSE;
+#endif
+
         if (s->token.val == TOK_QUESTION_MARK_DOT) {
             /* optional chaining */
             if (next_token(s))
@@ -24650,9 +25008,15 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags)
             }
             call_type = FUNC_CALL_TEMPLATE;
             goto parse_func_call2;
-        } else if (s->token.val == '(' && accept_lparen) {
+        }
+#ifdef CONFIG_OBJECT_LITERAL_CALL
+        else if (s->token.val == '{' && (parse_flags & PF_ACCEPT_LCURLY)) {
+          object_literal_call = TRUE;
+          goto parse_func_call2;
+        }
+#endif
+        else if (s->token.val == '(' && accept_lparen) {
             int opcode, arg_count, drop_count;
-
             /* function call */
         parse_func_call:
             if (next_token(s))
@@ -24751,7 +25115,11 @@ static __exception int js_parse_postfix_expr(JSParseState *s, int parse_flags)
                     return -1;
                 arg_count++;
                 if (s->token.val == ')')
-                    break;
+                  break;
+#ifdef CONFIG_OBJECT_LITERAL_CALL
+                if (object_literal_call)
+                  break; /* foo {bar:1} - "object literal call" */
+#endif
                 /* accept a trailing comma before the ')' */
                 if (js_parse_expect(s, ','))
                     return -1;
@@ -25113,8 +25481,12 @@ static __exception int js_parse_unary(JSParseState *s, int parse_flags)
         parse_flags = 0;
         break;
     default:
-        if (js_parse_postfix_expr(s, (parse_flags & PF_ARROW_FUNC) |
-                                  PF_POSTFIX_CALL))
+        if (js_parse_postfix_expr(s, (parse_flags & PF_ARROW_FUNC)
+                                      | PF_POSTFIX_CALL
+#ifdef CONFIG_OBJECT_LITERAL_CALL
+                                      | PF_ACCEPT_LCURLY
+#endif
+        ))
             return -1;
         if (!s->got_lf &&
             (s->token.val == TOK_DEC || s->token.val == TOK_INC)) {
@@ -25127,7 +25499,7 @@ static __exception int js_parse_unary(JSParseState *s, int parse_flags)
             put_lvalue(s, opcode, scope, name, label, PUT_LVALUE_KEEP_SECOND,
                        FALSE);
             if (next_token(s))
-                return -1;        
+                return -1;
         }
         break;
     }
@@ -25364,7 +25736,7 @@ static __exception int js_parse_logical_and_or(JSParseState *s, int op,
 static __exception int js_parse_coalesce_expr(JSParseState *s, int parse_flags)
 {
     int label1;
-    
+
     if (js_parse_logical_and_or(s, TOK_LOR, parse_flags))
         return -1;
     if (s->token.val == TOK_DOUBLE_QUESTION_MARK) {
@@ -25372,12 +25744,12 @@ static __exception int js_parse_coalesce_expr(JSParseState *s, int parse_flags)
         for(;;) {
             if (next_token(s))
                 return -1;
-            
+
             emit_op(s, OP_dup);
             emit_op(s, OP_is_undefined_or_null);
             emit_goto(s, OP_if_false, label1);
             emit_op(s, OP_drop);
-            
+
             if (js_parse_expr_binary(s, 8, parse_flags & ~PF_ARROW_FUNC))
                 return -1;
             if (s->token.val != TOK_DOUBLE_QUESTION_MARK)
@@ -25457,27 +25829,27 @@ static __exception int js_parse_assign_expr2(JSParseState *s, int parse_flags)
             int label_return1, label_yield, label_throw, label_throw1;
             int label_throw2;
 
-            label_loop = new_label(s);
-            label_yield = new_label(s);
+                label_loop = new_label(s);
+                label_yield = new_label(s);
 
             emit_op(s, is_async ? OP_for_await_of_start : OP_for_of_start);
 
-            /* remove the catch offset (XXX: could avoid pushing back
-               undefined) */
-            emit_op(s, OP_drop);
-            emit_op(s, OP_undefined);
-            
-            emit_op(s, OP_undefined); /* initial value */
-            
-            emit_label(s, label_loop);
+                /* remove the catch offset (XXX: could avoid pushing back
+                   undefined) */
+                emit_op(s, OP_drop);
+                emit_op(s, OP_undefined);
+
+                emit_op(s, OP_undefined); /* initial value */
+
+                emit_label(s, label_loop);
             emit_op(s, OP_iterator_next);
             if (is_async)
                 emit_op(s, OP_await);
             emit_op(s, OP_iterator_check_object);
             emit_op(s, OP_get_field2);
             emit_atom(s, JS_ATOM_done);
-            label_next = emit_goto(s, OP_if_true, -1); /* end of loop */
-            emit_label(s, label_yield);
+                label_next = emit_goto(s, OP_if_true, -1); /* end of loop */
+                emit_label(s, label_yield);
             if (is_async) {
                 /* OP_async_yield_star takes the value as parameter */
                 emit_op(s, OP_get_field);
@@ -25488,77 +25860,77 @@ static __exception int js_parse_assign_expr2(JSParseState *s, int parse_flags)
                 /* OP_yield_star takes (value, done) as parameter */
                 emit_op(s, OP_yield_star);
             }
-            emit_op(s, OP_dup);
-            label_return = emit_goto(s, OP_if_true, -1);
-            emit_op(s, OP_drop);
-            emit_goto(s, OP_goto, label_loop);
-            
-            emit_label(s, label_return);
-            emit_op(s, OP_push_i32);
-            emit_u32(s, 2);
-            emit_op(s, OP_strict_eq);
-            label_throw = emit_goto(s, OP_if_true, -1);
-            
-            /* return handling */
+                emit_op(s, OP_dup);
+                label_return = emit_goto(s, OP_if_true, -1);
+                emit_op(s, OP_drop);
+                emit_goto(s, OP_goto, label_loop);
+
+                emit_label(s, label_return);
+                emit_op(s, OP_push_i32);
+                emit_u32(s, 2);
+                emit_op(s, OP_strict_eq);
+                label_throw = emit_goto(s, OP_if_true, -1);
+
+                /* return handling */
             if (is_async)
                 emit_op(s, OP_await);
             emit_op(s, OP_iterator_call);
-            emit_u8(s, 0);
-            label_return1 = emit_goto(s, OP_if_true, -1);
+                emit_u8(s, 0);
+                label_return1 = emit_goto(s, OP_if_true, -1);
             if (is_async)
                 emit_op(s, OP_await);
             emit_op(s, OP_iterator_check_object);
             emit_op(s, OP_get_field2);
             emit_atom(s, JS_ATOM_done);
-            emit_goto(s, OP_if_false, label_yield);
+                emit_goto(s, OP_if_false, label_yield);
 
             emit_op(s, OP_get_field);
             emit_atom(s, JS_ATOM_value);
             
-            emit_label(s, label_return1);
-            emit_op(s, OP_nip);
-            emit_op(s, OP_nip);
-            emit_op(s, OP_nip);
-            emit_return(s, TRUE);
-            
-            /* throw handling */
-            emit_label(s, label_throw);
+                emit_label(s, label_return1);
+                emit_op(s, OP_nip);
+                emit_op(s, OP_nip);
+                emit_op(s, OP_nip);
+                emit_return(s, TRUE);
+
+                /* throw handling */
+                emit_label(s, label_throw);
             emit_op(s, OP_iterator_call);
-            emit_u8(s, 1);
-            label_throw1 = emit_goto(s, OP_if_true, -1);
+                emit_u8(s, 1);
+                label_throw1 = emit_goto(s, OP_if_true, -1);
             if (is_async)
                 emit_op(s, OP_await);
             emit_op(s, OP_iterator_check_object);
             emit_op(s, OP_get_field2);
             emit_atom(s, JS_ATOM_done);
-            emit_goto(s, OP_if_false, label_yield);
-            emit_goto(s, OP_goto, label_next);
-            /* close the iterator and throw a type error exception */
-            emit_label(s, label_throw1);
+                emit_goto(s, OP_if_false, label_yield);
+                emit_goto(s, OP_goto, label_next);
+                /* close the iterator and throw a type error exception */
+                emit_label(s, label_throw1);
             emit_op(s, OP_iterator_call);
             emit_u8(s, 2);
-            label_throw2 = emit_goto(s, OP_if_true, -1);
+                label_throw2 = emit_goto(s, OP_if_true, -1);
             if (is_async)
                 emit_op(s, OP_await);
-            emit_label(s, label_throw2);
+                emit_label(s, label_throw2);
 
             emit_op(s, OP_throw_error);
             emit_atom(s, JS_ATOM_NULL);
             emit_u8(s, JS_THROW_ERROR_ITERATOR_THROW);
-            
-            emit_label(s, label_next);
+
+                emit_label(s, label_next);
             emit_op(s, OP_get_field);
             emit_atom(s, JS_ATOM_value);
-            emit_op(s, OP_nip); /* keep the value associated with
-                                   done = true */
-            emit_op(s, OP_nip);
-            emit_op(s, OP_nip);
-        } else {
+                emit_op(s, OP_nip); /* keep the value associated with
+                                       done = true */
+                emit_op(s, OP_nip);
+                emit_op(s, OP_nip);
+            } else {
             int label_next;
             
             if (is_async)
                 emit_op(s, OP_await);
-            emit_op(s, OP_yield);
+                emit_op(s, OP_yield);
             label_next = emit_goto(s, OP_if_false, -1);
             emit_return(s, TRUE);
             emit_label(s, label_next);
@@ -25610,7 +25982,7 @@ static __exception int js_parse_assign_expr2(JSParseState *s, int parse_flags)
         put_lvalue(s, opcode, scope, name, label, PUT_LVALUE_KEEP_TOP, FALSE);
     } else if (op >= TOK_LAND_ASSIGN && op <= TOK_DOUBLE_QUESTION_MARK_ASSIGN) {
         int label, label1, depth_lvalue, label2;
-        
+
         if (next_token(s))
             return -1;
         if (get_lvalue(s, &opcode, &scope, &name, &label,
@@ -25623,7 +25995,7 @@ static __exception int js_parse_assign_expr2(JSParseState *s, int parse_flags)
         label1 = emit_goto(s, op == TOK_LOR_ASSIGN ? OP_if_true : OP_if_false,
                            -1);
         emit_op(s, OP_drop);
-        
+
         if (js_parse_assign_expr2(s, parse_flags)) {
             JS_FreeAtom(s->ctx, name);
             return -1;
@@ -25632,7 +26004,7 @@ static __exception int js_parse_assign_expr2(JSParseState *s, int parse_flags)
         if (opcode == OP_get_ref_value && name == name0) {
             set_object_name(s, name);
         }
-        
+
         switch(depth_lvalue) {
         case 1:
             emit_op(s, OP_insert2);
@@ -25652,7 +26024,7 @@ static __exception int js_parse_assign_expr2(JSParseState *s, int parse_flags)
         put_lvalue(s, opcode, scope, name, label, PUT_LVALUE_NOKEEP_DEPTH,
                    FALSE);
         label2 = emit_goto(s, OP_goto, -1);
-        
+
         emit_label(s, label1);
 
         /* remove the lvalue stack entries */
@@ -26995,7 +27367,7 @@ static __exception int js_parse_statement_or_decl(JSParseState *s,
         if (js_parse_expect_semi(s))
             goto fail;
         break;
-        
+
     case TOK_ENUM:
     case TOK_EXPORT:
     case TOK_EXTENDS:
@@ -27312,7 +27684,7 @@ static JSModuleDef *js_find_loaded_module(JSContext *ctx, JSAtom name)
 {
     struct list_head *el;
     JSModuleDef *m;
-    
+
     /* first look at the loaded modules */
     list_for_each(el, &ctx->loaded_modules) {
         m = list_entry(el, JSModuleDef, link);
@@ -27377,7 +27749,7 @@ static JSModuleDef *js_host_resolve_imported_module_atom(JSContext *ctx,
 {
     const char *base_cname, *cname;
     JSModuleDef *m;
-    
+
     base_cname = JS_AtomToCString(ctx, base_module_name);
     if (!base_cname)
         return NULL;
@@ -27688,7 +28060,7 @@ static int exported_names_cmp(const void *p1, const void *p2, void *opaque)
 static JSValue js_get_module_ns(JSContext *ctx, JSModuleDef *m);
 
 static JSValue js_module_ns_autoinit(JSContext *ctx, JSObject *p, JSAtom atom,
-                                     void *opaque)
+                                 void *opaque)
 {
     JSModuleDef *m = opaque;
     return js_get_module_ns(ctx, m);
@@ -27915,7 +28287,7 @@ static int js_create_module_function(JSContext *ctx, JSModuleDef *m)
     BOOL is_c_module;
     int i;
     JSVarRef *var_ref;
-    
+
     if (m->func_created)
         return 0;
 
@@ -27939,7 +28311,7 @@ static int js_create_module_function(JSContext *ctx, JSModuleDef *m)
     m->func_created = TRUE;
 
     /* do it on the dependencies */
-    
+
     for(i = 0; i < m->req_module_entries_count; i++) {
         JSReqModuleEntry *rme = &m->req_module_entries[i];
         if (js_create_module_function(ctx, rme->module) < 0)
@@ -27947,9 +28319,9 @@ static int js_create_module_function(JSContext *ctx, JSModuleDef *m)
     }
 
     return 0;
-}    
+}
+
 
-    
 /* Prepare a module to be executed by resolving all the imported
    variables. */
 static int js_link_module(JSContext *ctx, JSModuleDef *m)
@@ -27961,7 +28333,7 @@ static int js_link_module(JSContext *ctx, JSModuleDef *m)
     JSObject *p;
     BOOL is_c_module;
     JSValue ret_val;
-    
+
     if (m->instantiated)
         return 0;
     m->instantiated = TRUE;
@@ -28162,7 +28534,7 @@ static JSValue js_import_meta(JSContext *ctx)
 {
     JSAtom filename;
     JSModuleDef *m;
-    
+
     filename = JS_GetScriptOrModuleName(ctx, 0);
     if (filename == JS_ATOM_NULL)
         goto fail;
@@ -28185,11 +28557,11 @@ JSModuleDef *JS_RunModule(JSContext *ctx, const char *basename,
 {
     JSModuleDef *m;
     JSValue ret, func_obj;
-    
+
     m = js_host_resolve_imported_module(ctx, basename, filename);
     if (!m)
         return NULL;
-    
+
     if (js_resolve_module(ctx, m) < 0) {
         js_free_modules(ctx, JS_FREE_MODULE_NOT_RESOLVED);
         return NULL;
@@ -28204,6 +28576,28 @@ JSModuleDef *JS_RunModule(JSContext *ctx, const char *basename,
     return m;
 }
 
+JSValue JS_GetModuleExportItem(JSContext *ctx, JSModuleDef *m, JSAtom atom)
+{
+  JSValue rv = JS_UNDEFINED;
+  for (int n = 0; n < m->export_entries_count; ++n)
+  {
+    JSExportEntry *me = &m->export_entries[n];
+    if (me->local_name == atom && me->export_type == JS_EXPORT_TYPE_LOCAL /*???*/) {
+      rv = me->u.local.var_ref->value;
+      break;
+    }
+  }
+  return JS_DupValue(ctx, rv);
+}
+
+JSValue JS_GetModuleExportItemStr(JSContext *ctx, JSModuleDef *m, const char *name)
+{
+  JSAtom atom = JS_NewAtom(ctx, name);
+  JSValue rv = JS_GetModuleExportItem(ctx, m, atom);
+  JS_FreeAtom(ctx, atom);
+  return rv;
+}
+
 static JSValue js_dynamic_import_job(JSContext *ctx,
                                      int argc, JSValueConst *argv)
 {
@@ -28225,7 +28619,7 @@ static JSValue js_dynamic_import_job(JSContext *ctx,
     filename = JS_ToCString(ctx, specifier);
     if (!filename)
         goto exception;
-                     
+
     m = JS_RunModule(ctx, basename, filename);
     JS_FreeCString(ctx, filename);
     if (!m)
@@ -28267,7 +28661,7 @@ static JSValue js_dynamic_import(JSContext *ctx, JSValueConst specifier)
     JS_FreeAtom(ctx, basename);
     if (JS_IsException(basename_val))
         return basename_val;
-    
+
     promise = JS_NewPromiseCapability(ctx, resolving_funcs);
     if (JS_IsException(promise)) {
         JS_FreeValue(ctx, basename_val);
@@ -28278,7 +28672,7 @@ static JSValue js_dynamic_import(JSContext *ctx, JSValueConst specifier)
     args[1] = resolving_funcs[1];
     args[2] = basename_val;
     args[3] = specifier;
-    
+
     JS_EnqueueJob(ctx, js_dynamic_import_job, 4, args);
 
     JS_FreeValue(ctx, basename_val);
@@ -28688,7 +29082,7 @@ static __exception int js_parse_source_element(JSParseState *s)
 {
     JSFunctionDef *fd = s->cur_func;
     int tok;
-    
+
     if (s->token.val == TOK_FUNCTION ||
         (token_is_pseudo_keyword(s, JS_ATOM_async) &&
          peek_token(s, TRUE) == TOK_FUNCTION)) {
@@ -28780,7 +29174,7 @@ static void free_bytecode_atoms(JSRuntime *rt,
     int pos, len, op;
     JSAtom atom;
     const JSOpCode *oi;
-    
+
     pos = 0;
     while (pos < bc_len) {
         op = bc_buf[pos];
@@ -28788,7 +29182,7 @@ static void free_bytecode_atoms(JSRuntime *rt,
             oi = &short_opcode_info(op);
         else
             oi = &opcode_info[op];
-            
+
         len = oi->size;
         switch(oi->fmt) {
         case OP_FMT_atom:
@@ -29621,7 +30015,7 @@ static int resolve_scope_var(JSContext *ctx, JSFunctionDef *s,
         /* argument scope: variables are not visible but pseudo
            variables are visible */
         if (!is_arg_scope) {
-            var_idx = find_var(ctx, s, var_name);
+        var_idx = find_var(ctx, s, var_name);
         }
 
         if (var_idx < 0 && is_pseudo_var)
@@ -29777,11 +30171,11 @@ static int resolve_scope_var(JSContext *ctx, JSFunctionDef *s,
         is_arg_scope = (idx == ARG_SCOPE_END);
         if (var_idx >= 0)
             break;
-        
+
         if (!is_arg_scope) {
-            var_idx = find_var(ctx, fd, var_name);
+        var_idx = find_var(ctx, fd, var_name);
             if (var_idx >= 0)
-                break;
+            break;
         }
         if (is_pseudo_var) {
             var_idx = resolve_pseudo_var(ctx, fd, var_name);
@@ -29821,7 +30215,7 @@ static int resolve_scope_var(JSContext *ctx, JSFunctionDef *s,
             dbuf_put_u16(bc, idx);
             var_object_test(ctx, s, var_name, op, bc, &label_done, 0);
         }
-        
+
         if (fd->is_eval)
             break; /* it it necessarily the top level function */
     }
@@ -30024,7 +30418,7 @@ static void get_loc_or_ref(DynBuf *bc, BOOL is_ref, int idx)
 {
     /* if the field is not initialized, the error is catched when
        accessing it */
-    if (is_ref) 
+    if (is_ref)
         dbuf_putc(bc, OP_get_var_ref);
     else
         dbuf_putc(bc, OP_get_loc);
@@ -30039,7 +30433,7 @@ static int resolve_scope_private_field1(JSContext *ctx,
     int idx, var_kind;
     JSFunctionDef *fd;
     BOOL is_ref;
-    
+
     fd = s;
     is_ref = FALSE;
     for(;;) {
@@ -30299,26 +30693,26 @@ static void add_eval_variables(JSContext *ctx, JSFunctionDef *s)
         }
         is_arg_scope = (scope_idx == ARG_SCOPE_END);
         if (!is_arg_scope) {
-            /* add unscoped variables */
-            for(i = 0; i < fd->arg_count; i++) {
-                vd = &fd->args[i];
-                if (vd->var_name != JS_ATOM_NULL) {
-                    get_closure_var(ctx, s, fd,
-                                    TRUE, i, vd->var_name, FALSE, FALSE,
-                                    JS_VAR_NORMAL);
-                }
-            }
-            for(i = 0; i < fd->var_count; i++) {
-                vd = &fd->vars[i];
-                /* do not close top level last result */
-                if (vd->scope_level == 0 &&
-                    vd->var_name != JS_ATOM__ret_ &&
-                    vd->var_name != JS_ATOM_NULL) {
-                    get_closure_var(ctx, s, fd,
-                                    FALSE, i, vd->var_name, FALSE, FALSE,
-                                    JS_VAR_NORMAL);
-                }
+        /* add unscoped variables */
+        for(i = 0; i < fd->arg_count; i++) {
+            vd = &fd->args[i];
+            if (vd->var_name != JS_ATOM_NULL) {
+                get_closure_var(ctx, s, fd,
+                                TRUE, i, vd->var_name, FALSE, FALSE,
+                                JS_VAR_NORMAL);
+            }
+        }
+        for(i = 0; i < fd->var_count; i++) {
+            vd = &fd->vars[i];
+            /* do not close top level last result */
+            if (vd->scope_level == 0 &&
+                vd->var_name != JS_ATOM__ret_ &&
+                vd->var_name != JS_ATOM_NULL) {
+                get_closure_var(ctx, s, fd,
+                                FALSE, i, vd->var_name, FALSE, FALSE,
+                                JS_VAR_NORMAL);
             }
+        }
         } else {
             for(i = 0; i < fd->var_count; i++) {
                 vd = &fd->vars[i];
@@ -30365,7 +30759,7 @@ static __exception int add_closure_variables(JSContext *ctx, JSFunctionDef *s,
     int i, count;
     JSVarDef *vd;
     BOOL is_arg_scope;
-    
+
     count = b->arg_count + b->var_count + b->closure_var_count;
     s->closure_var = NULL;
     s->closure_var_count = 0;
@@ -30386,23 +30780,23 @@ static __exception int add_closure_variables(JSContext *ctx, JSFunctionDef *s,
     }
     is_arg_scope = (i == ARG_SCOPE_END);
     if (!is_arg_scope) {
-        /* Add argument variables */
-        for(i = 0; i < b->arg_count; i++) {
+    /* Add argument variables */
+    for(i = 0; i < b->arg_count; i++) {
+        JSClosureVar *cv = &s->closure_var[s->closure_var_count++];
+        vd = &b->vardefs[i];
+        cv->is_local = TRUE;
+        cv->is_arg = TRUE;
+        cv->is_const = FALSE;
+        cv->is_lexical = FALSE;
+        cv->var_kind = JS_VAR_NORMAL;
+        cv->var_idx = i;
+        cv->var_name = JS_DupAtom(ctx, vd->var_name);
+    }
+    /* Add local non lexical variables */
+    for(i = 0; i < b->var_count; i++) {
+        vd = &b->vardefs[b->arg_count + i];
+        if (vd->scope_level == 0 && vd->var_name != JS_ATOM__ret_) {
             JSClosureVar *cv = &s->closure_var[s->closure_var_count++];
-            vd = &b->vardefs[i];
-            cv->is_local = TRUE;
-            cv->is_arg = TRUE;
-            cv->is_const = FALSE;
-            cv->is_lexical = FALSE;
-            cv->var_kind = JS_VAR_NORMAL;
-            cv->var_idx = i;
-            cv->var_name = JS_DupAtom(ctx, vd->var_name);
-        }
-        /* Add local non lexical variables */
-        for(i = 0; i < b->var_count; i++) {
-            vd = &b->vardefs[b->arg_count + i];
-            if (vd->scope_level == 0 && vd->var_name != JS_ATOM__ret_) {
-                JSClosureVar *cv = &s->closure_var[s->closure_var_count++];
                 set_closure_from_var(ctx, cv, vd, i);
             }
         }
@@ -30607,60 +31001,60 @@ static void instantiate_hoisted_definitions(JSContext *ctx, JSFunctionDef *s, Dy
         update_label(s, label_next, 1);
         s->jump_size++;
     }
-    
+
     /* add the global variables (only happens if s->is_global_var is
        true) */
     for(i = 0; i < s->global_var_count; i++) {
         JSGlobalVar *hf = &s->global_vars[i];
         int has_closure = 0;
         BOOL force_init = hf->force_init;
-        /* we are in an eval, so the closure contains all the
-           enclosing variables */
-        /* If the outer function has a variable environment,
-           create a property for the variable there */
-        for(idx = 0; idx < s->closure_var_count; idx++) {
-            JSClosureVar *cv = &s->closure_var[idx];
-            if (cv->var_name == hf->var_name) {
-                has_closure = 2;
-                force_init = FALSE;
-                break;
-            }
+            /* we are in an eval, so the closure contains all the
+               enclosing variables */
+            /* If the outer function has a variable environment,
+               create a property for the variable there */
+            for(idx = 0; idx < s->closure_var_count; idx++) {
+                JSClosureVar *cv = &s->closure_var[idx];
+                if (cv->var_name == hf->var_name) {
+                    has_closure = 2;
+                    force_init = FALSE;
+                    break;
+                }
             if (cv->var_name == JS_ATOM__var_ ||
                 cv->var_name == JS_ATOM__arg_var_) {
-                dbuf_putc(bc, OP_get_var_ref);
-                dbuf_put_u16(bc, idx);
-                has_closure = 1;
-                force_init = TRUE;
-                break;
+                    dbuf_putc(bc, OP_get_var_ref);
+                    dbuf_put_u16(bc, idx);
+                    has_closure = 1;
+                    force_init = TRUE;
+                    break;
+                }
             }
-        }
-        if (!has_closure) {
-            int flags;
-            
-            flags = 0;
-            if (s->eval_type != JS_EVAL_TYPE_GLOBAL)
-                flags |= JS_PROP_CONFIGURABLE;
-            if (hf->cpool_idx >= 0 && !hf->is_lexical) {
-                /* global function definitions need a specific handling */
-                dbuf_putc(bc, OP_fclosure);
-                dbuf_put_u32(bc, hf->cpool_idx);
-                
-                dbuf_putc(bc, OP_define_func);
-                dbuf_put_u32(bc, JS_DupAtom(ctx, hf->var_name));
-                dbuf_putc(bc, flags);
-                
+            if (!has_closure) {
+                int flags;
+
+                flags = 0;
+                if (s->eval_type != JS_EVAL_TYPE_GLOBAL)
+                    flags |= JS_PROP_CONFIGURABLE;
+                if (hf->cpool_idx >= 0 && !hf->is_lexical) {
+                    /* global function definitions need a specific handling */
+                    dbuf_putc(bc, OP_fclosure);
+                    dbuf_put_u32(bc, hf->cpool_idx);
+
+                    dbuf_putc(bc, OP_define_func);
+                    dbuf_put_u32(bc, JS_DupAtom(ctx, hf->var_name));
+                    dbuf_putc(bc, flags);
+
                 goto done_global_var;
-            } else {
-                if (hf->is_lexical) {
-                    flags |= DEFINE_GLOBAL_LEX_VAR;
-                    if (!hf->is_const)
-                        flags |= JS_PROP_WRITABLE;
+                } else {
+                    if (hf->is_lexical) {
+                        flags |= DEFINE_GLOBAL_LEX_VAR;
+                        if (!hf->is_const)
+                            flags |= JS_PROP_WRITABLE;
+                    }
+                    dbuf_putc(bc, OP_define_var);
+                    dbuf_put_u32(bc, JS_DupAtom(ctx, hf->var_name));
+                    dbuf_putc(bc, flags);
                 }
-                dbuf_putc(bc, OP_define_var);
-                dbuf_put_u32(bc, JS_DupAtom(ctx, hf->var_name));
-                dbuf_putc(bc, flags);
             }
-        }
         if (hf->cpool_idx >= 0 || force_init) {
             if (hf->cpool_idx >= 0) {
                 dbuf_putc(bc, OP_fclosure);
@@ -30673,19 +31067,19 @@ static void instantiate_hoisted_definitions(JSContext *ctx, JSFunctionDef *s, Dy
             } else {
                 dbuf_putc(bc, OP_undefined);
             }
-            if (has_closure == 2) {
-                dbuf_putc(bc, OP_put_var_ref);
-                dbuf_put_u16(bc, idx);
-            } else if (has_closure == 1) {
-                dbuf_putc(bc, OP_define_field);
-                dbuf_put_u32(bc, JS_DupAtom(ctx, hf->var_name));
-                dbuf_putc(bc, OP_drop);
-            } else {
-                /* XXX: Check if variable is writable and enumerable */
-                dbuf_putc(bc, OP_put_var);
-                dbuf_put_u32(bc, JS_DupAtom(ctx, hf->var_name));
+                if (has_closure == 2) {
+                    dbuf_putc(bc, OP_put_var_ref);
+                    dbuf_put_u16(bc, idx);
+                } else if (has_closure == 1) {
+                    dbuf_putc(bc, OP_define_field);
+                    dbuf_put_u32(bc, JS_DupAtom(ctx, hf->var_name));
+                    dbuf_putc(bc, OP_drop);
+                } else {
+                    /* XXX: Check if variable is writable and enumerable */
+                    dbuf_putc(bc, OP_put_var);
+                    dbuf_put_u32(bc, JS_DupAtom(ctx, hf->var_name));
+                }
             }
-        }
     done_global_var:
         JS_FreeAtom(ctx, hf->var_name);
     }
@@ -30796,40 +31190,40 @@ static __exception int resolve_variables(JSContext *ctx, JSFunctionDef *s)
        variables are created) */
     for(i = 0; i < s->global_var_count; i++) {
         JSGlobalVar *hf = &s->global_vars[i];
-        int flags;
-        
-        /* check if global variable (XXX: simplify) */
-        for(idx = 0; idx < s->closure_var_count; idx++) {
-            JSClosureVar *cv = &s->closure_var[idx];
-            if (cv->var_name == hf->var_name) {
-                if (s->eval_type == JS_EVAL_TYPE_DIRECT &&
-                    cv->is_lexical) {
-                    /* Check if a lexical variable is
-                       redefined as 'var'. XXX: Could abort
-                       compilation here, but for consistency
-                       with the other checks, we delay the
-                       error generation. */
+            int flags;
+
+                /* check if global variable (XXX: simplify) */
+                for(idx = 0; idx < s->closure_var_count; idx++) {
+                    JSClosureVar *cv = &s->closure_var[idx];
+                    if (cv->var_name == hf->var_name) {
+                        if (s->eval_type == JS_EVAL_TYPE_DIRECT &&
+                            cv->is_lexical) {
+                            /* Check if a lexical variable is
+                               redefined as 'var'. XXX: Could abort
+                               compilation here, but for consistency
+                               with the other checks, we delay the
+                               error generation. */
                     dbuf_putc(&bc_out, OP_throw_error);
-                    dbuf_put_u32(&bc_out, JS_DupAtom(ctx, hf->var_name));
-                    dbuf_putc(&bc_out, JS_THROW_VAR_REDECL);
-                }
-                goto next;
-            }
+                            dbuf_put_u32(&bc_out, JS_DupAtom(ctx, hf->var_name));
+                            dbuf_putc(&bc_out, JS_THROW_VAR_REDECL);
+                        }
+                        goto next;
+                    }
             if (cv->var_name == JS_ATOM__var_ ||
                 cv->var_name == JS_ATOM__arg_var_)
-                goto next;
+                        goto next;
+                }
+
+                dbuf_putc(&bc_out, OP_check_define_var);
+                dbuf_put_u32(&bc_out, JS_DupAtom(ctx, hf->var_name));
+                flags = 0;
+                if (hf->is_lexical)
+                    flags |= DEFINE_GLOBAL_LEX_VAR;
+                if (hf->cpool_idx >= 0)
+                    flags |= DEFINE_GLOBAL_FUNC_VAR;
+                dbuf_putc(&bc_out, flags);
+        next: ;
         }
-        
-        dbuf_putc(&bc_out, OP_check_define_var);
-        dbuf_put_u32(&bc_out, JS_DupAtom(ctx, hf->var_name));
-        flags = 0;
-        if (hf->is_lexical)
-            flags |= DEFINE_GLOBAL_LEX_VAR;
-        if (hf->cpool_idx >= 0)
-            flags |= DEFINE_GLOBAL_FUNC_VAR;
-        dbuf_putc(&bc_out, flags);
-    next: ;
-    }
 
     line_num = 0; /* avoid warning */
     for (pos = 0; pos < bc_len; pos = pos_next) {
@@ -31003,19 +31397,19 @@ static __exception int resolve_variables(JSContext *ctx, JSFunctionDef *s)
                     JSVarDef *vd = &s->vars[scope_idx];
                     if (vd->scope_level == scope) {
                         if (scope_idx != s->arguments_arg_idx) {
-                            if (vd->var_kind == JS_VAR_FUNCTION_DECL ||
-                                vd->var_kind == JS_VAR_NEW_FUNCTION_DECL) {
-                                /* Initialize lexical variable upon entering scope */
-                                dbuf_putc(&bc_out, OP_fclosure);
+                        if (vd->var_kind == JS_VAR_FUNCTION_DECL ||
+                            vd->var_kind == JS_VAR_NEW_FUNCTION_DECL) {
+                            /* Initialize lexical variable upon entering scope */
+                            dbuf_putc(&bc_out, OP_fclosure);
                                 dbuf_put_u32(&bc_out, vd->func_pool_idx);
-                                dbuf_putc(&bc_out, OP_put_loc);
-                                dbuf_put_u16(&bc_out, scope_idx);
-                            } else {
-                                /* XXX: should check if variable can be used
-                                   before initialization */
-                                dbuf_putc(&bc_out, OP_set_loc_uninitialized);
-                                dbuf_put_u16(&bc_out, scope_idx);
-                            }
+                            dbuf_putc(&bc_out, OP_put_loc);
+                            dbuf_put_u16(&bc_out, scope_idx);
+                        } else {
+                            /* XXX: should check if variable can be used
+                               before initialization */
+                            dbuf_putc(&bc_out, OP_set_loc_uninitialized);
+                            dbuf_put_u16(&bc_out, scope_idx);
+                        }
                         }
                         scope_idx = vd->scope_next;
                     } else {
@@ -31098,7 +31492,7 @@ static __exception int resolve_variables(JSContext *ctx, JSFunctionDef *s)
         case OP_set_class_name:
             /* only used during parsing */
             break;
-            
+
         default:
         no_change:
             dbuf_put(&bc_out, bc_buf + pos, len);
@@ -31447,11 +31841,19 @@ static __exception int resolve_labels(JSContext *ctx, JSFunctionDef *s)
         pos_next = pos + len;
         switch(op) {
         case OP_line_num:
+
+            line_num = get_u32(bc_buf + pos + 1);
+#ifdef CONFIG_DEBUGGER
+            if (ctx->debugger_enabled) /* under the debugger */
+              goto no_change; /* emit OP_line_num BC for the debugger's "break on line functionality" */
+            else
+              break; /* remove OP_line_num from BCs */
+#else 
             /* line number info (for debug). We put it in a separate
                compressed table to reduce memory usage and get better
                performance */
-            line_num = get_u32(bc_buf + pos + 1);
             break;
+#endif
 
         case OP_label:
             {
@@ -32237,7 +32639,7 @@ typedef struct StackSizeState {
 
 /* 'op' is only used for error indication */
 static __exception int ss_check(JSContext *ctx, StackSizeState *s,
-                                int pos, int op, int stack_len)
+                                              int pos, int op, int stack_len)
 {
     if ((unsigned)pos >= s->bc_len) {
         JS_ThrowInternalError(ctx, "bytecode buffer overflow (op=%d, pc=%d)", op, pos);
@@ -32250,16 +32652,16 @@ static __exception int ss_check(JSContext *ctx, StackSizeState *s,
             return -1;
         }
     }
-    if (s->stack_level_tab[pos] != 0xffff) {
-        /* already explored: check that the stack size is consistent */
-        if (s->stack_level_tab[pos] != stack_len) {
-            JS_ThrowInternalError(ctx, "unconsistent stack size: %d %d (pc=%d)",
-                                  s->stack_level_tab[pos], stack_len, pos);
-            return -1;
-        } else {
-            return 0;
+        if (s->stack_level_tab[pos] != 0xffff) {
+            /* already explored: check that the stack size is consistent */
+            if (s->stack_level_tab[pos] != stack_len) {
+                JS_ThrowInternalError(ctx, "unconsistent stack size: %d %d (pc=%d)",
+                                      s->stack_level_tab[pos], stack_len, pos);
+                return -1;
+            } else {
+                return 0;
+            }
         }
-    }
 
     /* mark as explored and store the stack size */
     s->stack_level_tab[pos] = stack_len;
@@ -32659,7 +33061,7 @@ static JSValue js_create_function(JSContext *ctx, JSFunctionDef *fd)
     b->realm = JS_DupContext(ctx);
 
     add_gc_object(ctx->rt, &b->header, JS_GC_OBJ_TYPE_FUNCTION_BYTECODE);
-    
+
 #if defined(DUMP_BYTECODE) && (DUMP_BYTECODE & 1)
     if (!(fd->js_mode & JS_MODE_STRIP)) {
         js_dump_function_bytecode(ctx, b);
@@ -32871,7 +33273,7 @@ duplicate:
 static JSFunctionDef *js_parse_function_class_fields_init(JSParseState *s)
 {
     JSFunctionDef *fd;
-    
+
     fd = js_new_function_def(s->ctx, s->cur_func, FALSE, FALSE,
                              s->filename, 0);
     if (!fd)
@@ -32879,7 +33281,7 @@ static JSFunctionDef *js_parse_function_class_fields_init(JSParseState *s)
     fd->func_name = JS_ATOM_NULL;
     fd->has_prototype = FALSE;
     fd->has_home_object = TRUE;
-    
+
     fd->has_arguments_binding = FALSE;
     fd->has_this_binding = TRUE;
     fd->is_derived_class_constructor = FALSE;
@@ -32887,7 +33289,7 @@ static JSFunctionDef *js_parse_function_class_fields_init(JSParseState *s)
     fd->super_call_allowed = FALSE;
     fd->super_allowed = fd->has_home_object;
     fd->arguments_allowed = FALSE;
-    
+
     fd->func_kind = JS_FUNC_NORMAL;
     fd->func_type = JS_PARSE_FUNC_METHOD;
     return fd;
@@ -33063,7 +33465,7 @@ static __exception int js_parse_function_decl2(JSParseState *s,
     if (func_type == JS_PARSE_FUNC_CLASS_CONSTRUCTOR) {
         emit_class_field_init(s);
     }
-    
+
     /* parse arguments */
     fd->has_simple_parameter_list = TRUE;
     fd->has_parameter_expressions = FALSE;
@@ -33089,8 +33491,8 @@ static __exception int js_parse_function_decl2(JSParseState *s,
             if (next_token(s))
                 goto fail;
         } else {
-            if (js_parse_expect(s, '('))
-                goto fail;
+        if (js_parse_expect(s, '('))
+            goto fail;
         }
 
         if (fd->has_parameter_expressions) {
@@ -33098,7 +33500,7 @@ static __exception int js_parse_function_decl2(JSParseState *s,
             if (push_scope(s) < 0)
                 return -1;
         }
-        
+
         while (s->token.val != ')') {
             JSAtom name;
             BOOL rest = FALSE;
@@ -33171,27 +33573,27 @@ static __exception int js_parse_function_decl2(JSParseState *s,
                         goto fail;
 
                     label = new_label(s);
-                    emit_op(s, OP_get_arg);
-                    emit_u16(s, idx);
+                        emit_op(s, OP_get_arg);
+                        emit_u16(s, idx);
                     emit_op(s, OP_dup);
-                    emit_op(s, OP_undefined);
-                    emit_op(s, OP_strict_eq);
-                    emit_goto(s, OP_if_false, label);
+                        emit_op(s, OP_undefined);
+                        emit_op(s, OP_strict_eq);
+                        emit_goto(s, OP_if_false, label);
                     emit_op(s, OP_drop);
                     if (js_parse_assign_expr(s))
-                        goto fail;
-                    set_object_name(s, name);
+                            goto fail;
+                        set_object_name(s, name);
                     emit_op(s, OP_dup);
-                    emit_op(s, OP_put_arg);
-                    emit_u16(s, idx);
-                    emit_label(s, label);
+                        emit_op(s, OP_put_arg);
+                        emit_u16(s, idx);
+                        emit_label(s, label);
                     emit_op(s, OP_scope_put_var_init);
                     emit_atom(s, name);
                     emit_u16(s, fd->scope_level);
                 } else {
                     if (!has_opt_arg) {
-                        fd->defined_arg_count++;
-                    }
+                    fd->defined_arg_count++;
+                }
                     if (fd->has_parameter_expressions) {
                         /* copy the argument to the argument scope */
                         emit_op(s, OP_get_arg);
@@ -33369,7 +33771,7 @@ done:
                     /* it is considered as defined at the top level
                        (needed for annex B.3.3.4 and B.3.3.5
                        checks) */
-                    hf->scope_level = 0; 
+                    hf->scope_level = 0;
                     hf->force_init = ((s->cur_func->js_mode & JS_MODE_STRICT) != 0);
                     /* store directly into global var, bypass lexical scope */
                     emit_op(s, OP_dup);
@@ -33497,16 +33899,16 @@ static __exception int js_parse_program(JSParseState *s)
 
 static void js_parse_init(JSContext *ctx, JSParseState *s,
                           const char *input, size_t input_len,
-                          const char *filename)
+                          const char *filename, int line_no)
 {
     memset(s, 0, sizeof(*s));
     s->ctx = ctx;
     s->filename = filename;
-    s->line_num = 1;
+    s->line_num = line_no;
     s->buf_ptr = (const uint8_t *)input;
     s->buf_end = s->buf_ptr + input_len;
     s->token.val = ' ';
-    s->token.line_num = 1;
+    s->token.line_num = line_no;
 }
 
 static JSValue JS_EvalFunctionInternal(JSContext *ctx, JSValue fun_obj,
@@ -33575,7 +33977,7 @@ static void skip_shebang(JSParseState *s)
 /* 'input' must be zero terminated i.e. input[input_len] = '\0'. */
 static JSValue __JS_EvalInternal(JSContext *ctx, JSValueConst this_obj,
                                  const char *input, size_t input_len,
-                                 const char *filename, int flags, int scope_idx)
+                                 const char *filename, int flags, int scope_idx, int line_no)
 {
     JSParseState s1, *s = &s1;
     int err, js_mode, eval_type;
@@ -33586,7 +33988,7 @@ static JSValue __JS_EvalInternal(JSContext *ctx, JSValueConst this_obj,
     JSFunctionDef *fd;
     JSModuleDef *m;
 
-    js_parse_init(ctx, s, input, input_len, filename);
+    js_parse_init(ctx, s, input, input_len, filename, line_no);
     skip_shebang(s);
 
     eval_type = flags & JS_EVAL_TYPE_MASK;
@@ -33650,7 +34052,7 @@ static JSValue __JS_EvalInternal(JSContext *ctx, JSValueConst this_obj,
 
     push_scope(s); /* body scope */
     fd->body_scope = fd->scope_level;
-    
+
     err = js_parse_program(s);
     if (err) {
     fail:
@@ -33686,13 +34088,13 @@ static JSValue __JS_EvalInternal(JSContext *ctx, JSValueConst this_obj,
 /* the indirection is needed to make 'eval' optional */
 static JSValue JS_EvalInternal(JSContext *ctx, JSValueConst this_obj,
                                const char *input, size_t input_len,
-                               const char *filename, int flags, int scope_idx)
+                               const char *filename, int flags, int scope_idx, int line_no)
 {
     if (unlikely(!ctx->eval_internal)) {
         return JS_ThrowTypeError(ctx, "eval is not supported");
     }
     return ctx->eval_internal(ctx, this_obj, input, input_len, filename,
-                              flags, scope_idx);
+                              flags, scope_idx, line_no);
 }
 
 static JSValue JS_EvalObject(JSContext *ctx, JSValueConst this_obj,
@@ -33707,7 +34109,7 @@ static JSValue JS_EvalObject(JSContext *ctx, JSValueConst this_obj,
     str = JS_ToCStringLen(ctx, &len, val);
     if (!str)
         return JS_EXCEPTION;
-    ret = JS_EvalInternal(ctx, this_obj, str, len, "<input>", flags, scope_idx);
+    ret = JS_EvalInternal(ctx, this_obj, str, len, "<input>", flags, scope_idx, 1);
     JS_FreeCString(ctx, str);
     return ret;
 
@@ -33715,7 +34117,7 @@ static JSValue JS_EvalObject(JSContext *ctx, JSValueConst this_obj,
 
 JSValue JS_EvalThis(JSContext *ctx, JSValueConst this_obj,
                     const char *input, size_t input_len,
-                    const char *filename, int eval_flags)
+                const char *filename, int eval_flags)
 {
     int eval_type = eval_flags & JS_EVAL_TYPE_MASK;
     JSValue ret;
@@ -33723,17 +34125,37 @@ JSValue JS_EvalThis(JSContext *ctx, JSValueConst this_obj,
     assert(eval_type == JS_EVAL_TYPE_GLOBAL ||
            eval_type == JS_EVAL_TYPE_MODULE);
     ret = JS_EvalInternal(ctx, this_obj, input, input_len, filename,
-                          eval_flags, -1);
+                          eval_flags, -1,1);
     return ret;
 }
 
 JSValue JS_Eval(JSContext *ctx, const char *input, size_t input_len,
                 const char *filename, int eval_flags)
 {
-    return JS_EvalThis(ctx, ctx->global_obj, input, input_len, filename,
-                       eval_flags);
+    int eval_type = eval_flags & JS_EVAL_TYPE_MASK;
+    JSValue ret;
+
+    assert(eval_type == JS_EVAL_TYPE_GLOBAL ||
+           eval_type == JS_EVAL_TYPE_MODULE);
+    ret = JS_EvalInternal(ctx, ctx->global_obj, input, input_len, filename,
+                          eval_flags, -1, 1);
+    return ret;
+}
+
+JSValue JS_Eval2(JSContext *ctx, const char *input, size_t input_len,
+  const char *filename, int eval_flags, int line_no)
+{
+  int eval_type = eval_flags & JS_EVAL_TYPE_MASK;
+  JSValue ret;
+
+  assert(eval_type == JS_EVAL_TYPE_GLOBAL ||
+    eval_type == JS_EVAL_TYPE_MODULE);
+  ret = JS_EvalInternal(ctx, ctx->global_obj, input, input_len, filename,
+    eval_flags, -1, line_no);
+  return ret;
 }
 
+
 int JS_ResolveModule(JSContext *ctx, JSValueConst obj)
 {
     if (JS_VALUE_GET_TAG(obj) == JS_TAG_MODULE) {
@@ -33785,13 +34207,13 @@ static int js_object_list_resize_hash(JSContext *ctx, JSObjectList *s,
     js_free(ctx, s->hash_table);
     s->hash_table = new_hash_table;
     s->hash_size = new_hash_size;
-    
+
     for(i = 0; i < s->hash_size; i++) {
         s->hash_table[i] = -1;
     }
     for(i = 0; i < s->object_count; i++) {
         e = &s->object_tab[i];
-        h = js_object_list_get_hash(e->obj, s->hash_size); 
+        h = js_object_list_get_hash(e->obj, s->hash_size);
         e->hash_next = s->hash_table[h];
         s->hash_table[h] = i;
     }
@@ -33804,7 +34226,7 @@ static int js_object_list_add(JSContext *ctx, JSObjectList *s, JSObject *obj)
 {
     JSObjectListEntry *e;
     uint32_t h, new_hash_size;
-    
+
     if (js_resize_array(ctx, (void *)&s->object_tab,
                         sizeof(s->object_tab[0]),
                         &s->object_size, s->object_count + 1))
@@ -33817,7 +34239,7 @@ static int js_object_list_add(JSContext *ctx, JSObjectList *s, JSObject *obj)
             return -1;
     }
     e = &s->object_tab[s->object_count++];
-    h = js_object_list_get_hash(obj, s->hash_size); 
+    h = js_object_list_get_hash(obj, s->hash_size);
     e->obj = obj;
     e->hash_next = s->hash_table[h];
     s->hash_table[h] = s->object_count - 1;
@@ -33833,7 +34255,7 @@ static int js_object_list_find(JSContext *ctx, JSObjectList *s, JSObject *obj)
     /* must test empty size because there is no hash table */
     if (s->object_count == 0)
         return -1;
-    h = js_object_list_get_hash(obj, s->hash_size); 
+    h = js_object_list_get_hash(obj, s->hash_size);
     p = s->hash_table[h];
     while (p != -1) {
         e = &s->object_tab[p];
@@ -34237,7 +34659,7 @@ static int JS_WriteBigNum(BCWriterState *s, JSValueConst obj)
             int bpos, d;
             uint8_t v8;
             size_t i0;
-            
+
             /* little endian BCD */
             i = 0;
             while (i < a->len && a->tab[i] == 0)
@@ -34257,7 +34679,7 @@ static int JS_WriteBigNum(BCWriterState *s, JSValueConst obj)
                 return -1;
             }
             bc_put_leb128(s, len);
-            
+
             bpos = 0;
             v8 = 0;
             i0 = i;
@@ -34295,7 +34717,7 @@ static int JS_WriteFunctionTag(BCWriterState *s, JSValueConst obj)
     JSFunctionBytecode *b = JS_VALUE_GET_PTR(obj);
     uint32_t flags;
     int idx, i;
-    
+
     bc_put_u8(s, BC_TAG_FUNCTION_BYTECODE);
     flags = idx = 0;
     bc_set_flags(&flags, &idx, b->has_prototype, 1);
@@ -34313,7 +34735,7 @@ static int JS_WriteFunctionTag(BCWriterState *s, JSValueConst obj)
     bc_put_u16(s, flags);
     bc_put_u8(s, b->js_mode);
     bc_put_atom(s, b->func_name);
-    
+
     bc_put_leb128(s, b->arg_count);
     bc_put_leb128(s, b->var_count);
     bc_put_leb128(s, b->defined_arg_count);
@@ -34340,7 +34762,7 @@ static int JS_WriteFunctionTag(BCWriterState *s, JSValueConst obj)
     } else {
         bc_put_leb128(s, 0);
     }
-    
+
     for(i = 0; i < b->closure_var_count; i++) {
         JSClosureVar *cv = &b->closure_var[i];
         bc_put_atom(s, cv->var_name);
@@ -34354,17 +34776,17 @@ static int JS_WriteFunctionTag(BCWriterState *s, JSValueConst obj)
         assert(idx <= 8);
         bc_put_u8(s, flags);
     }
-    
+
     if (JS_WriteFunctionBytecode(s, b->byte_code_buf, b->byte_code_len))
         goto fail;
-    
+
     if (b->has_debug) {
         bc_put_atom(s, b->debug.filename);
         bc_put_leb128(s, b->debug.line_num);
         bc_put_leb128(s, b->debug.pc2line_len);
         dbuf_put(&s->dbuf, b->debug.pc2line_buf, b->debug.pc2line_len);
     }
-    
+
     for(i = 0; i < b->cpool_count; i++) {
         if (JS_WriteObjectRec(s, b->cpool[i]))
             goto fail;
@@ -34378,16 +34800,16 @@ static int JS_WriteModule(BCWriterState *s, JSValueConst obj)
 {
     JSModuleDef *m = JS_VALUE_GET_PTR(obj);
     int i;
-    
+
     bc_put_u8(s, BC_TAG_MODULE);
     bc_put_atom(s, m->module_name);
-    
+
     bc_put_leb128(s, m->req_module_entries_count);
     for(i = 0; i < m->req_module_entries_count; i++) {
         JSReqModuleEntry *rme = &m->req_module_entries[i];
         bc_put_atom(s, rme->module_name);
     }
-    
+
     bc_put_leb128(s, m->export_entries_count);
     for(i = 0; i < m->export_entries_count; i++) {
         JSExportEntry *me = &m->export_entries[i];
@@ -34400,13 +34822,13 @@ static int JS_WriteModule(BCWriterState *s, JSValueConst obj)
         }
         bc_put_atom(s, me->export_name);
     }
-    
+
     bc_put_leb128(s, m->star_export_entries_count);
     for(i = 0; i < m->star_export_entries_count; i++) {
         JSStarExportEntry *se = &m->star_export_entries[i];
         bc_put_leb128(s, se->req_module_idx);
     }
-    
+
     bc_put_leb128(s, m->import_entries_count);
     for(i = 0; i < m->import_entries_count; i++) {
         JSImportEntry *mi = &m->import_entries[i];
@@ -34414,7 +34836,7 @@ static int JS_WriteModule(BCWriterState *s, JSValueConst obj)
         bc_put_atom(s, mi->import_name);
         bc_put_leb128(s, mi->req_module_idx);
     }
-    
+
     if (JS_WriteObjectRec(s, m->func_obj))
         goto fail;
     return 0;
@@ -34429,7 +34851,7 @@ static int JS_WriteArray(BCWriterState *s, JSValueConst obj)
     JSValue val;
     int ret;
     BOOL is_template;
-    
+
     if (s->allow_bytecode && !p->extensible) {
         /* not extensible array: we consider it is a
            template when we are saving bytecode */
@@ -34603,7 +35025,7 @@ static int JS_WriteObjectRec(BCWriterState *s, JSValueConst obj)
         {
             JSObject *p = JS_VALUE_GET_OBJ(obj);
             int ret, idx;
-            
+
             if (s->allow_reference) {
                 idx = js_object_list_find(s->ctx, &s->object_list, p);
                 if (idx >= 0) {
@@ -34744,7 +35166,7 @@ uint8_t *JS_WriteObject2(JSContext *ctx, size_t *psize, JSValueConst obj,
         s->first_atom = 1;
     js_dbuf_init(ctx, &s->dbuf);
     js_object_list_init(&s->object_list);
-    
+
     if (JS_WriteObjectRec(s, obj))
         goto fail;
     if (JS_WriteObjectAtoms(s))
@@ -34792,7 +35214,7 @@ typedef struct BCReaderState {
     JSObject **objects;
     int objects_count;
     int objects_size;
-    
+
 #ifdef DUMP_READ_OBJECT
     const uint8_t *ptr_last;
     int level;
@@ -34800,7 +35222,7 @@ typedef struct BCReaderState {
 } BCReaderState;
 
 #ifdef DUMP_READ_OBJECT
-static void __attribute__((format(printf, 2, 3))) bc_read_trace(BCReaderState *s, const char *fmt, ...) {
+static void __js_printf_like(2,3) bc_read_trace(BCReaderState *s, const char *fmt, ...) {
     va_list ap;
     int i, n, n0;
 
@@ -35077,7 +35499,7 @@ static JSValue JS_ReadBigNum(BCReaderState *s, int tag)
     limb_t v;
     bf_t *a;
     int bpos, d;
-    
+
     p = js_new_bf(s->ctx);
     if (!p)
         goto fail;
@@ -35289,7 +35711,7 @@ static JSValue JS_ReadFunctionTag(BCReaderState *s)
     b = js_mallocz(ctx, function_size);
     if (!b)
         return JS_EXCEPTION;
-            
+
     memcpy(b, &bc, offsetof(JSFunctionBytecode, debug));
     b->header.ref_count = 1;
     if (local_count != 0) {
@@ -35303,7 +35725,7 @@ static JSValue JS_ReadFunctionTag(BCReaderState *s)
     }
     
     add_gc_object(ctx->rt, &b->header, JS_GC_OBJ_TYPE_FUNCTION_BYTECODE);
-            
+
     obj = JS_MKPTR(JS_TAG_FUNCTION_BYTECODE, b);
 
 #ifdef DUMP_READ_OBJECT
@@ -35416,7 +35838,7 @@ static JSValue JS_ReadModule(BCReaderState *s)
     JSAtom module_name;
     int i;
     uint8_t v8;
-    
+
     if (bc_get_atom(s, &module_name))
         goto fail;
 #ifdef DUMP_READ_OBJECT
@@ -35517,7 +35939,7 @@ static JSValue JS_ReadObjectTag(BCReaderState *s)
     JSAtom atom;
     JSValue val;
     int ret;
-    
+
     obj = JS_NewObject(ctx);
     if (BC_add_object_ref(s, obj))
         goto fail;
@@ -35597,7 +36019,7 @@ static JSValue JS_ReadTypedArray(BCReaderState *s)
     uint8_t array_tag;
     JSValueConst args[3];
     uint32_t offset, len, idx;
-    
+
     if (bc_get_u8(s, &array_tag))
         return JS_EXCEPTION;
     if (array_tag >= JS_TYPED_ARRAY_COUNT)
@@ -35642,7 +36064,7 @@ static JSValue JS_ReadArrayBuffer(BCReaderState *s)
     JSContext *ctx = s->ctx;
     uint32_t byte_length;
     JSValue obj;
-    
+
     if (bc_get_leb128(s, &byte_length))
         return JS_EXCEPTION;
     if (unlikely(s->buf_end - s->ptr < byte_length)) {
@@ -35668,7 +36090,7 @@ static JSValue JS_ReadSharedArrayBuffer(BCReaderState *s)
     uint8_t *data_ptr;
     JSValue obj;
     uint64_t u64;
-    
+
     if (bc_get_leb128(s, &byte_length))
         return JS_EXCEPTION;
     if (bc_get_u64(s, &u64))
@@ -35715,6 +36137,13 @@ static JSValue JS_ReadDate(BCReaderState *s)
     return JS_EXCEPTION;
 }
 
+JSValue JS_NewDate(JSContext* ctx, double ms_1970) {
+  JSValue obj = JS_NewObjectProtoClass(ctx, ctx->class_proto[JS_CLASS_DATE], JS_CLASS_DATE);
+  if (!JS_IsException(obj))
+    JS_SetObjectData(ctx, obj, JS_NewFloat64(ctx,ms_1970));
+  return obj;
+}
+
 static JSValue JS_ReadObjectValue(BCReaderState *s)
 {
     JSContext *ctx = s->ctx;
@@ -35906,8 +36335,8 @@ static void bc_reader_free(BCReaderState *s)
     js_free(s->ctx, s->objects);
 }
 
-JSValue JS_ReadObject(JSContext *ctx, const uint8_t *buf, size_t buf_len,
-                       int flags)
+JSValue JS_ReadObject2(JSContext *ctx, const uint8_t *buf, size_t buf_len,
+                       int flags, size_t* premnants_len)
 {
     BCReaderState ss, *s = &ss;
     JSValue obj;
@@ -35933,10 +36362,19 @@ JSValue JS_ReadObject(JSContext *ctx, const uint8_t *buf, size_t buf_len,
     } else {
         obj = JS_ReadObjectRec(s);
     }
+    *premnants_len = s->buf_end - s->ptr;
     bc_reader_free(s);
     return obj;
 }
 
+JSValue JS_ReadObject(JSContext *ctx, const uint8_t *buf, size_t buf_len,
+  int flags)
+{
+  size_t dummy;
+  return JS_ReadObject2(ctx, buf, buf_len, flags, &dummy);
+}
+
+
 /*******************************************************************/
 /* runtime functions & objects */
 
@@ -35985,7 +36423,7 @@ static JSAtom find_atom(JSContext *ctx, const char *name)
 }
 
 static JSValue JS_InstantiateFunctionListItem2(JSContext *ctx, JSObject *p,
-                                               JSAtom atom, void *opaque)
+                                          JSAtom atom, void *opaque)
 {
     const JSCFunctionListEntry *e = opaque;
     JSValue val;
@@ -36039,7 +36477,7 @@ static int JS_InstantiateFunctionListItem(JSContext *ctx, JSValueConst obj,
             } else if (atom == JS_ATOM_Symbol_hasInstance) {
                 /* Function.prototype[Symbol.hasInstance] is not writable nor configurable */
                 prop_flags = 0;
-            }
+        }
         }
         break;
     case JS_DEF_CFUNC:
@@ -36178,7 +36616,7 @@ static void JS_SetConstructor2(JSContext *ctx,
     set_cycle_flag(ctx, proto);
 }
 
-void JS_SetConstructor(JSContext *ctx, JSValueConst func_obj, 
+void JS_SetConstructor(JSContext *ctx, JSValueConst func_obj,
                        JSValueConst proto)
 {
     JS_SetConstructor2(ctx, func_obj, proto,
@@ -36882,32 +37320,6 @@ static JSValue js_object_hasOwnProperty(JSContext *ctx, JSValueConst this_val,
         return JS_NewBool(ctx, ret);
 }
 
-static JSValue js_object_hasOwn(JSContext *ctx, JSValueConst this_val,
-                                int argc, JSValueConst *argv)
-{
-    JSValue obj;
-    JSAtom atom;
-    JSObject *p;
-    BOOL ret;
-
-    obj = JS_ToObject(ctx, argv[0]);
-    if (JS_IsException(obj))
-        return obj;
-    atom = JS_ValueToAtom(ctx, argv[1]);
-    if (unlikely(atom == JS_ATOM_NULL)) {
-        JS_FreeValue(ctx, obj);
-        return JS_EXCEPTION;
-    }
-    p = JS_VALUE_GET_OBJ(obj);
-    ret = JS_GetOwnPropertyInternal(ctx, NULL, p, atom);
-    JS_FreeAtom(ctx, atom);
-    JS_FreeValue(ctx, obj);
-    if (ret < 0)
-        return JS_EXCEPTION;
-    else
-        return JS_NewBool(ctx, ret);
-}
-
 static JSValue js_object_valueOf(JSContext *ctx, JSValueConst this_val,
                                  int argc, JSValueConst *argv)
 {
@@ -37021,7 +37433,7 @@ static JSValue js_object_seal(JSContext *ctx, JSValueConst this_val,
     if (!res) {
         return JS_ThrowTypeError(ctx, "proxy preventExtensions handler returned false");
     }
-    
+
     p = JS_VALUE_GET_OBJ(obj);
     flags = JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK;
     if (JS_GetOwnPropertyNamesInternal(ctx, &props, &len, p, flags))
@@ -37062,7 +37474,7 @@ static JSValue js_object_isSealed(JSContext *ctx, JSValueConst this_val,
     JSPropertyEnum *props;
     uint32_t len, i;
     int flags, res;
-    
+
     if (!JS_IsObject(obj))
         return JS_TRUE;
 
@@ -37091,7 +37503,7 @@ static JSValue js_object_isSealed(JSContext *ctx, JSValueConst this_val,
     if (res < 0)
         return JS_EXCEPTION;
     res ^= 1;
-done:        
+done:
     js_free_prop_enum(ctx, props, len);
     return JS_NewBool(ctx, res);
 
@@ -37114,14 +37526,14 @@ static JSValue js_object_fromEntries(JSContext *ctx, JSValueConst this_val,
     obj = JS_NewObject(ctx);
     if (JS_IsException(obj))
         return obj;
-    
+
     iter = JS_GetIterator(ctx, iterable, FALSE);
     if (JS_IsException(iter))
         goto fail;
     next_method = JS_GetProperty(ctx, iter, JS_ATOM_next);
     if (JS_IsException(next_method))
         goto fail;
-    
+
     for(;;) {
         JSValue key, value, item;
         item = JS_IteratorNext(ctx, iter, next_method, 0, NULL, &done);
@@ -37131,7 +37543,7 @@ static JSValue js_object_fromEntries(JSContext *ctx, JSValueConst this_val,
             JS_FreeValue(ctx, item);
             break;
         }
-        
+
         key = JS_UNDEFINED;
         value = JS_UNDEFINED;
         if (!JS_IsObject(item)) {
@@ -37480,7 +37892,6 @@ static const JSCFunctionListEntry js_object_funcs[] = {
     //JS_CFUNC_DEF("__getObjectData", 1, js_object___getObjectData ),
     //JS_CFUNC_DEF("__setObjectData", 2, js_object___setObjectData ),
     JS_CFUNC_DEF("fromEntries", 1, js_object_fromEntries ),
-    JS_CFUNC_DEF("hasOwn", 2, js_object_hasOwn ),
 };
 
 static const JSCFunctionListEntry js_object_proto_funcs[] = {
@@ -37516,7 +37927,7 @@ static JSValue js_function_constructor(JSContext *ctx, JSValueConst new_target,
 
     string_buffer_init(ctx, b, 0);
     string_buffer_putc8(b, '(');
-    
+
     if (func_kind == JS_FUNC_ASYNC || func_kind == JS_FUNC_ASYNC_GENERATOR) {
         string_buffer_puts8(b, "async ");
     }
@@ -37600,6 +38011,12 @@ static __exception int js_get_length64(JSContext *ctx, int64_t *pres,
     return JS_ToLengthFree(ctx, pres, len_val);
 }
 
+int JS_GetPropertyLength(JSContext *ctx, int64_t *pres, JSValueConst obj)
+{
+  return js_get_length64(ctx, pres, obj);
+}
+
+
 static void free_arg_list(JSContext *ctx, JSValue *tab, uint32_t len)
 {
     uint32_t i;
@@ -37849,7 +38266,7 @@ static JSValue iterator_to_array(JSContext *ctx, JSValueConst items)
     JSValue v, r = JS_UNDEFINED;
     int64_t k;
     BOOL done;
-    
+
     iter = JS_GetIterator(ctx, items, FALSE);
     if (JS_IsException(iter))
         goto exception;
@@ -37895,7 +38312,7 @@ static JSValue js_error_constructor(JSContext *ctx, JSValueConst new_target,
     if (!JS_IsObject(proto)) {
         JSContext *realm;
         JSValueConst proto1;
-        
+
         JS_FreeValue(ctx, proto);
         realm = JS_GetFunctionRealm(ctx, new_target);
         if (!realm)
@@ -37983,7 +38400,7 @@ static JSValue js_aggregate_error_constructor(JSContext *ctx,
                                               JSValueConst errors)
 {
     JSValue obj;
-    
+
     obj = JS_NewObjectProtoClass(ctx,
                                  ctx->native_error_proto[JS_AGGREGATE_ERROR],
                                  JS_CLASS_ERROR);
@@ -38000,20 +38417,12 @@ static int JS_CopySubArray(JSContext *ctx,
                            JSValueConst obj, int64_t to_pos,
                            int64_t from_pos, int64_t count, int dir)
 {
-    JSObject *p;
-    int64_t i, from, to, len;
+    int64_t i, from, to;
     JSValue val;
     int fromPresent;
 
-    p = NULL;
-    if (JS_VALUE_GET_TAG(obj) == JS_TAG_OBJECT) {
-        p = JS_VALUE_GET_OBJ(obj);
-        if (p->class_id != JS_CLASS_ARRAY || !p->fast_array) {
-            p = NULL;
-        }
-    }
-
-    for (i = 0; i < count; ) {
+    /* XXX: should special case fast arrays */
+    for (i = 0; i < count; i++) {
         if (dir < 0) {
             from = from_pos + count - i - 1;
             to = to_pos + count - i - 1;
@@ -38021,43 +38430,16 @@ static int JS_CopySubArray(JSContext *ctx,
             from = from_pos + i;
             to = to_pos + i;
         }
-        if (p && p->fast_array &&
-            from >= 0 && from < (len = p->u.array.count)  &&
-            to >= 0 && to < len) {
-            int64_t l, j;
-            /* Fast path for fast arrays. Since we don't look at the
-               prototype chain, we can optimize only the cases where
-               all the elements are present in the array. */
-            l = count - i;
-            if (dir < 0) {
-                l = min_int64(l, from + 1);
-                l = min_int64(l, to + 1);
-                for(j = 0; j < l; j++) {
-                    set_value(ctx, &p->u.array.u.values[to - j],
-                              JS_DupValue(ctx, p->u.array.u.values[from - j]));
-                }
-            } else {
-                l = min_int64(l, len - from);
-                l = min_int64(l, len - to);
-                for(j = 0; j < l; j++) {
-                    set_value(ctx, &p->u.array.u.values[to + j],
-                              JS_DupValue(ctx, p->u.array.u.values[from + j]));
-                }
-            }
-            i += l;
+        fromPresent = JS_TryGetPropertyInt64(ctx, obj, from, &val);
+        if (fromPresent < 0)
+            goto exception;
+
+        if (fromPresent) {
+            if (JS_SetPropertyInt64(ctx, obj, to, val) < 0)
+                goto exception;
         } else {
-            fromPresent = JS_TryGetPropertyInt64(ctx, obj, from, &val);
-            if (fromPresent < 0)
+            if (JS_DeletePropertyInt64(ctx, obj, to, JS_PROP_THROW) < 0)
                 goto exception;
-            
-            if (fromPresent) {
-                if (JS_SetPropertyInt64(ctx, obj, to, val) < 0)
-                    goto exception;
-            } else {
-                if (JS_DeletePropertyInt64(ctx, obj, to, JS_PROP_THROW) < 0)
-                    goto exception;
-            }
-            i++;
         }
     }
     return 0;
@@ -38245,6 +38627,18 @@ static JSValue js_array_isArray(JSContext *ctx, JSValueConst this_val,
         return JS_NewBool(ctx, ret);
 }
 
+static JSValue js_array_isTuple(JSContext *ctx, JSValueConst this_val,
+                                int argc, JSValueConst *argv)
+{
+    /* isArray and has tag property */
+    int ret;
+    ret = JS_IsTuple(ctx, argv[0]);
+    if (ret < 0)
+        return JS_EXCEPTION;
+    else
+        return JS_NewBool(ctx, ret);
+}
+
 static JSValue js_get_this(JSContext *ctx,
                            JSValueConst this_val)
 {
@@ -38257,7 +38651,7 @@ static JSValue JS_ArraySpeciesCreate(JSContext *ctx, JSValueConst obj,
     JSValue ctor, ret, species;
     int res;
     JSContext *realm;
-    
+
     res = JS_IsArray(ctx, obj);
     if (res < 0)
         return JS_EXCEPTION;
@@ -38299,6 +38693,7 @@ static JSValue JS_ArraySpeciesCreate(JSContext *ctx, JSValueConst obj,
 
 static const JSCFunctionListEntry js_array_funcs[] = {
     JS_CFUNC_DEF("isArray", 1, js_array_isArray ),
+    JS_CFUNC_DEF("isTuple", 1, js_array_isTuple),
     JS_CFUNC_DEF("from", 1, js_array_from ),
     JS_CFUNC_DEF("of", 0, js_array_of ),
     JS_CGETSET_DEF("[Symbol.species]", js_get_this, NULL ),
@@ -38422,7 +38817,7 @@ static JSValue js_array_every(JSContext *ctx, JSValueConst this_val,
     this_arg = JS_UNDEFINED;
     if (argc > 1)
         this_arg = argv[1];
-        
+
     if (check_function(ctx, func))
         goto exception;
 
@@ -38468,9 +38863,9 @@ static JSValue js_array_every(JSContext *ctx, JSValueConst this_val,
                 goto exception;
             present = TRUE;
         } else {
-            present = JS_TryGetPropertyInt64(ctx, obj, k, &val);
-            if (present < 0)
-                goto exception;
+        present = JS_TryGetPropertyInt64(ctx, obj, k, &val);
+        if (present < 0)
+            goto exception;
         }
         if (present) {
             index_val = JS_NewInt64(ctx, k);
@@ -38595,14 +38990,14 @@ static JSValue js_array_reduce(JSContext *ctx, JSValueConst this_val,
                     goto exception;
                 break;
             } else {
-                present = JS_TryGetPropertyInt64(ctx, obj, k1, &acc);
-                if (present < 0)
-                    goto exception;
-                if (present)
-                    break;
-            }
+            present = JS_TryGetPropertyInt64(ctx, obj, k1, &acc);
+            if (present < 0)
+                goto exception;
+            if (present)
+                break;
         }
     }
+    }
     for (; k < len; k++) {
         k1 = (special & special_reduceRight) ? len - k - 1 : k;
         if (special & special_TA) {
@@ -38611,9 +39006,9 @@ static JSValue js_array_reduce(JSContext *ctx, JSValueConst this_val,
                 goto exception;
             present = TRUE;
         } else {
-            present = JS_TryGetPropertyInt64(ctx, obj, k1, &val);
-            if (present < 0)
-                goto exception;
+        present = JS_TryGetPropertyInt64(ctx, obj, k1, &val);
+        if (present < 0)
+            goto exception;
         }
         if (present) {
             index_val = JS_NewInt64(ctx, k1);
@@ -38966,9 +39361,12 @@ static JSValue js_array_pop(JSContext *ctx, JSValueConst this_val,
     JSValue *arrp;
     uint32_t count32;
 
+    MARK_MODIFIED_VALUE(this_val);
+
     obj = JS_ToObject(ctx, this_val);
     if (js_get_length64(ctx, &len, obj))
         goto exception;
+   
     newLen = 0;
     if (len > 0) {
         newLen = len - 1;
@@ -39019,6 +39417,46 @@ static JSValue js_array_push(JSContext *ctx, JSValueConst this_val,
     int64_t len, from, newLen;
 
     obj = JS_ToObject(ctx, this_val);
+
+    if (JS_VALUE_GET_TAG(obj) == JS_TAG_OBJECT) {
+        JSObject *p = JS_VALUE_GET_OBJ(obj);
+
+        MARK_MODIFIED_OBJ(p);
+
+        if (p->class_id != JS_CLASS_ARRAY ||
+            !p->fast_array || !p->extensible)
+            goto generic_case;
+        /* length must be writable */
+        if (unlikely(!(get_shape_prop(p->shape)->flags & JS_PROP_WRITABLE)))
+            goto generic_case;
+        /* check the length */
+        if (unlikely(JS_VALUE_GET_TAG(p->prop[0].u.value) != JS_TAG_INT))
+            goto generic_case;
+        len = JS_VALUE_GET_INT(p->prop[0].u.value);
+        /* we don't support holes */
+        if (unlikely(len != p->u.array.count))
+            goto generic_case;
+        newLen = len + argc;
+        if (unlikely(newLen > INT32_MAX))
+            goto generic_case;
+        if (newLen > p->u.array.u1.size) {
+            if (expand_fast_array(ctx, p, newLen))
+                goto exception;
+        }
+        if (unshift && argc > 0) {
+            memmove(p->u.array.u.values + argc, p->u.array.u.values,
+                    len * sizeof(p->u.array.u.values[0]));
+            from = 0;
+        } else {
+            from = len;
+        }
+        for(i = 0; i < argc; i++) {
+            p->u.array.u.values[from + i] = JS_DupValue(ctx, argv[i]);
+        }
+        p->u.array.count = newLen;
+        p->prop[0].u.value = JS_NewInt32(ctx, newLen);
+    } else {
+    generic_case:
     if (js_get_length64(ctx, &len, obj))
         goto exception;
     newLen = len + argc;
@@ -39039,7 +39477,7 @@ static JSValue js_array_push(JSContext *ctx, JSValueConst this_val,
     }
     if (JS_SetProperty(ctx, obj, JS_ATOM_length, JS_NewInt64(ctx, newLen)) < 0)
         goto exception;
-
+    }
     JS_FreeValue(ctx, obj);
     return JS_NewInt64(ctx, newLen);
 
@@ -39057,6 +39495,8 @@ static JSValue js_array_reverse(JSContext *ctx, JSValueConst this_val,
     int l_present, h_present;
     uint32_t count32;
 
+    MARK_MODIFIED_VALUE(this_val);
+
     lval = JS_UNDEFINED;
     obj = JS_ToObject(ctx, this_val);
     if (js_get_length64(ctx, &len, obj))
@@ -39135,6 +39575,7 @@ static JSValue js_array_slice(JSContext *ctx, JSValueConst this_val,
         goto exception;
 
     if (splice) {
+        MARK_MODIFIED_VALUE(obj); 
         if (argc == 0) {
             item_count = 0;
             del_count = 0;
@@ -39230,6 +39671,8 @@ static JSValue js_array_copyWithin(JSContext *ctx, JSValueConst this_val,
     JSValue obj;
     int64_t len, from, to, final, count;
 
+    MARK_MODIFIED_VALUE(this_val);
+
     obj = JS_ToObject(ctx, this_val);
     if (js_get_length64(ctx, &len, obj))
         goto exception;
@@ -39451,6 +39894,8 @@ static JSValue js_array_sort(JSContext *ctx, JSValueConst this_val,
     int64_t i, len, undefined_count = 0;
     int present;
 
+    MARK_MODIFIED_VALUE(this_val);
+
     if (!JS_IsUndefined(asc.method)) {
         if (check_function(ctx, asc.method))
             goto exception;
@@ -40121,7 +40566,7 @@ static int js_string_define_own_property(JSContext *ctx,
     uint32_t idx;
     JSObject *p;
     JSString *p1, *p2;
-    
+
     if (__JS_AtomIsTaggedInt(prop)) {
         idx = __JS_AtomToUInt32(prop);
         p = JS_VALUE_GET_OBJ(this_obj);
@@ -40287,7 +40732,7 @@ static JSValue js_string_raw(JSContext *ctx, JSValueConst this_val,
         goto exception;
     if (js_get_length64(ctx, &n, raw) < 0)
         goto exception;
-        
+
     for (i = 0; i < n; i++) {
         val = JS_ToStringFree(ctx, JS_GetPropertyInt64(ctx, raw, i));
         if (JS_IsException(val))
@@ -40640,7 +41085,7 @@ static int check_regexp_g_flag(JSContext *ctx, JSValueConst regexp)
 {
     int ret;
     JSValue flags;
-    
+
     ret = js_is_regexp(ctx, regexp);
     if (ret < 0)
         return -1;
@@ -40772,18 +41217,18 @@ static JSValue js_string___GetSubstitution(JSContext *ctx, JSValueConst this_val
         } else if (c >= '0' && c <= '9') {
             k = c - '0';
             if (j < len) {
-                c1 = string_get(rp, j);
-                if (c1 >= '0' && c1 <= '9') {
-                    /* This behavior is specified in ES6 and refined in ECMA 2019 */
-                    /* ECMA 2019 does not have the extra test, but
-                       Test262 S15.5.4.11_A3_T1..3 require this behavior */
-                    k1 = k * 10 + c1 - '0';
-                    if (k1 >= 1 && k1 < captures_len) {
-                        k = k1;
-                        j++;
-                    }
+            c1 = string_get(rp, j);
+            if (c1 >= '0' && c1 <= '9') {
+                /* This behavior is specified in ES6 and refined in ECMA 2019 */
+                /* ECMA 2019 does not have the extra test, but
+                   Test262 S15.5.4.11_A3_T1..3 require this behavior */
+                k1 = k * 10 + c1 - '0';
+                if (k1 >= 1 && k1 < captures_len) {
+                    k = k1;
+                    j++;
                 }
             }
+            }
             if (k >= 1 && k < captures_len) {
                 s = JS_GetPropertyInt64(ctx, captures, k);
                 if (JS_IsException(s))
@@ -40914,7 +41359,7 @@ static JSValue js_string_replace(JSContext *ctx, JSValueConst this_val,
         }
         if (JS_IsException(repl_str))
             goto exception;
-        
+
         string_buffer_concat(b, sp, endOfLastMatch, pos);
         string_buffer_concat_value_free(b, repl_str);
         endOfLastMatch = pos + searchp->len;
@@ -41592,7 +42037,7 @@ static JSValue js_string_CreateHTML(JSContext *ctx, JSValueConst this_val,
     static struct { const char *tag, *attr; } const defs[] = {
         { "a", "name" }, { "big", NULL }, { "blink", NULL }, { "b", NULL },
         { "tt", NULL }, { "font", "color" }, { "font", "size" }, { "i", NULL },
-        { "a", "href" }, { "small", NULL }, { "strike", NULL }, 
+        { "a", "href" }, { "small", NULL }, { "strike", NULL },
         { "sub", NULL }, { "sup", NULL },
     };
 
@@ -41759,7 +42204,7 @@ static JSValue js_math_min_max(JSContext *ctx, JSValueConst this_val,
     uint32_t tag;
 
     if (unlikely(argc == 0)) {
-        return __JS_NewFloat64(ctx, is_max ? -1.0 / 0.0 : 1.0 / 0.0);
+        return __JS_NewFloat64(ctx, is_max ? -INFINITY : INFINITY);
     }
 
     tag = JS_VALUE_GET_TAG(argv[0]);
@@ -41931,12 +42376,15 @@ static JSValue js_math_random(JSContext *ctx, JSValueConst this_val,
     return __JS_NewFloat64(ctx, u.d - 1.0);
 }
 
+static double js_math_floor(double x) { return floor(x); }
+static double js_math_ceil(double x) { return ceil(x); }
+
 static const JSCFunctionListEntry js_math_funcs[] = {
     JS_CFUNC_MAGIC_DEF("min", 2, js_math_min_max, 0 ),
     JS_CFUNC_MAGIC_DEF("max", 2, js_math_min_max, 1 ),
     JS_CFUNC_SPECIAL_DEF("abs", 1, f_f, fabs ),
-    JS_CFUNC_SPECIAL_DEF("floor", 1, f_f, floor ),
-    JS_CFUNC_SPECIAL_DEF("ceil", 1, f_f, ceil ),
+    JS_CFUNC_SPECIAL_DEF("floor", 1, f_f, js_math_floor),
+    JS_CFUNC_SPECIAL_DEF("ceil", 1, f_f, js_math_ceil ),
     JS_CFUNC_SPECIAL_DEF("round", 1, f_f, js_math_round ),
     JS_CFUNC_SPECIAL_DEF("sqrt", 1, f_f, sqrt ),
 
@@ -42014,8 +42462,19 @@ static JSValue js___date_clock(JSContext *ctx, JSValueConst this_val,
    between UTC time and local time 'd' in minutes */
 static int getTimezoneOffset(int64_t time) {
 #if defined(_WIN32)
-    /* XXX: TODO */
-    return 0;
+  TIME_ZONE_INFORMATION tzi;
+  memset(&tzi, 0, sizeof(tzi));
+  DWORD ctz = GetTimeZoneInformation(&tzi);
+  int r = tzi.Bias; // in minutes
+  switch (ctz) {
+    case TIME_ZONE_ID_STANDARD:
+      r += tzi.StandardBias;
+      break;
+    case TIME_ZONE_ID_DAYLIGHT:
+      r += tzi.DaylightBias;
+      break;
+  }
+  return r;
 #else
     time_t ti;
     struct tm tm;
@@ -42392,7 +42851,7 @@ static JSValue js_regexp_get_source(JSContext *ctx, JSValueConst this_val)
     if (p->len == 0) {
     empty_regex:
         return JS_NewString(ctx, "(?:)");
-    }    
+    }
     string_buffer_init2(ctx, b, p->len, p->is_wide_char);
 
     /* Escape '/' and newline sequences as needed */
@@ -42451,7 +42910,7 @@ static JSValue js_regexp_get_flag(JSContext *ctx, JSValueConst this_val, int mas
         else
             return JS_ThrowTypeErrorInvalidClass(ctx, JS_CLASS_REGEXP);
     }
-    
+
     flags = lre_get_flags(re->bytecode->u.str8);
     return JS_NewBool(ctx, (flags & mask) != 0);
 }
@@ -42978,7 +43437,7 @@ static JSValue js_regexp_Symbol_matchAll(JSContext *ctx, JSValueConst this_val,
     JSString *strp;
     int64_t lastIndex;
     JSRegExpStringIteratorData *it;
-    
+
     if (!JS_IsObject(R))
         return JS_ThrowTypeErrorNotAnObject(ctx);
 
@@ -42986,7 +43445,7 @@ static JSValue js_regexp_Symbol_matchAll(JSContext *ctx, JSValueConst this_val,
     flags = JS_UNDEFINED;
     matcher = JS_UNDEFINED;
     iter = JS_UNDEFINED;
-    
+
     S = JS_ToString(ctx, argv[0]);
     if (JS_IsException(S))
         goto exception;
@@ -43007,7 +43466,7 @@ static JSValue js_regexp_Symbol_matchAll(JSContext *ctx, JSValueConst this_val,
     if (JS_SetProperty(ctx, matcher, JS_ATOM_lastIndex,
                        JS_NewInt64(ctx, lastIndex)) < 0)
         goto exception;
-    
+
     iter = JS_NewObjectClass(ctx, JS_CLASS_REGEXP_STRING_ITERATOR);
     if (JS_IsException(iter))
         goto exception;
@@ -43145,7 +43604,7 @@ static JSValue js_regexp_Symbol_replace(JSContext *ctx, JSValueConst this_val,
     str = JS_ToString(ctx, argv[0]);
     if (JS_IsException(str))
         goto exception;
-        
+
     sp = JS_VALUE_GET_STRING(str);
     rp = NULL;
     functionalReplace = JS_IsFunction(ctx, rep);
@@ -43336,7 +43795,7 @@ static JSValue js_regexp_Symbol_search(JSContext *ctx, JSValueConst this_val,
         if (JS_SetProperty(ctx, rx, JS_ATOM_lastIndex, previousLastIndex) < 0) {
             previousLastIndex = JS_UNDEFINED;
             goto exception;
-        }
+    }
     }
     JS_FreeValue(ctx, str);
     JS_FreeValue(ctx, currentLastIndex);
@@ -43424,7 +43883,7 @@ static JSValue js_regexp_Symbol_split(JSContext *ctx, JSValueConst this_val,
     while (q < size) {
         if (JS_SetProperty(ctx, splitter, JS_ATOM_lastIndex, JS_NewInt32(ctx, q)) < 0)
             goto exception;
-        JS_FreeValue(ctx, z);    
+        JS_FreeValue(ctx, z);
         z = JS_RegExpExec(ctx, splitter, str);
         if (JS_IsException(z))
             goto exception;
@@ -43479,7 +43938,7 @@ done:
     JS_FreeValue(ctx, ctor);
     JS_FreeValue(ctx, splitter);
     JS_FreeValue(ctx, flags);
-    JS_FreeValue(ctx, z);    
+    JS_FreeValue(ctx, z);
     return A;
 }
 
@@ -43564,7 +44023,7 @@ static JSValue json_parse_value(JSParseState *s)
         {
             JSValue prop_val;
             JSAtom prop_name;
-            
+
             if (json_next_token(s))
                 goto fail;
             val = JS_NewObject(ctx);
@@ -43686,7 +44145,7 @@ JSValue JS_ParseJSON2(JSContext *ctx, const char *buf, size_t buf_len,
     JSParseState s1, *s = &s1;
     JSValue val = JS_UNDEFINED;
 
-    js_parse_init(ctx, s, buf, buf_len, filename);
+    js_parse_init(ctx, s, buf, buf_len, filename, 1);
     s->ext_json = ((flags & JS_PARSE_JSON_EXT) != 0);
     if (json_next_token(s))
         goto fail;
@@ -43707,7 +44166,7 @@ JSValue JS_ParseJSON2(JSContext *ctx, const char *buf, size_t buf_len,
 JSValue JS_ParseJSON(JSContext *ctx, const char *buf, size_t buf_len,
                      const char *filename)
 {
-    return JS_ParseJSON2(ctx, buf, buf_len, filename, 0); 
+    return JS_ParseJSON2(ctx, buf, buf_len, filename, 0);
 }
 
 static JSValue internalize_json_property(JSContext *ctx, JSValueConst holder,
@@ -43900,7 +44359,7 @@ static int js_json_to_str(JSContext *ctx, JSONStringifyContext *jsc,
     int64_t i, len;
     int cl, ret;
     BOOL has_content;
-    
+
     indent1 = JS_UNDEFINED;
     sep = JS_UNDEFINED;
     sep1 = JS_UNDEFINED;
@@ -44075,7 +44534,7 @@ static int js_json_to_str(JSContext *ctx, JSONStringifyContext *jsc,
         JS_FreeValue(ctx, val);
         return 0;
     }
-    
+
 exception:
     JS_FreeValue(ctx, val);
     JS_FreeValue(ctx, tab);
@@ -44193,7 +44652,7 @@ JSValue JS_JSONStringify(JSContext *ctx, JSValueConst obj,
                                JS_DupValue(ctx, obj), JS_PROP_C_W_E) < 0)
         goto exception;
     val = JS_DupValue(ctx, obj);
-                           
+
     val = js_json_check(ctx, jsc, wrapper, val, jsc->empty);
     if (JS_IsException(val))
         goto exception;
@@ -44449,7 +44908,7 @@ static JSProxyData *get_proxy_method(JSContext *ctx, JSValue *pmethod,
         JS_ThrowStackOverflow(ctx);
         return NULL;
     }
-    
+
     /* 's' should never be NULL */
     if (s->is_revoked) {
         JS_ThrowTypeErrorRevokedProxy(ctx);
@@ -44848,7 +45307,7 @@ static int js_proxy_get_own_property(JSContext *ctx, JSPropertyDescriptor *pdesc
         JS_FreeValue(ctx, trap_result_obj);
         if (res < 0)
             return -1;
-        
+
         if (target_desc_ret) {
             /* convert result_desc.flags to defineProperty flags */
             flags1 = result_desc.flags | JS_PROP_HAS_CONFIGURABLE | JS_PROP_HAS_ENUMERABLE;
@@ -45213,7 +45672,7 @@ static JSValue js_proxy_call(JSContext *ctx, JSValueConst func_obj,
 
     if (flags & JS_CALL_FLAG_CONSTRUCTOR)
         return js_proxy_call_constructor(ctx, func_obj, this_obj, argc, argv);
-    
+
     s = get_proxy_method(ctx, &method, func_obj, JS_ATOM_apply);
     if (!s)
         return JS_EXCEPTION;
@@ -45798,7 +46257,7 @@ static void reset_weak_ref(JSRuntime *rt, JSObject *p)
 {
     JSMapRecord *mr, *mr_next;
     JSMapState *s;
-    
+
     /* first pass to remove the records from the WeakMap/WeakSet
        lists */
     for(mr = p->first_weak_ref; mr != NULL; mr = mr->next_weak_ref) {
@@ -45808,7 +46267,7 @@ static void reset_weak_ref(JSRuntime *rt, JSObject *p)
         list_del(&mr->hash_link);
         list_del(&mr->link);
     }
-    
+
     /* second pass to free the values to avoid modifying the weak
        reference list while traversing it. */
     for(mr = p->first_weak_ref; mr != NULL; mr = mr_next) {
@@ -46807,7 +47266,7 @@ static JSValue js_promise_all_resolve_element(JSContext *ctx,
     JSValueConst resolve_element_env = func_data[4];
     JSValue ret, obj;
     int is_zero, index;
-    
+
     if (JS_ToInt32(ctx, &index, func_data[1]))
         return JS_EXCEPTION;
     if (alreadyCalled)
@@ -46816,7 +47275,7 @@ static JSValue js_promise_all_resolve_element(JSContext *ctx,
 
     if (resolve_type == PROMISE_MAGIC_allSettled) {
         JSValue str;
-        
+
         obj = JS_NewObject(ctx);
         if (JS_IsException(obj))
             return JS_EXCEPTION;
@@ -46841,7 +47300,7 @@ static JSValue js_promise_all_resolve_element(JSContext *ctx,
     if (JS_DefinePropertyValueUint32(ctx, values, index,
                                      obj, JS_PROP_C_W_E) < 0)
         return JS_EXCEPTION;
-    
+
     is_zero = remainingElementsCount_add(ctx, resolve_element_env, -1);
     if (is_zero < 0)
         return JS_EXCEPTION;
@@ -46874,7 +47333,7 @@ static JSValue js_promise_all(JSContext *ctx, JSValueConst this_val,
     JSValueConst then_args[2], resolve_element_data[5];
     BOOL done;
     int index, is_zero, is_promise_any = (magic == PROMISE_MAGIC_any);
-    
+
     if (!JS_IsObject(this_val))
         return JS_ThrowTypeErrorNotAnObject(ctx);
     result_promise = js_new_promise_capability(ctx, resolving_funcs, this_val);
@@ -46910,7 +47369,7 @@ static JSValue js_promise_all(JSContext *ctx, JSValueConst this_val,
                                          JS_NewInt32(ctx, 1),
                                          JS_PROP_CONFIGURABLE | JS_PROP_ENUMERABLE | JS_PROP_WRITABLE) < 0)
             goto fail_reject;
-        
+
         index = 0;
         for(;;) {
             /* XXX: conformance: should close the iterator if error on 'done'
@@ -46920,7 +47379,7 @@ static JSValue js_promise_all(JSContext *ctx, JSValueConst this_val,
                 goto fail_reject;
             if (done)
                 break;
-            next_promise = JS_Call(ctx, promise_resolve, 
+            next_promise = JS_Call(ctx, promise_resolve,
                                    this_val, 1, (JSValueConst *)&item);
             JS_FreeValue(ctx, item);
             if (JS_IsException(next_promise)) {
@@ -46940,7 +47399,7 @@ static JSValue js_promise_all(JSContext *ctx, JSValueConst this_val,
                 JS_FreeValue(ctx, next_promise);
                 goto fail_reject1;
             }
-            
+
             if (magic == PROMISE_MAGIC_allSettled) {
                 reject_element =
                     JS_NewCFunctionData(ctx, js_promise_all_resolve_element, 1,
@@ -47593,7 +48052,7 @@ static int isURIReserved(int c) {
     return c < 0x100 && memchr(";/?:@&=+$,#", c, sizeof(";/?:@&=+$,#") - 1) != NULL;
 }
 
-static int __attribute__((format(printf, 2, 3))) js_throw_URIError(JSContext *ctx, const char *fmt, ...)
+static int __js_printf_like(2,3) js_throw_URIError(JSContext *ctx, const char *fmt, ...)
 {
     va_list ap;
 
@@ -47866,7 +48325,7 @@ static const JSCFunctionListEntry js_global_funcs[] = {
     JS_CFUNC_MAGIC_DEF("encodeURIComponent", 1, js_global_encodeURI, 1 ),
     JS_CFUNC_DEF("escape", 1, js_global_escape ),
     JS_CFUNC_DEF("unescape", 1, js_global_unescape ),
-    JS_PROP_DOUBLE_DEF("Infinity", 1.0 / 0.0, 0 ),
+    JS_PROP_DOUBLE_DEF("Infinity", INFINITY, 0 ),
     JS_PROP_DOUBLE_DEF("NaN", NAN, 0 ),
     JS_PROP_UNDEFINED_DEF("undefined", 0 ),
 
@@ -47894,7 +48353,7 @@ static int64_t floor_div(int64_t a, int64_t b) {
 static JSValue js_Date_parse(JSContext *ctx, JSValueConst this_val,
                              int argc, JSValueConst *argv);
 
-static __exception int JS_ThisTimeValue(JSContext *ctx, double *valp, JSValueConst this_val)
+__exception int JS_ThisTimeValue(JSContext *ctx, double *valp, JSValueConst this_val)
 {
     if (JS_VALUE_GET_TAG(this_val) == JS_TAG_OBJECT) {
         JSObject *p = JS_VALUE_GET_OBJ(this_val);
@@ -48020,7 +48479,7 @@ static double set_date_fields(double fields[], int is_local) {
     int64_t y;
     double days, d, h, m1;
     int i, m, md;
-    
+
     m1 = fields[1];
     m = fmod(m1, 12);
     if (m < 0)
@@ -48333,7 +48792,7 @@ static void string_skip_non_spaces(JSString *sp, int *pp) {
 static int string_get_digits(JSString *sp, int *pp, int64_t *pval) {
     int64_t v = 0;
     int c, p = *pp, p_start;
-    
+
     if (p >= sp->len)
         return -1;
     p_start = p;
@@ -48343,7 +48802,7 @@ static int string_get_digits(JSString *sp, int *pp, int64_t *pval) {
             if (p == p_start)
                 return -1;
             else
-                break;
+            break;
         }
         v = v * 10 + c - '0';
         p++;
@@ -48456,13 +48915,13 @@ static JSValue js_Date_parse(JSContext *ctx, JSValueConst this_val,
     int p, i, c, sgn, l;
     JSString *sp;
     BOOL is_local;
-    
+
     rv = JS_NAN;
 
     s = JS_ToString(ctx, argv[0]);
     if (JS_IsException(s))
         return JS_EXCEPTION;
-    
+
     sp = JS_VALUE_GET_STRING(s);
     p = 0;
     if (p < sp->len && (((c = string_get(sp, p)) >= '0' && c <= '9') || c == '+' || c == '-')) {
@@ -48489,9 +48948,9 @@ static JSValue js_Date_parse(JSContext *ctx, JSValueConst this_val,
             case 6:
                 c = '.';
                 break;
-            }
+        }
             if (string_get(sp, p) != c)
-                break;
+                    break;
             p++;
             if (i == 6) {
                 if (string_get_milliseconds(sp, &p, &fields[i]))
@@ -48826,7 +49285,7 @@ static void js_operator_set_finalizer(JSRuntime *rt, JSValue val)
     JSOperatorSetData *opset = JS_GetOpaque(val, JS_CLASS_OPERATOR_SET);
     int i, j;
     JSBinaryOperatorDefEntry *ent;
-    
+
     if (opset) {
         for(i = 0; i < JS_OVOP_COUNT; i++) {
             if (opset->self_ops[i])
@@ -48858,7 +49317,7 @@ static void js_operator_set_mark(JSRuntime *rt, JSValueConst val,
     JSOperatorSetData *opset = JS_GetOpaque(val, JS_CLASS_OPERATOR_SET);
     int i, j;
     JSBinaryOperatorDefEntry *ent;
-    
+
     if (opset) {
         for(i = 0; i < JS_OVOP_COUNT; i++) {
             if (opset->self_ops[i])
@@ -48958,7 +49417,7 @@ static JSValue js_operators_create_internal(JSContext *ctx,
         }
         op_count = opset1->operator_counter;
         JS_FreeValue(ctx, prop);
-        
+
         /* we assume there are few entries */
         new_tab = js_realloc(ctx, def->tab,
                              (def->count + 1) * sizeof(def->tab[0]));
@@ -48969,7 +49428,7 @@ static JSValue js_operators_create_internal(JSContext *ctx,
         ent = def->tab + def->count - 1;
         memset(ent, 0, sizeof(def->tab[0]));
         ent->operator_index = op_count;
-        
+
         for(i = 0; i < JS_OVOP_BINARY_COUNT; i++) {
             prop = JS_GetPropertyStr(ctx, arg,
                                      js_overloadable_operator_names[i]);
@@ -49006,7 +49465,7 @@ static JSValue js_operators_updateBigIntOperators(JSContext *ctx, JSValueConst t
     const JSOverloadableOperatorEnum ops[2] = { JS_OVOP_DIV, JS_OVOP_POW };
     JSOverloadableOperatorEnum op;
     int i;
-    
+
     opset_obj = JS_GetProperty(ctx, ctx->class_proto[JS_CLASS_BIG_INT],
                                JS_ATOM_Symbol_operatorSet);
     if (JS_IsException(opset_obj))
@@ -49136,7 +49595,7 @@ static JSValue JS_ToBigIntCtorFree(JSContext *ctx, JSValue val)
     case JS_TAG_BIG_FLOAT:
         {
             bf_t *a, a_s;
-            
+
             a = JS_ToBigFloat(ctx, &a_s, val);
             if (!bf_is_finite(a)) {
                 JS_FreeValue(ctx, val);
@@ -49251,7 +49710,7 @@ static JSValue js_bigint_div(JSContext *ctx,
     bf_t a_s, b_s, *a, *b, *r, *q;
     int status;
     JSValue q_val, r_val;
-    
+
     q_val = JS_NewBigInt(ctx);
     if (JS_IsException(q_val))
         return JS_EXCEPTION;
@@ -49302,7 +49761,7 @@ static JSValue js_bigint_sqrt(JSContext *ctx,
     bf_t a_s, *a, *r, *rem;
     int status;
     JSValue r_val, rem_val;
-    
+
     r_val = JS_NewBigInt(ctx);
     if (JS_IsException(r_val))
         return JS_EXCEPTION;
@@ -49380,7 +49839,7 @@ static JSValue js_bigint_asUintN(JSContext *ctx,
     uint64_t bits;
     bf_t a_s, *a = &a_s, *r, mask_s, *mask = &mask_s;
     JSValue res;
-    
+
     if (JS_ToIndex(ctx, &bits, argv[0]))
         return JS_EXCEPTION;
     res = JS_NewBigInt(ctx);
@@ -49447,13 +49906,13 @@ void JS_AddIntrinsicBigInt(JSContext *ctx)
     rt->bigint_ops.unary_arith = js_unary_arith_bigint;
     rt->bigint_ops.binary_arith = js_binary_arith_bigint;
     rt->bigint_ops.compare = js_compare_bigfloat;
-    
+
     ctx->class_proto[JS_CLASS_BIG_INT] = JS_NewObject(ctx);
     JS_SetPropertyFunctionList(ctx, ctx->class_proto[JS_CLASS_BIG_INT],
                                js_bigint_proto_funcs,
                                countof(js_bigint_proto_funcs));
     obj1 = JS_NewGlobalCConstructor(ctx, "BigInt", js_bigint_constructor, 1,
-                                    ctx->class_proto[JS_CLASS_BIG_INT]);
+                              ctx->class_proto[JS_CLASS_BIG_INT]);
     JS_SetPropertyFunctionList(ctx, obj1, js_bigint_funcs,
                                countof(js_bigint_funcs));
 }
@@ -49872,7 +50331,7 @@ static JSValue js_bigfloat_isFinite(JSContext *ctx, JSValueConst this_val,
 {
     JSValueConst val = argv[0];
     JSBigFloat *p;
-    
+
     if (JS_VALUE_GET_NORM_TAG(val) != JS_TAG_BIG_FLOAT)
         return JS_FALSE;
     p = JS_VALUE_GET_PTR(val);
@@ -49884,7 +50343,7 @@ static JSValue js_bigfloat_isNaN(JSContext *ctx, JSValueConst this_val,
 {
     JSValueConst val = argv[0];
     JSBigFloat *p;
-    
+
     if (JS_VALUE_GET_NORM_TAG(val) != JS_TAG_BIG_FLOAT)
         return JS_FALSE;
     p = JS_VALUE_GET_PTR(val);
@@ -50338,7 +50797,7 @@ void JS_AddIntrinsicBigFloat(JSContext *ctx)
 {
     JSRuntime *rt = ctx->rt;
     JSValueConst obj1;
-    
+
     rt->bigfloat_ops.to_string = js_bigfloat_to_string;
     rt->bigfloat_ops.from_string = js_string_to_bigfloat;
     rt->bigfloat_ops.unary_arith = js_unary_arith_bigfloat;
@@ -50346,13 +50805,13 @@ void JS_AddIntrinsicBigFloat(JSContext *ctx)
     rt->bigfloat_ops.compare = js_compare_bigfloat;
     rt->bigfloat_ops.mul_pow10_to_float64 = js_mul_pow10_to_float64;
     rt->bigfloat_ops.mul_pow10 = js_mul_pow10;
-    
+
     ctx->class_proto[JS_CLASS_BIG_FLOAT] = JS_NewObject(ctx);
     JS_SetPropertyFunctionList(ctx, ctx->class_proto[JS_CLASS_BIG_FLOAT],
                                js_bigfloat_proto_funcs,
                                countof(js_bigfloat_proto_funcs));
     obj1 = JS_NewGlobalCConstructor(ctx, "BigFloat", js_bigfloat_constructor, 1,
-                                    ctx->class_proto[JS_CLASS_BIG_FLOAT]);
+                              ctx->class_proto[JS_CLASS_BIG_FLOAT]);
     JS_SetPropertyFunctionList(ctx, obj1, js_bigfloat_funcs,
                                countof(js_bigfloat_funcs));
 
@@ -50522,7 +50981,7 @@ static int js_bigdecimal_get_rnd_mode(JSContext *ctx, JSValueConst obj)
     const char *str;
     size_t size;
     int rnd_mode;
-    
+
     str = JS_ToCStringLen(ctx, &size, obj);
     if (!str)
         return -1;
@@ -50562,7 +51021,7 @@ static int js_bigdecimal_get_env(JSContext *ctx, BigDecimalEnv *fe,
     int64_t val;
     BOOL has_prec;
     int rnd_mode;
-    
+
     if (!JS_IsObject(obj)) {
         JS_ThrowTypeErrorNotAnObject(ctx);
         return -1;
@@ -50575,7 +51034,7 @@ static int js_bigdecimal_get_env(JSContext *ctx, BigDecimalEnv *fe,
     if (rnd_mode < 0)
         return -1;
     fe->flags = rnd_mode;
-    
+
     prop = JS_GetProperty(ctx, obj, JS_ATOM_maximumSignificantDigits);
     if (JS_IsException(prop))
         return -1;
@@ -50630,7 +51089,7 @@ static JSValue js_bigdecimal_fop(JSContext *ctx, JSValueConst this_val,
         op_count = 1;
     else
         op_count = 2;
-    
+
     op1 = JS_ToNumeric(ctx, argv[0]);
     if (JS_IsException(op1))
         return op1;
@@ -50841,7 +51300,7 @@ void JS_AddIntrinsicBigDecimal(JSContext *ctx)
                                countof(js_bigdecimal_proto_funcs));
     obj1 = JS_NewGlobalCConstructor(ctx, "BigDecimal",
                                     js_bigdecimal_constructor, 1,
-                                    ctx->class_proto[JS_CLASS_BIG_DECIMAL]);
+                              ctx->class_proto[JS_CLASS_BIG_DECIMAL]);
     JS_SetPropertyFunctionList(ctx, obj1, js_bigdecimal_funcs,
                                countof(js_bigdecimal_funcs));
 }
@@ -51428,9 +51887,35 @@ static JSValue js_array_buffer_slice(JSContext *ctx,
     return JS_EXCEPTION;
 }
 
+static JSValue js_array_buffer_compare(JSContext *ctx,
+  JSValueConst this_val,
+  int argc, JSValueConst *argv) 
+{
+  if (argc == 0) {
+  TYPE_ERROR:
+    JS_ThrowTypeError(ctx, "ArrayBuffer expected");
+    return JS_EXCEPTION;
+  }
+
+  size_t sizet;
+  uint8_t *pt = JS_GetArrayBuffer(ctx, &sizet, this_val);
+  if (!pt) goto TYPE_ERROR;
+
+  size_t size;
+  uint8_t *p = JS_GetArrayBuffer(ctx, &size, argv[0]);
+  if (!p) goto TYPE_ERROR;
+
+  if (sizet < size) return JS_NewInt32(ctx, -1);
+  if (sizet > size) return JS_NewInt32(ctx, 1);
+
+  return JS_NewInt32(ctx, memcmp(pt, p, size));
+
+}
+
 static const JSCFunctionListEntry js_array_buffer_proto_funcs[] = {
     JS_CGETSET_MAGIC_DEF("byteLength", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER ),
     JS_CFUNC_MAGIC_DEF("slice", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER ),
+    JS_CFUNC_DEF("compare", 1, js_array_buffer_compare),
     JS_PROP_STRING_DEF("[Symbol.toStringTag]", "ArrayBuffer", JS_PROP_CONFIGURABLE ),
 };
 
@@ -51587,7 +52072,7 @@ JSValue JS_GetTypedArrayBuffer(JSContext *ctx, JSValueConst obj,
     }
     return JS_DupValue(ctx, JS_MKPTR(JS_TAG_OBJECT, ta->buffer));
 }
-                               
+
 static JSValue js_typed_array_get_toStringTag(JSContext *ctx,
                                               JSValueConst this_val)
 {
@@ -52007,7 +52492,7 @@ static JSValue js_typed_array_fill(JSContext *ctx, JSValueConst this_val,
 
     if (typed_array_is_detached(ctx, p))
         return JS_ThrowTypeErrorDetachedArrayBuffer(ctx);
-    
+
     shift = typed_array_size_log2(p->class_id);
     switch(shift) {
     case 0:
@@ -52148,7 +52633,7 @@ static JSValue js_typed_array_indexOf(JSContext *ctx, JSValueConst this_val,
             res = 0;
         goto done;
     }
-    
+
     is_bigint = 0;
     is_int = 0; /* avoid warning */
     v64 = 0; /* avoid warning */
@@ -52166,7 +52651,7 @@ static JSValue js_typed_array_indexOf(JSContext *ctx, JSValueConst this_val,
 #ifdef CONFIG_BIGNUM
     if (tag == JS_TAG_BIG_INT) {
         JSBigFloat *p1 = JS_VALUE_GET_PTR(argv[0]);
-        
+
         if (p->class_id == JS_CLASS_BIG_INT64_ARRAY) {
             if (bf_get_int64(&v64, &p1->num, 0) != 0)
                 goto done;
@@ -52374,14 +52859,14 @@ static JSValue js_typed_array_join(JSContext *ctx, JSValueConst this_val,
         el = JS_GetPropertyUint32(ctx, this_val, i);
         /* Can return undefined for example if the typed array is detached */
         if (!JS_IsNull(el) && !JS_IsUndefined(el)) {
-            if (JS_IsException(el))
-                goto fail;
-            if (toLocaleString) {
-                el = JS_ToLocaleStringFree(ctx, el);
-            }
-            if (string_buffer_concat_value_free(b, el))
-                goto fail;
+        if (JS_IsException(el))
+            goto fail;
+        if (toLocaleString) {
+            el = JS_ToLocaleStringFree(ctx, el);
         }
+        if (string_buffer_concat_value_free(b, el))
+            goto fail;
+    }
     }
     JS_FreeValue(ctx, sep);
     return string_buffer_end(b);
@@ -52799,7 +53284,7 @@ static JSValue js_typed_array_sort(JSContext *ctx, JSValueConst this_val,
             uint32_t *array_idx;
             void *array_tmp;
             size_t i, j;
-            
+
             /* XXX: a stable sort would use less memory */
             array_idx = js_malloc(ctx, len * sizeof(array_idx[0]));
             if (!array_idx)
@@ -53613,7 +54098,7 @@ static JSValue js_atomics_op(JSContext *ctx,
    }
 
    switch(op | (size_log2 << 3)) {
-            
+
 #ifdef CONFIG_BIGNUM
 #define OP(op_name, func_name)                          \
     case ATOMICS_OP_ ## op_name | (0 << 3):             \
@@ -53662,7 +54147,7 @@ static JSValue js_atomics_op(JSContext *ctx,
         a = atomic_load((_Atomic(uint64_t) *)ptr);
         break;
 #endif
-        
+
     case ATOMICS_OP_COMPARE_EXCHANGE | (0 << 3):
         {
             uint8_t v1 = v;
@@ -53837,7 +54322,7 @@ static JSValue js_atomics_wait(JSContext *ctx,
             return JS_EXCEPTION;
     } else
 #endif
-    {        
+    {
         if (JS_ToInt32(ctx, &v32, argv[2]))
             return JS_EXCEPTION;
         v = v32;
@@ -54059,3 +54544,295 @@ void JS_AddIntrinsicTypedArrays(JSContext *ctx)
     JS_AddIntrinsicAtomics(ctx);
 #endif
 }
+
+#ifdef CONFIG_DEBUGGER
+
+void* js_debugger_get_object_id(JSValue val) {
+  JSObject *p = JS_VALUE_GET_OBJ(val);
+  return p;
+}
+
+JSValue js_debugger_local_variables(JSContext *ctx, int stack_index) 
+{
+  JSValue ret = JS_NewObject(ctx);
+
+  // put exceptions on the top stack frame
+  if (stack_index == 0 && !JS_IsNull(ctx->rt->current_exception) && !JS_IsUndefined(ctx->rt->current_exception))
+    JS_SetPropertyStr(ctx, ret, "<exception>", JS_DupValue(ctx, ctx->rt->current_exception));
+
+  JSStackFrame *sf;
+  int cur_index = 0;
+
+  for (sf = ctx->rt->current_stack_frame; sf != NULL; sf = sf->prev_frame) {
+    // this val is one frame up
+
+    if (cur_index < stack_index) {
+      cur_index++;
+      continue;
+    }
+
+    JSObject *f = JS_VALUE_GET_OBJ(sf->cur_func);
+    if (!f || !js_class_has_bytecode(f->class_id))
+      goto done;
+
+    if (JS_VALUE_GET_OBJ(*sf->pthis) != JS_VALUE_GET_OBJ(ctx->global_obj))
+      JS_SetPropertyStr(ctx, ret, "this", JS_DupValue(ctx, *sf->pthis));
+
+    JSFunctionBytecode *b = f->u.func.function_bytecode;
+
+    for (uint32_t i = 0; i < b->arg_count + b->var_count; i++) {
+      JSValue var_val;
+      if (i < b->arg_count)
+        var_val = sf->arg_buf[i];
+      else
+        var_val = sf->var_buf[i - b->arg_count];
+
+      if (JS_IsUninitialized(var_val))
+        continue;
+
+      JSVarDef *vd = b->vardefs + i;
+      JS_SetProperty(ctx, ret, vd->var_name, JS_DupValue(ctx, var_val));
+    }
+
+    break;
+  }
+
+done:
+  return ret;
+}
+
+JSValue js_debugger_closure_variables(JSContext *ctx, int stack_index) {
+  JSValue ret = JS_NewObject(ctx);
+
+  JSStackFrame *sf;
+  int cur_index = 0;
+  for (sf = ctx->rt->current_stack_frame; sf != NULL; sf = sf->prev_frame) {
+    if (cur_index < stack_index) {
+      cur_index++;
+      continue;
+    }
+
+    JSObject *f = JS_VALUE_GET_OBJ(sf->cur_func);
+    if (!f || !js_class_has_bytecode(f->class_id))
+      goto done;
+
+    JSFunctionBytecode *b = f->u.func.function_bytecode;
+
+    for (uint32_t i = 0; i < b->closure_var_count; i++) {
+      JSClosureVar *cvar = b->closure_var + i;
+      JSValue var_val;
+      JSVarRef *var_ref = NULL;
+      if (f->u.func.var_refs)
+        var_ref = f->u.func.var_refs[i];
+      if (!var_ref || !var_ref->pvalue)
+        continue;
+      var_val = *var_ref->pvalue;
+
+      if (JS_IsUninitialized(var_val))
+        continue;
+
+      JS_SetProperty(ctx, ret, cvar->var_name, JS_DupValue(ctx, var_val));
+    }
+
+    break;
+  }
+
+done:
+  return ret;
+}
+
+JSValue js_debugger_build_backtrace(JSContext *ctx, const uint8_t *cur_pc)
+{
+  JSStackFrame *sf;
+  const char *func_name_str;
+  JSObject *p;
+  JSValue ret = JS_NewArray(ctx);
+  uint32_t stack_index = 0;
+
+  for (sf = ctx->rt->current_stack_frame; sf != NULL; sf = sf->prev_frame) {
+    JSValue current_frame = JS_NewObject(ctx);
+
+    uint32_t id = stack_index++;
+    JS_SetPropertyStr(ctx, current_frame, "id", JS_NewUint32(ctx, id));
+
+    func_name_str = get_func_name(ctx, sf->cur_func);
+    if (!func_name_str || func_name_str[0] == '\0')
+      JS_SetPropertyStr(ctx, current_frame, "name", JS_NewString(ctx, "<anonymous>"));
+    else
+      JS_SetPropertyStr(ctx, current_frame, "name", JS_NewString(ctx, func_name_str));
+    JS_FreeCString(ctx, func_name_str);
+
+    p = JS_VALUE_GET_OBJ(sf->cur_func);
+    if (p && js_class_has_bytecode(p->class_id)) {
+      JSFunctionBytecode *b;
+      int line_num1;
+
+      b = p->u.func.function_bytecode;
+      if (b->has_debug) {
+        const uint8_t *pc = sf != ctx->rt->current_stack_frame || !cur_pc ? sf->cur_pc : cur_pc;
+        line_num1 = find_line_num(ctx, b, pc - b->byte_code_buf - 1);
+        JS_SetPropertyStr(ctx, current_frame, "filename", JS_AtomToString(ctx, b->debug.filename));
+        if (line_num1 != -1)
+          JS_SetPropertyStr(ctx, current_frame, "lineno", JS_NewUint32(ctx, line_num1));
+      }
+    }
+    else {
+      JS_SetPropertyStr(ctx, current_frame, "name", JS_NewString(ctx, "(native)"));
+    }
+    JS_SetPropertyUint32(ctx, ret, id, current_frame);
+  }
+  return ret;
+}
+
+uint32_t js_debugger_stack_depth(JSContext *ctx) {
+  uint32_t stack_index = 0;
+  JSStackFrame *sf = ctx->rt->current_stack_frame;
+  while (sf != NULL) {
+    sf = sf->prev_frame;
+    stack_index++;
+  }
+  return stack_index;
+}
+
+
+void JS_SetBreakpointHandler(JSContext *ctx, JSDebuggerCheckLineNoF* debugger_check_line_no)
+{
+  ctx->debugger_check_line_no = debugger_check_line_no;
+}
+
+void JS_SetDebuggerMode(JSContext *ctx, int onoff)
+{
+  ctx->debugger_enabled = onoff;
+}
+
+#endif // CONFIG_DEBUGGER
+
+#ifdef CONFIG_STORAGE
+
+/* get name of user's class. For this obj:
+
+     class Account {} 
+     var obj = new Account();
+
+   it will return "Account" */
+
+JSValue JS_GetObjectClassName(JSContext *ctx, JSValueConst obj)
+{
+  JSValue ctor = JS_GetProperty(ctx, obj, JS_ATOM_constructor);
+
+  JSObject *p;
+  if (JS_VALUE_GET_TAG(ctor) != JS_TAG_OBJECT)
+    goto fail;
+  p = JS_VALUE_GET_OBJ(ctor);
+  if (p->class_id != JS_CLASS_BYTECODE_FUNCTION)
+    goto fail;
+
+  JSValue name = JS_GetProperty(ctx, ctor, JS_ATOM_name);
+  JS_FreeValue(ctx, ctor);
+  return name;
+
+fail:
+  JS_FreeValue(ctx, ctor);
+  return JS_UNDEFINED;
+}
+
+/* get value defined in local call frames/namespaces */
+
+JSValue JS_GetLocalValue(JSContext *ctx, JSAtom name)
+{
+  for (JSStackFrame *sf = ctx->rt->current_stack_frame; sf != NULL; sf = sf->prev_frame) {
+
+    JSObject *f = JS_VALUE_GET_OBJ(sf->cur_func);
+    if (!f || !js_class_has_bytecode(f->class_id))
+      break;
+
+    JSFunctionBytecode *b = f->u.func.function_bytecode;
+
+    for (uint32_t i = 0; i < b->arg_count + b->var_count; i++) {
+      JSValue var_val;
+      if (i < b->arg_count)
+        var_val = sf->arg_buf[i];
+      else
+        var_val = sf->var_buf[i - b->arg_count];
+
+      if (JS_IsUninitialized(var_val))
+        continue;
+
+      JSVarDef *vd = b->vardefs + i;
+      if(name == vd->var_name)
+        return JS_DupValue(ctx, var_val);
+    }
+  }
+  return JS_UNDEFINED;
+}
+
+JS_BOOL js_is_persitable(JSValue val);
+
+JS_BOOL js_set_persistent_rt(JSRuntime* rt, JSValue val, struct JSStorage* pst, uint32_t oid, JS_PERSISTENT_STATUS status) {
+
+  assert(js_is_persitable(val));
+
+  JSObject* po = JS_VALUE_GET_OBJ(val);
+
+  if (status == JS_NOT_PERSISTENT) {
+    if (po->persistent) {
+      js_free_rt(rt,po->persistent);
+      po->persistent = NULL;
+    }
+    return 0;
+  }
+
+  if (!po->persistent) {
+    po->persistent = js_malloc_rt(rt, sizeof(struct JSPersitentBlock));
+    if (!po->persistent)
+      return 0;
+  }
+
+  po->persistent->status = status; // loaded, modified, etc.
+  po->persistent->oid = oid;
+  po->persistent->storage = pst;
+
+  return 1;
+}
+
+JS_BOOL js_set_persistent(JSContext* ctx, JSValue val, struct JSStorage* pst, uint32_t oid, JS_PERSISTENT_STATUS status) {
+  return js_set_persistent_rt(JS_GetRuntime(ctx), val, pst, oid, status);
+}
+
+void js_set_persistent_status(JSValue val, JS_PERSISTENT_STATUS status) {
+  assert(js_is_persitable(val));
+  JSObject* po = JS_VALUE_GET_OBJ(val);
+  assert(po->persistent);
+  assert(status);
+  po->persistent->status = status;   
+}
+
+JS_PERSISTENT_STATUS js_is_persistent(JSValue val, struct JSStorage** pstor, uint32_t* poid)
+{
+  if(!js_is_persitable(val))
+    return JS_NOT_PERSISTENT;
+
+  JSObject* po = JS_VALUE_GET_OBJ(val);
+
+  if (!po->persistent)
+    return JS_NOT_PERSISTENT;
+
+  if (poid)
+    *poid = po->persistent->oid;
+  if (pstor) 
+    *pstor = po->persistent->storage;
+
+  return po->persistent->status;
+}
+
+uint32_t* js_get_persistent_oid_ref(JSValue val)
+{
+  assert(js_is_persitable(val));
+ 
+  JSObject* po = JS_VALUE_GET_OBJ(val);
+  assert(po->persistent);
+
+  return &po->persistent->oid;
+}
+
+#endif
diff --git a/quickjs.h b/quickjs.h
index d4a5cd3..a7e78f7 100644
--- a/quickjs.h
+++ b/quickjs.h
@@ -27,21 +27,24 @@
 
 #include <stdio.h>
 #include <stdint.h>
+#include <math.h>
+#include "quickjs-version.h"
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 #if defined(__GNUC__) || defined(__clang__)
-#define js_likely(x)          __builtin_expect(!!(x), 1)
-#define js_unlikely(x)        __builtin_expect(!!(x), 0)
-#define js_force_inline       inline __attribute__((always_inline))
-#define __js_printf_like(f, a)   __attribute__((format(printf, f, a)))
+  #define js_likely(x)          __builtin_expect(!!(x), 1)
+  #define js_unlikely(x)        __builtin_expect(!!(x), 0)
+  #define js_force_inline       inline __attribute__((always_inline))
+  //#define __js_printf_like(A, B)   __attribute__((format(printf, (A), (B))))
+  #define __js_printf_like(A, B) /*doesn't work, why?*/
 #else
-#define js_likely(x)     (x)
-#define js_unlikely(x)   (x)
-#define js_force_inline  inline
-#define __js_printf_like(a, b)
+  #define js_likely(x)     (x)
+  #define js_unlikely(x)   (x)
+  #define js_force_inline  __forceinline
+  #define __js_printf_like(A, B) /* */
 #endif
 
 #define JS_BOOL int
@@ -53,6 +56,15 @@ typedef struct JSClass JSClass;
 typedef uint32_t JSClassID;
 typedef uint32_t JSAtom;
 
+#ifdef CONFIG_STORAGE
+typedef enum JS_PERSISTENT_STATUS {
+  JS_NOT_PERSISTENT = 0,
+  JS_PERSISTENT_DORMANT = 1,
+  JS_PERSISTENT_LOADED = 2,
+  JS_PERSISTENT_MODIFIED = 3
+} JS_PERSISTENT_STATUS;
+#endif
+
 #if INTPTR_MAX >= INT64_MAX
 #define JS_PTR64
 #define JS_PTR64_DEF(a) a
@@ -64,6 +76,123 @@ typedef uint32_t JSAtom;
 #define JS_NAN_BOXING
 #endif
 
+typedef struct JSRefCountHeader {
+    int ref_count;
+} JSRefCountHeader;
+
+#define JS_FLOAT64_NAN NAN
+
+#if defined(JS_STRICT_NAN_BOXING) 
+
+  // This schema defines strict NAN boxing for both 32 and 64 versions 
+
+  // This is a method of storing values in the IEEE 754 double-precision
+  // floating-point number. double type is 64-bit, comprised of 1 sign bit, 11
+  // exponent bits and 52 mantissa bits:
+  //    7         6        5        4        3        2        1        0
+  // seeeeeee|eeeemmmm|mmmmmmmm|mmmmmmmm|mmmmmmmm|mmmmmmmm|mmmmmmmm|mmmmmmmm
+  //
+
+  // s0000000|0000tttt|vvvvvvvv|vvvvvvvv|vvvvvvvv|vvvvvvvv|vvvvvvvv|vvvvvvvv
+  // NaN marker   |tag|  48-bit placeholder for values: pointers, strings
+  // all bits 0   | 4 |  
+  // for non float|bit|  
+
+  // Doubles contain non-zero in NaN marker field and are stored with bits inversed 
+
+  // JS_UNINITIALIZED is strictly uint64_t(0)
+
+  enum {
+
+    JS_TAG_UNINITIALIZED = 0,
+    JS_TAG_INT = 1,
+    JS_TAG_BOOL = 2,
+    JS_TAG_NULL = 3,
+    JS_TAG_UNDEFINED = 4,
+    JS_TAG_CATCH_OFFSET = 5,
+    JS_TAG_EXCEPTION = 6,
+    JS_TAG_FLOAT64 = 7,
+
+    /* all tags with a reference count have 0b1000 bit */
+    JS_TAG_OBJECT = 8,
+    JS_TAG_FUNCTION_BYTECODE = 9, /* used internally */
+    JS_TAG_MODULE = 10, /* used internally */
+    JS_TAG_STRING = 11,
+    JS_TAG_SYMBOL = 12,
+    JS_TAG_BIG_FLOAT = 13,
+    JS_TAG_BIG_INT = 14,
+    JS_TAG_BIG_DECIMAL = 15,
+
+  };
+
+  typedef uint64_t JSValue;
+
+  #define JSValueConst JSValue
+
+  #define JS_VALUE_GET_TAG(v) (((v)>0xFFFFFFFFFFFFFull)? (unsigned)JS_TAG_FLOAT64 : (unsigned)((v) >> 48))
+
+  #define JS_VALUE_GET_INT(v)  (int)(v)
+  #define JS_VALUE_GET_BOOL(v) (int)(v)
+  #ifdef JS_PTR64
+  #define JS_VALUE_GET_PTR(v)  ((void *)((intptr_t)(v) & 0x0000FFFFFFFFFFFFull))
+  #else
+  #define JS_VALUE_GET_PTR(v)  ((void *)(intptr_t)(v))
+  #endif
+
+  #define JS_MKVAL(tag, val) (((uint64_t)(0xF & tag) << 48) | (uint32_t)(val))
+  #define JS_MKPTR(tag, ptr) (((uint64_t)(0xF & tag) << 48) | ((uint64_t)(ptr) & 0x0000FFFFFFFFFFFFull))
+
+  #define JS_NAN JS_MKVAL(JS_TAG_FLOAT64,0)
+  #define JS_INFINITY_NEGATIVE JS_MKVAL(JS_TAG_FLOAT64,1)
+  #define JS_INFINITY_POSITIVE JS_MKVAL(JS_TAG_FLOAT64,2)
+
+  static inline double JS_VALUE_GET_FLOAT64(JSValue v)
+  {
+    if (v > 0xFFFFFFFFFFFFFull) {
+    union { JSValue v; double d; } u;
+    u.v = ~v;
+    return u.d;
+  }
+    else if (v == JS_NAN)
+      return JS_FLOAT64_NAN;
+    else if (v == JS_INFINITY_POSITIVE)
+      return INFINITY;
+    else 
+      return -INFINITY;
+  }
+
+  static inline JSValue __JS_NewFloat64(JSContext *ctx, double d)
+  {
+    union { double d; uint64_t u64; } u;
+    JSValue v;
+    u.d = d;
+    /* normalize NaN */
+    if (js_unlikely((u.u64 & 0x7ff0000000000000) == 0x7ff0000000000000)) {
+      if( isnan(d))
+      v = JS_NAN;
+      else if (d < 0.0)
+        v = JS_INFINITY_NEGATIVE;
+      else
+        v = JS_INFINITY_POSITIVE;
+    }
+    else
+      v = ~u.u64;
+    return v;
+  }
+
+  //#define JS_TAG_IS_FLOAT64(tag) ((tag & 0x7ff0) != 0)
+  #define JS_TAG_IS_FLOAT64(tag) (tag == JS_TAG_FLOAT64)
+
+  /* same as JS_VALUE_GET_TAG, but return JS_TAG_FLOAT64 with NaN boxing */
+  /* Note: JS_VALUE_GET_TAG already normalized in this packaging schema*/
+  #define JS_VALUE_GET_NORM_TAG(v) JS_VALUE_GET_TAG(v)
+
+  #define JS_VALUE_IS_NAN(v) (v == JS_NAN)
+
+  #define JS_VALUE_HAS_REF_COUNT(v) ((JS_VALUE_GET_TAG(v) & 0xFFF8) == 0x8)
+
+#else // !JS_STRICT_NAN_BOXING
+
 enum {
     /* all tags with a reference count are negative */
     JS_TAG_FIRST       = -11, /* first negative tag */
@@ -87,12 +216,6 @@ enum {
     /* any larger tag is FLOAT64 if JS_NAN_BOXING */
 };
 
-typedef struct JSRefCountHeader {
-    int ref_count;
-} JSRefCountHeader;
-
-#define JS_FLOAT64_NAN NAN
-
 #ifdef CONFIG_CHECK_JSVALUE
 /* JSValue consistency : it is not possible to run the code in this
    mode, but it is useful to detect simple reference counting
@@ -244,12 +367,16 @@ static inline JS_BOOL JS_VALUE_IS_NAN(JSValue v)
 
 #endif /* !JS_NAN_BOXING */
 
+  #define JS_VALUE_HAS_REF_COUNT(v) ((unsigned)JS_VALUE_GET_TAG(v) >= (unsigned)JS_TAG_FIRST)
+
+#endif /* !JS_STRICT_NAN_BOXING */
+
 #define JS_VALUE_IS_BOTH_INT(v1, v2) ((JS_VALUE_GET_TAG(v1) | JS_VALUE_GET_TAG(v2)) == 0)
 #define JS_VALUE_IS_BOTH_FLOAT(v1, v2) (JS_TAG_IS_FLOAT64(JS_VALUE_GET_TAG(v1)) && JS_TAG_IS_FLOAT64(JS_VALUE_GET_TAG(v2)))
 
 #define JS_VALUE_GET_OBJ(v) ((JSObject *)JS_VALUE_GET_PTR(v))
 #define JS_VALUE_GET_STRING(v) ((JSString *)JS_VALUE_GET_PTR(v))
-#define JS_VALUE_HAS_REF_COUNT(v) ((unsigned)JS_VALUE_GET_TAG(v) >= (unsigned)JS_TAG_FIRST)
+
 
 /* special values */
 #define JS_NULL      JS_MKVAL(JS_TAG_NULL, 0)
@@ -355,6 +482,8 @@ void JS_SetContextOpaque(JSContext *ctx, void *opaque);
 JSRuntime *JS_GetRuntime(JSContext *ctx);
 void JS_SetClassProto(JSContext *ctx, JSClassID class_id, JSValue obj);
 JSValue JS_GetClassProto(JSContext *ctx, JSClassID class_id);
+JSValue JS_GetClassName(JSContext *ctx, JSClassID class_id);
+
 
 /* the following functions are used to select the intrinsic object to
    save memory */
@@ -421,13 +550,19 @@ void JS_DumpMemoryUsage(FILE *fp, const JSMemoryUsage *s, JSRuntime *rt);
 JSAtom JS_NewAtomLen(JSContext *ctx, const char *str, size_t len);
 JSAtom JS_NewAtom(JSContext *ctx, const char *str);
 JSAtom JS_NewAtomUInt32(JSContext *ctx, uint32_t n);
+JSAtom JS_NewAtomLenRT(JSRuntime *rt, const char *str, int len);
+JSAtom JS_NewAtomSymbolLenRT(JSRuntime *rt, const char *str, int len);
+const char *JS_AtomGetStr(JSContext *ctx, char *buf, int buf_size, JSAtom atom);
+const char *JS_AtomGetStrRT(JSRuntime *rt, char *buf, int buf_size, JSAtom atom);
 JSAtom JS_DupAtom(JSContext *ctx, JSAtom v);
+JSAtom JS_DupAtomRT(JSRuntime *rt, JSAtom v);
 void JS_FreeAtom(JSContext *ctx, JSAtom v);
 void JS_FreeAtomRT(JSRuntime *rt, JSAtom v);
 JSValue JS_AtomToValue(JSContext *ctx, JSAtom atom);
 JSValue JS_AtomToString(JSContext *ctx, JSAtom atom);
 const char *JS_AtomToCString(JSContext *ctx, JSAtom atom);
 JSAtom JS_ValueToAtom(JSContext *ctx, JSValueConst val);
+int    JS_AtomIsArrayIndex(JSContext *ctx, uint32_t *pval, JSAtom atom);
 
 /* object class support */
 
@@ -436,6 +571,8 @@ typedef struct JSPropertyEnum {
     JSAtom atom;
 } JSPropertyEnum;
 
+void js_free_prop_enum(JSContext *ctx, JSPropertyEnum *tab, uint32_t len);
+
 typedef struct JSPropertyDescriptor {
     int flags;
     JSValue value;
@@ -443,6 +580,8 @@ typedef struct JSPropertyDescriptor {
     JSValue setter;
 } JSPropertyDescriptor;
 
+#define JS_PROCEED_WITH_DEFAULT 12345
+
 typedef struct JSClassExoticMethods {
     /* Return -1 if exception (can only happen in case of Proxy object),
        FALSE if the property does not exists, TRUE if it exists. If 1 is
@@ -464,7 +603,7 @@ typedef struct JSClassExoticMethods {
                                int flags);
     /* The following methods can be emulated with the previous ones,
        so they are usually not needed */
-    /* return < 0 if exception or TRUE/FALSE */
+    /* return < 0 if exception or TRUE/FALSE or JS_PROCEED_WITH_DEFAULT */
     int (*has_property)(JSContext *ctx, JSValueConst obj, JSAtom atom);
     JSValue (*get_property)(JSContext *ctx, JSValueConst obj, JSAtom atom,
                             JSValueConst receiver);
@@ -521,9 +660,9 @@ static js_force_inline JSValue JS_NewInt64(JSContext *ctx, int64_t val)
 {
     JSValue v;
     if (val == (int32_t)val) {
-        v = JS_NewInt32(ctx, val);
+        v = JS_NewInt32(ctx, (int32_t)val);
     } else {
-        v = __JS_NewFloat64(ctx, val);
+        v = __JS_NewFloat64(ctx, (double)val);
     }
     return v;
 }
@@ -563,6 +702,9 @@ static js_force_inline JSValue JS_NewFloat64(JSContext *ctx, double d)
     return v;
 }
 
+JSValue JS_NewDate(JSContext* ctx, double ms_1970);
+JS_BOOL JS_IsDate(JSContext *ctx, JSValueConst obj, double* ms_since_1970);
+
 static inline JS_BOOL JS_IsNumber(JSValueConst v)
 {
     int tag = JS_VALUE_GET_TAG(v);
@@ -627,6 +769,8 @@ static inline JS_BOOL JS_IsObject(JSValueConst v)
     return JS_VALUE_GET_TAG(v) == JS_TAG_OBJECT;
 }
 
+int JS_IsObjectPlain(JSContext *ctx, JSValueConst val); /* plain JS object, that is not function nor array nor anything else */
+
 JSValue JS_Throw(JSContext *ctx, JSValue obj);
 JSValue JS_GetException(JSContext *ctx);
 JS_BOOL JS_IsError(JSContext *ctx, JSValueConst val);
@@ -716,9 +860,21 @@ JSValue JS_NewObject(JSContext *ctx);
 JS_BOOL JS_IsFunction(JSContext* ctx, JSValueConst val);
 JS_BOOL JS_IsConstructor(JSContext* ctx, JSValueConst val);
 JS_BOOL JS_SetConstructorBit(JSContext *ctx, JSValueConst func_obj, JS_BOOL val);
+JS_BOOL JS_IsFunctionOfThisRealm(JSContext *ctx, JSValueConst val);
+
+JS_BOOL JS_AreFunctionsOfSameOrigin(JSContext *ctx, JSValue f1, JSValue f2);
+
+JSValue JS_GetUserClassName(JSContext *ctx, JSValueConst obj);
 
 JSValue JS_NewArray(JSContext *ctx);
 int JS_IsArray(JSContext *ctx, JSValueConst val);
+/* isArray and has 'tag' property */
+int     JS_IsTuple(JSContext *ctx, JSValueConst val);
+JSValue JS_GetTupleTag(JSContext *ctx, JSValueConst val);
+
+JSValue JS_NewFastArray(JSContext *ctx, int argc, JSValueConst *argv);
+/* Access an Array's internal JSValue array if available */
+int     JS_GetFastArray(JSContext *ctx, JSValueConst obj, JSValue **arrpp, uint32_t *countp);
 
 JSValue JS_GetPropertyInternal(JSContext *ctx, JSValueConst obj,
                                JSAtom prop, JSValueConst receiver,
@@ -733,6 +889,9 @@ JSValue JS_GetPropertyStr(JSContext *ctx, JSValueConst this_obj,
 JSValue JS_GetPropertyUint32(JSContext *ctx, JSValueConst this_obj,
                              uint32_t idx);
 
+/* get .length property */
+int JS_GetPropertyLength(JSContext *ctx, int64_t *plength, JSValueConst obj);
+
 int JS_SetPropertyInternal(JSContext *ctx, JSValueConst this_obj,
                            JSAtom prop, JSValue val,
                            int flags);
@@ -753,6 +912,9 @@ int JS_PreventExtensions(JSContext *ctx, JSValueConst obj);
 int JS_DeleteProperty(JSContext *ctx, JSValueConst obj, JSAtom prop, int flags);
 int JS_SetPrototype(JSContext *ctx, JSValueConst obj, JSValueConst proto_val);
 JSValue JS_GetPrototype(JSContext *ctx, JSValueConst val);
+JSValue JS_GetPrototypeOfDate(JSContext *ctx);
+
+int JS_CopyDataProperties(JSContext *ctx, JSValueConst target, JSValueConst source, JSValueConst excluded, int setprop);
 
 #define JS_GPN_STRING_MASK  (1 << 0)
 #define JS_GPN_SYMBOL_MASK  (1 << 1)
@@ -780,6 +942,10 @@ JS_BOOL JS_DetectModule(const char *input, size_t input_len);
 /* 'input' must be zero terminated i.e. input[input_len] = '\0'. */
 JSValue JS_Eval(JSContext *ctx, const char *input, size_t input_len,
                 const char *filename, int eval_flags);
+JSValue JS_Eval2(JSContext *ctx, const char *input, size_t input_len,
+                const char *filename, int eval_flags, int line_no);
+
+JSValue JS_EvalFunction(JSContext *ctx, JSValue fun_obj);
 /* same as JS_Eval() but with an explicit 'this_obj' parameter */
 JSValue JS_EvalThis(JSContext *ctx, JSValueConst this_obj,
                     const char *input, size_t input_len,
@@ -801,6 +967,7 @@ int JS_DefinePropertyGetSet(JSContext *ctx, JSValueConst this_obj,
 void JS_SetOpaque(JSValue obj, void *opaque);
 void *JS_GetOpaque(JSValueConst obj, JSClassID class_id);
 void *JS_GetOpaque2(JSContext *ctx, JSValueConst obj, JSClassID class_id);
+JSClassID JS_GetClassID(JSValueConst obj, void** ppopaque);
 
 /* 'buf' must be zero terminated i.e. buf[buf_len] = '\0'. */
 JSValue JS_ParseJSON(JSContext *ctx, const char *buf, size_t buf_len,
@@ -890,11 +1057,9 @@ uint8_t *JS_WriteObject2(JSContext *ctx, size_t *psize, JSValueConst obj,
 #define JS_READ_OBJ_ROM_DATA  (1 << 1) /* avoid duplicating 'buf' data */
 #define JS_READ_OBJ_SAB       (1 << 2) /* allow SharedArrayBuffer */
 #define JS_READ_OBJ_REFERENCE (1 << 3) /* allow object references */
-JSValue JS_ReadObject(JSContext *ctx, const uint8_t *buf, size_t buf_len,
-                      int flags);
-/* instantiate and evaluate a bytecode function. Only used when
-   reading a script or module with JS_ReadObject() */
-JSValue JS_EvalFunction(JSContext *ctx, JSValue fun_obj);
+JSValue JS_ReadObject(JSContext *ctx, const uint8_t *buf, size_t buf_len, int flags);
+JSValue JS_ReadObject2(JSContext *ctx, const uint8_t *buf, size_t buf_len, int flags, size_t* remnants_len);
+
 /* load the dependencies of the module 'obj'. Useful when JS_ReadObject()
    returns a module. */
 int JS_ResolveModule(JSContext *ctx, JSValueConst obj);
@@ -905,6 +1070,9 @@ JSAtom JS_GetScriptOrModuleName(JSContext *ctx, int n_stack_levels);
 JSModuleDef *JS_RunModule(JSContext *ctx, const char *basename,
                           const char *filename);
 
+JSValue JS_GetModuleExportItemStr(JSContext *ctx, JSModuleDef *m, const char *name);
+JSValue JS_GetModuleExportItem(JSContext *ctx, JSModuleDef *m, JSAtom atom);
+
 /* C function definition */
 typedef enum JSCFunctionEnum {  /* XXX: should rename for namespace isolation */
     JS_CFUNC_generic,
@@ -1039,6 +1207,22 @@ int JS_SetModuleExport(JSContext *ctx, JSModuleDef *m, const char *export_name,
 int JS_SetModuleExportList(JSContext *ctx, JSModuleDef *m,
                            const JSCFunctionListEntry *tab, int len);
 
+#ifdef CONFIG_DEBUGGER
+
+typedef JS_BOOL JSDebuggerCheckLineNoF(JSContext *ctx, JSAtom file_name, uint32_t line_no, const uint8_t *pc);
+
+void JS_SetBreakpointHandler(JSContext *ctx, JSDebuggerCheckLineNoF* line_hit_handler);
+void JS_SetDebuggerMode(JSContext *ctx, int onoff);
+
+uint32_t js_debugger_stack_depth(JSContext *ctx);
+JSValue  js_debugger_build_backtrace(JSContext *ctx, const uint8_t *cur_pc);
+JSValue  js_debugger_closure_variables(JSContext *ctx, int stack_index);
+JSValue  js_debugger_local_variables(JSContext *ctx, int stack_index);
+
+#endif
+
+void*    js_debugger_get_object_id(JSValue val);
+
 #undef js_unlikely
 #undef js_force_inline
 
-- 
2.28.0.windows.1

